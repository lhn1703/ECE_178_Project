
ECE_178_Project_app.elf:     file format elf32-littlenios2
ECE_178_Project_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d0d0 memsz 0x0000d0d0 flags r-x
    LOAD off    0x0000e0f0 vaddr 0x0000d0f0 paddr 0x0000ec8c align 2**12
         filesz 0x00001b9c memsz 0x00001b9c flags rw-
    LOAD off    0x00010828 vaddr 0x00010828 paddr 0x00010828 align 2**12
         filesz 0x00000000 memsz 0x00000730 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cd7c  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001b4  0000cf3c  0000cf3c  0000df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b9c  0000d0f0  0000ec8c  0000e0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000730  00010828  00010828  00010828  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  00010f58  00010f58  0000fc8c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000fc8c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000930  00000000  00000000  0000fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000fd70  00000000  00000000  000105e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f29  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005ee2  00000000  00000000  00025279  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c40  00000000  00000000  0002b15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003412  00000000  00000000  0002cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000075ee  00000000  00000000  000301ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0003779c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000dd0  00000000  00000000  000377d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003b74e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0003b751  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003b75b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003b75c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0003b75d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0003b766  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0003b76f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003b778  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0003b783  2**0
                  CONTENTS, READONLY
 26 .jdi          00004534  00000000  00000000  0003b7b2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000b4812  00000000  00000000  0003fce6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
0000cf3c l    d  .rodata	00000000 .rodata
0000d0f0 l    d  .rwdata	00000000 .rwdata
00010828 l    d  .bss	00000000 .bss
00010f58 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ECE_178_Project_app_bsp//obj/HAL/src/crt0.o
00000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0000d0f0 l     O .rwdata	00000094 timer_note_period
0000039c l     F .text	00000054 timer_2_int_init
000005a4 l     F .text	000000b0 timer_3_init
00000000 l    df *ABS*	00000000 piezo.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0000d494 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00004b04 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004e10 l     F .text	00000034 alt_dev_reg
0000d8b8 l     O .rwdata	00001060 jtag_uart
0000e918 l     O .rwdata	000000c4 rs_232
0000e9dc l     O .rwdata	00000054 pixel_buffer_dma
0000ea30 l     O .rwdata	00000044 pixel_rgb_resampler
0000ea74 l     O .rwdata	0000002c sd_card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000096b0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000098bc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009ef4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000a1a4 l     F .text	0000009c altera_avalon_uart_irq
0000a240 l     F .text	000000e4 altera_avalon_uart_rxirq
0000a324 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000a4c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000a6d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b8a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b9f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ba20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bc84 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bdc4 l     F .text	0000003c alt_get_errno
0000be00 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
000108c4 g     O .bss	00000004 aux_status_register
00004bf0 g     F .text	0000007c alt_main
0000b194 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
000108f0 g     O .bss	00000100 alt_irq
00010838 g     O .bss	00000004 vbx
0000ec8c g       *ABS*	00000000 __flash_rwdata_start
00005530 g     F .text	000001a4 Check_for_Master_Boot_Record
000045d4 g     F .text	0000005c _gettimeofday_r
000092d0 g     F .text	000001bc alt_up_sd_card_fclose
000004e8 g     F .text	000000bc update_timer_2
00001c80 g     F .text	000000a8 play_note
0001083c g     O .bss	00000004 sd_card_dev
000021f0 g     F .text	00000440 .hidden __divsf3
000108e8 g     O .bss	00000004 current_sector_modified
00010840 g     O .bss	00000004 xb1
00003094 g     F .text	00000070 .hidden __fixsfsi
00007ef4 g     F .text	000000c4 alt_up_sd_card_is_Present
00005278 g     F .text	0000004c Save_Modified_Sector
0000a8fc g     F .text	00000194 alt_up_pixel_buffer_dma_draw
00000df0 g     F .text	00000294 updatePaddlePos
00010828 g     O .bss	00000004 scoreL
0000a8c0 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
000108e0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00000020 g       *ABS*	00000000 __flash_exceptions_start
00010890 g     O .bss	00000004 errno
00010844 g     O .bss	00000004 xl1
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000108ac g     O .bss	00000004 alt_argv
00016c48 g       *ABS*	00000000 _gp
000084ac g     F .text	0000037c alt_up_sd_card_fopen
00002bb0 g     F .text	000004e4 .hidden __subsf3
00008024 g     F .text	000000d0 alt_up_sd_card_find_first
0000aa90 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
000108d4 g     O .bss	00000004 command_argument_register
0000ec58 g     O .rwdata	00000004 tempo
0000eac8 g     O .rwdata	00000180 alt_fd_list
00000758 g     F .text	00000214 resetObjects
00001ae8 g     F .text	00000040 stop_timer_0
00010848 g     O .bss	00000004 xb0
00007770 g     F .text	0000012c find_first_empty_record_in_root_directory
0000bbc0 g     F .text	00000090 alt_find_dev
0000c3a4 g     F .text	00000148 memcpy
0001084c g     O .bss	00000004 xr0
00010850 g     O .bss	00000004 yb0
0000bd48 g     F .text	0000007c alt_io_redirect
0000cf3c g       *ABS*	00000000 __DTOR_END__
00010830 g     O .bss	00000004 song_ptr
000010d8 g     F .text	00000290 drawBall
00007378 g     F .text	000001ac find_first_empty_cluster
00007e38 g     F .text	000000bc alt_up_sd_card_open_dev
0000ab4c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00010854 g     O .bss	00000004 vby
00009ab4 g     F .text	0000021c altera_avalon_jtag_uart_read
00010858 g     O .bss	00000004 vry
0000ce4c g     F .text	00000064 .hidden __udivsi3
0000af84 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
000026ec g     F .text	000000c8 .hidden __lesf2
00010894 g     O .bss	00000008 alt_timezone
0001085c g     O .bss	00000004 yl0
0000c24c g     F .text	00000090 alt_icache_flush
00006678 g     F .text	000000b8 get_dir_divider_location
0000b4a8 g     F .text	00000084 helper_plot_pixel
00006348 g     F .text	000000c4 filename_to_upper_case
00008828 g     F .text	00000088 alt_up_sd_card_set_attributes
00001b28 g     F .text	00000054 timer_1_int_init
000056d4 g     F .text	0000027c Read_File_Record_At_Offset
0000ec84 g     O .rwdata	00000004 alt_max_fd
00006f04 g     F .text	00000474 find_file_in_directory
000041ec g     F .text	00000110 .hidden __extendsfdf2
00001368 g     F .text	00000630 drawPaddles
00007fb8 g     F .text	0000006c alt_up_sd_card_is_FAT16
00003228 g     F .text	000008ac .hidden __adddf3
0000ab80 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0000c81c g     F .text	00000538 .hidden __umoddi3
0000ec60 g     O .rwdata	00000004 _global_impure_ptr
0000ec5c g     O .rwdata	00000004 song_length
000069cc g     F .text	00000538 get_home_directory_cluster_for_file
00001998 g     F .text	00000054 timer_0_int_init
00010f58 g       *ABS*	00000000 __bss_end
00004a14 g     F .text	000000f0 alt_iic_isr_register
0000aca8 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
00004d08 g     F .text	00000108 alt_tick
000108ec g     O .bss	00000004 current_sector_index
0000a0f8 g     F .text	000000ac altera_avalon_uart_init
000003f0 g     F .text	000000f8 timer_2_isr
000049c8 g     F .text	0000004c alt_ic_irq_enabled
00004c6c g     F .text	0000009c alt_alarm_stop
00005450 g     F .text	000000e0 mark_cluster
000108a4 g     O .bss	00000004 alt_irq_active
00010860 g     O .bss	00000004 xl0
000000ec g     F .exceptions	000000d4 alt_irq_handler
0000eaa0 g     O .rwdata	00000028 alt_dev_null
0000789c g     F .text	0000018c convert_filename_to_name_extension
00010864 g     O .bss	00000004 vrx
0000b9ac g     F .text	00000048 alt_dcache_flush_all
0000b3e0 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
000108c0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00007524 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0000d30c g     O .rwdata	00000188 pokemon_song_duration
0000ec8c g       *ABS*	00000000 __ram_rwdata_end
0000ec7c g     O .rwdata	00000008 alt_dev_list
000108e4 g     O .bss	00000004 device_pointer
0000b52c g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
00002630 g     F .text	000000bc .hidden __gtsf2
0000d0f0 g       *ABS*	00000000 __ram_rodata_end
0000ec54 g     O .rwdata	00000004 ballSize
0000ceb0 g     F .text	00000058 .hidden __umodsi3
00001a64 g     F .text	00000084 update_timer_0
00010f58 g       *ABS*	00000000 end
0000a714 g     F .text	000001ac altera_avalon_uart_write
000095f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00010868 g     O .bss	00000004 yb1
0000cf3c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
00009f6c g     F .text	0000007c alt_avalon_timer_sc_init
0000a048 g     F .text	00000060 altera_avalon_uart_write_fd
000044a4 g     F .text	00000064 .hidden __clzsi2
0000a0a8 g     F .text	00000050 altera_avalon_uart_close_fd
00009cd0 g     F .text	00000224 altera_avalon_jtag_uart_write
0000c69c g     F .text	00000180 __call_exitprocs
000001c0 g     F .text	0000004c _start
000108b4 g     O .bss	00000004 _alt_tick_rate
00004520 g     F .text	00000064 rand
000108b8 g     O .bss	00000004 _alt_nticks
00004e7c g     F .text	00000348 alt_sys_init
00003104 g     F .text	00000124 .hidden __floatsisf
0000c584 g     F .text	00000118 __register_exitproc
0001086c g     O .bss	00000002 sd_card_handle
0000995c g     F .text	00000068 altera_avalon_jtag_uart_close
0000d0f0 g       *ABS*	00000000 __ram_rwdata_start
0000cf3c g       *ABS*	00000000 __ram_rodata_start
000108bc g     O .bss	00000004 initialized
0000948c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c1a8 g     F .text	000000a4 alt_get_fd
000109f0 g     O .bss	00000014 search_data
0000c328 g     F .text	0000007c memcmp
0000954c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00010f58 g       *ABS*	00000000 __alt_stack_base
0000959c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010a04 g     O .bss	00000054 boot_sector_data
00003ad4 g     F .text	00000718 .hidden __muldf3
0000c0a0 g     F .text	00000108 alt_find_file
0000ba5c g     F .text	000000a4 alt_dev_llist_insert
00001b7c g     F .text	00000048 timer_1_isr
00004690 g     F .text	000001d4 gettimeofday
00010828 g       *ABS*	00000000 __bss_start
0000020c g     F .text	00000190 main
000108b0 g     O .bss	00000004 alt_envp
0000aaec g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
000094ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00004508 g     F .text	00000018 srand
000026ec g     F .text	000000c8 .hidden __ltsf2
000088b0 g     F .text	00000088 alt_up_sd_card_get_attributes
000051c4 g     F .text	000000b4 Write_Sector_Data
00008cb0 g     F .text	00000620 alt_up_sd_card_write
000042fc g     F .text	000001a8 .hidden __truncdfsf2
00004584 g     F .text	00000050 time
0000ec88 g     O .rwdata	00000004 alt_errno
00010834 g     O .bss	00000004 note
0000cd54 g     F .text	00000084 .hidden __divsi3
00001bc4 g     F .text	000000bc update_timer_1
0000cf3c g       *ABS*	00000000 __CTOR_END__
000027b4 g     F .text	000003fc .hidden __mulsf3
000108c8 g     O .bss	00000004 status_register
000108d0 g     O .bss	00000004 command_register
0000cf3c g       *ABS*	00000000 __flash_rodata_start
0000cf3c g       *ABS*	00000000 __DTOR_LIST__
00004e44 g     F .text	00000038 alt_irq_init
0000c018 g     F .text	00000064 alt_release_fd
000019ec g     F .text	00000078 timer_0_isr
0000539c g     F .text	000000b4 get_cluster_flag
0000cf6f g     O .rodata	00000100 .hidden __clz_tab
00005950 g     F .text	0000028c Write_File_Record_At_Offset
0000c2dc g     F .text	00000014 atexit
00002630 g     F .text	000000bc .hidden __gesf2
00005bdc g     F .text	00000680 Check_for_DOS_FAT
00007a28 g     F .text	000002c8 create_file
0000ec64 g     O .rwdata	00000004 _impure_ptr
000108cc g     O .bss	00000004 CSD_register_w0
000108a8 g     O .bss	00000004 alt_argc
0000bb60 g     F .text	00000060 _do_dtors
00010870 g     O .bss	00000004 xr1
00010874 g     O .bss	00000004 yl1
00000020 g       .exceptions	00000000 alt_irq_entry
0000ec74 g     O .rwdata	00000008 alt_fs_list
00010878 g     O .bss	00000004 pixel_buffer_dev
0000640c g     F .text	0000026c check_file_name_for_FAT16_compliance
000108d8 g     O .bss	00000004 buffer_memory
0001089c g     O .bss	00000008 alt_resettime
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004864 g     F .text	00000050 alt_ic_isr_register
000108dc g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0000ec8c g       *ABS*	00000000 _edata
00009fe8 g     F .text	00000060 altera_avalon_uart_read_fd
00010f58 g       *ABS*	00000000 _end
00010a58 g     O .bss	00000500 active_files
000001c0 g       *ABS*	00000000 __ram_exceptions_end
00007cf0 g     F .text	00000148 copy_file_record_name_to_string
0000096c g     F .text	00000484 updateBallPos
000099c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000625c g     F .text	000000ec Look_for_FAT16
0000493c g     F .text	0000008c alt_ic_irq_disable
0001087c g     O .bss	00000004 vlx
0000c07c g     F .text	00000024 altera_nios2_qsys_irq_init
00010880 g     O .bss	00000004 yr0
0000c2f0 g     F .text	00000038 exit
000080f4 g     F .text	000003b8 alt_up_sd_card_find_next
0000cdd8 g     F .text	00000074 .hidden __modsi3
000052c4 g     F .text	000000d8 Read_Sector_Data
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001084 g     F .text	00000054 draw
0000a46c g     F .text	00000054 altera_avalon_uart_close
0000cf08 g     F .text	00000034 _exit
00010884 g     O .bss	00000004 vly
0000b774 g     F .text	0000012c alt_alarm_start
00004630 g     F .text	00000060 .hidden __muldi3
00008938 g     F .text	00000378 alt_up_sd_card_read
00010888 g     O .bss	00000004 yr1
0000c4ec g     F .text	00000098 strlen
0000bec4 g     F .text	00000154 open
00000654 g     F .text	00000048 timer_3_isr
0000ec48 g     O .rwdata	00000004 paddleW
0000bc50 g     F .text	00000034 alt_icache_flush_all
0000069c g     F .text	000000bc inPaddleBound
0000ec68 g     O .rwdata	00000004 alt_priority_mask
000048b4 g     F .text	00000088 alt_ic_irq_enable
0000a4fc g     F .text	000001dc altera_avalon_uart_read
0001082c g     O .bss	00000004 scoreR
0000d184 g     O .rwdata	00000188 pokemon_song_index
0000ec6c g     O .rwdata	00000008 alt_alarm_list
0000bb00 g     F .text	00000060 _do_ctors
0000b8dc g     F .text	000000d0 close
00001d28 g     F .text	000004c8 .hidden __addsf3
0000ec4c g     O .rwdata	00000004 paddleH
0001088c g     O .bss	00000002 config
00004b6c g     F .text	00000084 alt_load
00006730 g     F .text	0000029c match_file_record_to_name_ext
0000ec50 g     O .rwdata	00000004 paddleSpeed



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407014 	ori	at,at,448
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10823c04 	addi	r2,r2,2288
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10823c04 	addi	r2,r2,2288
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1cc:	00bffd16 	blt	zero,r2,1c4 <__alt_data_end+0xf80001c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1dc:	d69b1214 	ori	gp,gp,27720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1e4:	10820a14 	ori	r2,r2,2088

    movhi r3, %hi(__bss_end)
     1e8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1ec:	18c3d614 	ori	r3,r3,3928

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x40>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <__alt_data_end+0xf80001f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	0004b6c0 	call	4b6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	0004bf00 	call	4bf0 <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <__alt_data_end+0xf8000208>

0000020c <main>:
        1.5};
float tempo = 85/60; // 85 bpm
int song_ptr = 0;
int song_length = 98;

int main() {
     20c:	defffd04 	addi	sp,sp,-12
     210:	dfc00215 	stw	ra,8(sp)
     214:	df000115 	stw	fp,4(sp)
     218:	df000104 	addi	fp,sp,4
	sd_card_dev = alt_up_sd_card_open_dev("/dev/sd_card");
     21c:	01000074 	movhi	r4,1
     220:	2133cf04 	addi	r4,r4,-12484
     224:	0007e380 	call	7e38 <alt_up_sd_card_open_dev>
     228:	d0a6fd15 	stw	r2,-25612(gp)
	while (!alt_up_sd_card_is_Present())
     22c:	00000406 	br	240 <main+0x34>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_DISPLAYS_BASE, 1);
     230:	00c00044 	movi	r3,1
     234:	00820834 	movhi	r2,2080
     238:	10854c04 	addi	r2,r2,5424
     23c:	10c00035 	stwio	r3,0(r2)
int song_ptr = 0;
int song_length = 98;

int main() {
	sd_card_dev = alt_up_sd_card_open_dev("/dev/sd_card");
	while (!alt_up_sd_card_is_Present())
     240:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
     244:	1080005c 	xori	r2,r2,1
     248:	10803fcc 	andi	r2,r2,255
     24c:	103ff81e 	bne	r2,zero,230 <__alt_data_end+0xf8000230>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_DISPLAYS_BASE, 1);
	}
	while (!alt_up_sd_card_is_FAT16())
     250:	00000406 	br	264 <main+0x58>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_DISPLAYS_BASE, 2);
     254:	00c00084 	movi	r3,2
     258:	00820834 	movhi	r2,2080
     25c:	10854c04 	addi	r2,r2,5424
     260:	10c00035 	stwio	r3,0(r2)
	sd_card_dev = alt_up_sd_card_open_dev("/dev/sd_card");
	while (!alt_up_sd_card_is_Present())
	{
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_DISPLAYS_BASE, 1);
	}
	while (!alt_up_sd_card_is_FAT16())
     264:	0007fb80 	call	7fb8 <alt_up_sd_card_is_FAT16>
     268:	1080005c 	xori	r2,r2,1
     26c:	10803fcc 	andi	r2,r2,255
     270:	103ff81e 	bne	r2,zero,254 <__alt_data_end+0xf8000254>
	{
		IOWR_ALTERA_AVALON_PIO_DATA(HEX_DISPLAYS_BASE, 2);
	}
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
     274:	01000074 	movhi	r4,1
     278:	2133d304 	addi	r4,r4,-12468
     27c:	000a8c00 	call	a8c0 <alt_up_pixel_buffer_dma_open_dev>
     280:	d0a70c15 	stw	r2,-25552(gp)
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     284:	d0a70c17 	ldw	r2,-25552(gp)
     288:	000b883a 	mov	r5,zero
     28c:	1009883a 	mov	r4,r2
     290:	000ab800 	call	ab80 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 1);
     294:	d0a70c17 	ldw	r2,-25552(gp)
     298:	01400044 	movi	r5,1
     29c:	1009883a 	mov	r4,r2
     2a0:	000ab800 	call	ab80 <alt_up_pixel_buffer_dma_clear_screen>
	xl1 = paddleW/2;
     2a4:	d0a00017 	ldw	r2,-32768(gp)
     2a8:	1006d7fa 	srli	r3,r2,31
     2ac:	1885883a 	add	r2,r3,r2
     2b0:	1005d07a 	srai	r2,r2,1
     2b4:	1009883a 	mov	r4,r2
     2b8:	00031040 	call	3104 <__floatsisf>
     2bc:	1007883a 	mov	r3,r2
     2c0:	d0e6ff15 	stw	r3,-25604(gp)
	yl1 = HEIGHT/2;
     2c4:	0090bc34 	movhi	r2,17136
     2c8:	d0a70b15 	stw	r2,-25556(gp)
	xr1 = WIDTH-(paddleW/2);
     2cc:	d0a00017 	ldw	r2,-32768(gp)
     2d0:	1006d7fa 	srli	r3,r2,31
     2d4:	1885883a 	add	r2,r3,r2
     2d8:	1005d07a 	srai	r2,r2,1
     2dc:	1007883a 	mov	r3,r2
     2e0:	00805004 	movi	r2,320
     2e4:	10c5c83a 	sub	r2,r2,r3
     2e8:	1009883a 	mov	r4,r2
     2ec:	00031040 	call	3104 <__floatsisf>
     2f0:	1007883a 	mov	r3,r2
     2f4:	d0e70a15 	stw	r3,-25560(gp)
	yr1 = HEIGHT/2;
     2f8:	0090bc34 	movhi	r2,17136
     2fc:	d0a71015 	stw	r2,-25536(gp)
	timer_0_int_init();
     300:	00019980 	call	1998 <timer_0_int_init>
	timer_1_int_init();
     304:	0001b280 	call	1b28 <timer_1_int_init>
	timer_2_int_init();
     308:	000039c0 	call	39c <timer_2_int_init>
	update_timer_2(0.01);
     30c:	010f0934 	movhi	r4,15396
     310:	2135c284 	addi	r4,r4,-10486
     314:	00004e80 	call	4e8 <update_timer_2>
	timer_3_init(1000/60);
     318:	01000404 	movi	r4,16
     31c:	00005a40 	call	5a4 <timer_3_init>
	time_t t;
	srand((unsigned) time(&t));
     320:	e13fff04 	addi	r4,fp,-4
     324:	00045840 	call	4584 <time>
     328:	1009883a 	mov	r4,r2
     32c:	00045080 	call	4508 <srand>
	resetObjects();
     330:	00007580 	call	758 <resetObjects>

	sd_card_handle = alt_up_sd_card_fopen("config.txt", 0);
     334:	000b883a 	mov	r5,zero
     338:	01000074 	movhi	r4,1
     33c:	2133d904 	addi	r4,r4,-12444
     340:	00084ac0 	call	84ac <alt_up_sd_card_fopen>
     344:	d0a7090d 	sth	r2,-25564(gp)
	config = alt_up_sd_card_read(sd_card_handle);
     348:	d0a7090b 	ldhu	r2,-25564(gp)
     34c:	10bfffcc 	andi	r2,r2,65535
     350:	10a0001c 	xori	r2,r2,32768
     354:	10a00004 	addi	r2,r2,-32768
     358:	1009883a 	mov	r4,r2
     35c:	00089380 	call	8938 <alt_up_sd_card_read>
     360:	d0a7110d 	sth	r2,-25532(gp)
	alt_up_sd_card_fclose(sd_card_handle);
     364:	d0a7090b 	ldhu	r2,-25564(gp)
     368:	10bfffcc 	andi	r2,r2,65535
     36c:	10a0001c 	xori	r2,r2,32768
     370:	10a00004 	addi	r2,r2,-32768
     374:	1009883a 	mov	r4,r2
     378:	00092d00 	call	92d0 <alt_up_sd_card_fclose>
	while(1)
	{
		IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, config);
     37c:	d0a7110b 	ldhu	r2,-25532(gp)
     380:	10ffffcc 	andi	r3,r2,65535
     384:	18e0001c 	xori	r3,r3,32768
     388:	18e00004 	addi	r3,r3,-32768
     38c:	00820834 	movhi	r2,2080
     390:	10855404 	addi	r2,r2,5456
     394:	10c00035 	stwio	r3,0(r2)
	}
     398:	003ff806 	br	37c <__alt_data_end+0xf800037c>

0000039c <timer_2_int_init>:
	return 0;
}



static void timer_2_int_init() {
     39c:	defffd04 	addi	sp,sp,-12
     3a0:	dfc00215 	stw	ra,8(sp)
     3a4:	df000115 	stw	fp,4(sp)
     3a8:	df000104 	addi	fp,sp,4
	// stop the timer first
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_2_BASE, 0x8);
     3ac:	00c00204 	movi	r3,8
     3b0:	00820834 	movhi	r2,2080
     3b4:	10852104 	addi	r2,r2,5252
     3b8:	10c00035 	stwio	r3,0(r2)

	// timer interrupt handler
	alt_ic_isr_register(TIMER_2_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_2_IRQ,
     3bc:	d8000015 	stw	zero,0(sp)
     3c0:	000f883a 	mov	r7,zero
     3c4:	01800034 	movhi	r6,0
     3c8:	3180fc04 	addi	r6,r6,1008
     3cc:	01400144 	movi	r5,5
     3d0:	0009883a 	mov	r4,zero
     3d4:	00048640 	call	4864 <alt_ic_isr_register>
				timer_2_isr, NULL, NULL);
}
     3d8:	0001883a 	nop
     3dc:	e037883a 	mov	sp,fp
     3e0:	dfc00117 	ldw	ra,4(sp)
     3e4:	df000017 	ldw	fp,0(sp)
     3e8:	dec00204 	addi	sp,sp,8
     3ec:	f800283a 	ret

000003f0 <timer_2_isr>:
void timer_2_isr() { // signals when the note is done playing
     3f0:	defffb04 	addi	sp,sp,-20
     3f4:	dfc00415 	stw	ra,16(sp)
     3f8:	df000315 	stw	fp,12(sp)
     3fc:	dc000215 	stw	r16,8(sp)
     400:	df000304 	addi	fp,sp,12
	// clear the TO bit first
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_2_BASE, 0);
     404:	0007883a 	mov	r3,zero
     408:	00820834 	movhi	r2,2080
     40c:	10852004 	addi	r2,r2,5248
     410:	10c00035 	stwio	r3,0(r2)

	float note_period = timer_note_period[pokemon_song_index[song_ptr]];
     414:	d0e6fa17 	ldw	r3,-25624(gp)
     418:	00800074 	movhi	r2,1
     41c:	10b46104 	addi	r2,r2,-11900
     420:	18c7883a 	add	r3,r3,r3
     424:	18c7883a 	add	r3,r3,r3
     428:	10c5883a 	add	r2,r2,r3
     42c:	10c00017 	ldw	r3,0(r2)
     430:	00800074 	movhi	r2,1
     434:	10b43c04 	addi	r2,r2,-12048
     438:	18c7883a 	add	r3,r3,r3
     43c:	18c7883a 	add	r3,r3,r3
     440:	10c5883a 	add	r2,r2,r3
     444:	10800017 	ldw	r2,0(r2)
     448:	e0bffd15 	stw	r2,-12(fp)
	float note_duration = tempo / pokemon_song_duration[song_ptr];
     44c:	d4200417 	ldw	r16,-32752(gp)
     450:	d0e6fa17 	ldw	r3,-25624(gp)
     454:	00800074 	movhi	r2,1
     458:	10b4c304 	addi	r2,r2,-11508
     45c:	18c7883a 	add	r3,r3,r3
     460:	18c7883a 	add	r3,r3,r3
     464:	10c5883a 	add	r2,r2,r3
     468:	10800017 	ldw	r2,0(r2)
     46c:	1009883a 	mov	r4,r2
     470:	00031040 	call	3104 <__floatsisf>
     474:	1007883a 	mov	r3,r2
     478:	180b883a 	mov	r5,r3
     47c:	8009883a 	mov	r4,r16
     480:	00021f00 	call	21f0 <__divsf3>
     484:	1007883a 	mov	r3,r2
     488:	e0fffe15 	stw	r3,-8(fp)
	play_note(note_period, note_duration);
     48c:	e17ffe17 	ldw	r5,-8(fp)
     490:	e13ffd17 	ldw	r4,-12(fp)
     494:	0001c800 	call	1c80 <play_note>
	update_timer_2(note_duration);
     498:	e13ffe17 	ldw	r4,-8(fp)
     49c:	00004e80 	call	4e8 <update_timer_2>
	if (song_ptr < song_length)
     4a0:	d0e6fa17 	ldw	r3,-25624(gp)
     4a4:	d0a00517 	ldw	r2,-32748(gp)
     4a8:	1880040e 	bge	r3,r2,4bc <timer_2_isr+0xcc>
		song_ptr++;
     4ac:	d0a6fa17 	ldw	r2,-25624(gp)
     4b0:	10800044 	addi	r2,r2,1
     4b4:	d0a6fa15 	stw	r2,-25624(gp)
     4b8:	00000106 	br	4c0 <timer_2_isr+0xd0>
	else
		song_ptr = 0;
     4bc:	d026fa15 	stw	zero,-25624(gp)

	// dummy instruction to synchronize
	IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_2_BASE);
     4c0:	00820834 	movhi	r2,2080
     4c4:	10852004 	addi	r2,r2,5248
     4c8:	10800037 	ldwio	r2,0(r2)
	return;
     4cc:	0001883a 	nop
}
     4d0:	e6ffff04 	addi	sp,fp,-4
     4d4:	dfc00217 	ldw	ra,8(sp)
     4d8:	df000117 	ldw	fp,4(sp)
     4dc:	dc000017 	ldw	r16,0(sp)
     4e0:	dec00304 	addi	sp,sp,12
     4e4:	f800283a 	ret

000004e8 <update_timer_2>:

void update_timer_2(float duration_period) {
     4e8:	defffa04 	addi	sp,sp,-24
     4ec:	dfc00515 	stw	ra,20(sp)
     4f0:	df000415 	stw	fp,16(sp)
     4f4:	df000404 	addi	fp,sp,16
     4f8:	e13fff15 	stw	r4,-4(fp)
	// stop the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_2_BASE, 0x8);
     4fc:	00c00204 	movi	r3,8
     500:	00820834 	movhi	r2,2080
     504:	10852104 	addi	r2,r2,5252
     508:	10c00035 	stwio	r3,0(r2)

	// load the correct value into the registers
	int period = duration_period * 1000 * TIMER_2_LOAD_VALUE;
     50c:	01511eb4 	movhi	r5,17530
     510:	e13fff17 	ldw	r4,-4(fp)
     514:	00027b40 	call	27b4 <__mulsf3>
     518:	1007883a 	mov	r3,r2
     51c:	1805883a 	mov	r2,r3
     520:	0151d0f4 	movhi	r5,18243
     524:	2953c004 	addi	r5,r5,20224
     528:	1009883a 	mov	r4,r2
     52c:	00027b40 	call	27b4 <__mulsf3>
     530:	1007883a 	mov	r3,r2
     534:	1805883a 	mov	r2,r3
     538:	1009883a 	mov	r4,r2
     53c:	00030940 	call	3094 <__fixsfsi>
     540:	e0bffc15 	stw	r2,-16(fp)
	int periodlo = period & 0xffff;
     544:	e0bffc17 	ldw	r2,-16(fp)
     548:	10bfffcc 	andi	r2,r2,65535
     54c:	e0bffd15 	stw	r2,-12(fp)
	int periodhi = period >> 16;
     550:	e0bffc17 	ldw	r2,-16(fp)
     554:	1005d43a 	srai	r2,r2,16
     558:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_2_BASE, periodlo);
     55c:	00820834 	movhi	r2,2080
     560:	10852204 	addi	r2,r2,5256
     564:	e0fffd17 	ldw	r3,-12(fp)
     568:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_2_BASE, periodhi);
     56c:	00820834 	movhi	r2,2080
     570:	10852304 	addi	r2,r2,5260
     574:	e0fffe17 	ldw	r3,-8(fp)
     578:	10c00035 	stwio	r3,0(r2)

	//enable ITO, not CONT, and START bits
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_2_BASE, 0b101);
     57c:	00c00144 	movi	r3,5
     580:	00820834 	movhi	r2,2080
     584:	10852104 	addi	r2,r2,5252
     588:	10c00035 	stwio	r3,0(r2)
}
     58c:	0001883a 	nop
     590:	e037883a 	mov	sp,fp
     594:	dfc00117 	ldw	ra,4(sp)
     598:	df000017 	ldw	fp,0(sp)
     59c:	dec00204 	addi	sp,sp,8
     5a0:	f800283a 	ret

000005a4 <timer_3_init>:

static void timer_3_init(int period_arg) {
     5a4:	defff904 	addi	sp,sp,-28
     5a8:	dfc00615 	stw	ra,24(sp)
     5ac:	df000515 	stw	fp,20(sp)
     5b0:	df000504 	addi	fp,sp,20
     5b4:	e13fff15 	stw	r4,-4(fp)
	// stop the timer first
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_3_BASE, 0x8);
     5b8:	00c00204 	movi	r3,8
     5bc:	00820834 	movhi	r2,2080
     5c0:	10851104 	addi	r2,r2,5188
     5c4:	10c00035 	stwio	r3,0(r2)

	// set the period to 1000 ms, TIMER_LOAD_VALUE is scalar for 1ms in the native clk freq
	int period = period_arg * TIMER_3_LOAD_VALUE;
     5c8:	e0ffff17 	ldw	r3,-4(fp)
     5cc:	00b0d3d4 	movui	r2,49999
     5d0:	1885383a 	mul	r2,r3,r2
     5d4:	e0bffc15 	stw	r2,-16(fp)
	int periodlo = period & 0xffff;
     5d8:	e0bffc17 	ldw	r2,-16(fp)
     5dc:	10bfffcc 	andi	r2,r2,65535
     5e0:	e0bffd15 	stw	r2,-12(fp)
	int periodhi = period >> 16;
     5e4:	e0bffc17 	ldw	r2,-16(fp)
     5e8:	1005d43a 	srai	r2,r2,16
     5ec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_3_BASE, periodlo);
     5f0:	00820834 	movhi	r2,2080
     5f4:	10851204 	addi	r2,r2,5192
     5f8:	e0fffd17 	ldw	r3,-12(fp)
     5fc:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_3_BASE, periodhi);
     600:	00820834 	movhi	r2,2080
     604:	10851304 	addi	r2,r2,5196
     608:	e0fffe17 	ldw	r3,-8(fp)
     60c:	10c00035 	stwio	r3,0(r2)

	//enable ITO, CONT, and START bits
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_3_BASE, 0b111);
     610:	00c001c4 	movi	r3,7
     614:	00820834 	movhi	r2,2080
     618:	10851104 	addi	r2,r2,5188
     61c:	10c00035 	stwio	r3,0(r2)

	// timer interrupt handler
	alt_ic_isr_register(TIMER_3_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_3_IRQ,
     620:	d8000015 	stw	zero,0(sp)
     624:	000f883a 	mov	r7,zero
     628:	01800034 	movhi	r6,0
     62c:	31819504 	addi	r6,r6,1620
     630:	01400184 	movi	r5,6
     634:	0009883a 	mov	r4,zero
     638:	00048640 	call	4864 <alt_ic_isr_register>
							timer_3_isr, NULL, NULL);
}
     63c:	0001883a 	nop
     640:	e037883a 	mov	sp,fp
     644:	dfc00117 	ldw	ra,4(sp)
     648:	df000017 	ldw	fp,0(sp)
     64c:	dec00204 	addi	sp,sp,8
     650:	f800283a 	ret

00000654 <timer_3_isr>:
void timer_3_isr() {
     654:	defffe04 	addi	sp,sp,-8
     658:	dfc00115 	stw	ra,4(sp)
     65c:	df000015 	stw	fp,0(sp)
     660:	d839883a 	mov	fp,sp
	// clear the TO bit
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_3_BASE, 0);
     664:	0007883a 	mov	r3,zero
     668:	00820834 	movhi	r2,2080
     66c:	10851004 	addi	r2,r2,5184
     670:	10c00035 	stwio	r3,0(r2)

	draw();
     674:	00010840 	call	1084 <draw>

	// dummy instruction to synchronize
	IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_3_BASE);
     678:	00820834 	movhi	r2,2080
     67c:	10851004 	addi	r2,r2,5184
     680:	10800037 	ldwio	r2,0(r2)
	return;
     684:	0001883a 	nop
}
     688:	e037883a 	mov	sp,fp
     68c:	dfc00117 	ldw	ra,4(sp)
     690:	df000017 	ldw	fp,0(sp)
     694:	dec00204 	addi	sp,sp,8
     698:	f800283a 	ret

0000069c <inPaddleBound>:

bool inPaddleBound(float y, float yp)
{
     69c:	defffc04 	addi	sp,sp,-16
     6a0:	dfc00315 	stw	ra,12(sp)
     6a4:	df000215 	stw	fp,8(sp)
     6a8:	df000204 	addi	fp,sp,8
     6ac:	e13ffe15 	stw	r4,-8(fp)
     6b0:	e17fff15 	stw	r5,-4(fp)
	return (y >= (yp-paddleH/2)) && (y <= (yp+paddleH/2));
     6b4:	d0a00117 	ldw	r2,-32764(gp)
     6b8:	1006d7fa 	srli	r3,r2,31
     6bc:	1885883a 	add	r2,r3,r2
     6c0:	1005d07a 	srai	r2,r2,1
     6c4:	1009883a 	mov	r4,r2
     6c8:	00031040 	call	3104 <__floatsisf>
     6cc:	1007883a 	mov	r3,r2
     6d0:	180b883a 	mov	r5,r3
     6d4:	e13fff17 	ldw	r4,-4(fp)
     6d8:	0002bb00 	call	2bb0 <__subsf3>
     6dc:	1007883a 	mov	r3,r2
     6e0:	1805883a 	mov	r2,r3
     6e4:	e17ffe17 	ldw	r5,-8(fp)
     6e8:	1009883a 	mov	r4,r2
     6ec:	00026ec0 	call	26ec <__lesf2>
     6f0:	00801216 	blt	zero,r2,73c <inPaddleBound+0xa0>
     6f4:	d0a00117 	ldw	r2,-32764(gp)
     6f8:	1006d7fa 	srli	r3,r2,31
     6fc:	1885883a 	add	r2,r3,r2
     700:	1005d07a 	srai	r2,r2,1
     704:	1009883a 	mov	r4,r2
     708:	00031040 	call	3104 <__floatsisf>
     70c:	1007883a 	mov	r3,r2
     710:	e17fff17 	ldw	r5,-4(fp)
     714:	1809883a 	mov	r4,r3
     718:	0001d280 	call	1d28 <__addsf3>
     71c:	1007883a 	mov	r3,r2
     720:	1805883a 	mov	r2,r3
     724:	e17ffe17 	ldw	r5,-8(fp)
     728:	1009883a 	mov	r4,r2
     72c:	00026300 	call	2630 <__gesf2>
     730:	10000216 	blt	r2,zero,73c <inPaddleBound+0xa0>
     734:	00800044 	movi	r2,1
     738:	00000106 	br	740 <inPaddleBound+0xa4>
     73c:	0005883a 	mov	r2,zero
     740:	1080004c 	andi	r2,r2,1
}
     744:	e037883a 	mov	sp,fp
     748:	dfc00117 	ldw	ra,4(sp)
     74c:	df000017 	ldw	fp,0(sp)
     750:	dec00204 	addi	sp,sp,8
     754:	f800283a 	ret

00000758 <resetObjects>:

void resetObjects()
{
     758:	defff704 	addi	sp,sp,-36
     75c:	dfc00815 	stw	ra,32(sp)
     760:	df000715 	stw	fp,28(sp)
     764:	dcc00615 	stw	r19,24(sp)
     768:	dc800515 	stw	r18,20(sp)
     76c:	dc400415 	stw	r17,16(sp)
     770:	dc000315 	stw	r16,12(sp)
     774:	df000704 	addi	fp,sp,28
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 0, 0, WIDTH-1, HEIGHT-1, COLOR_BLACK, 0);
     778:	d0e70c17 	ldw	r3,-25552(gp)
     77c:	d8000215 	stw	zero,8(sp)
     780:	d8000115 	stw	zero,4(sp)
     784:	00803bc4 	movi	r2,239
     788:	d8800015 	stw	r2,0(sp)
     78c:	01c04fc4 	movi	r7,319
     790:	000d883a 	mov	r6,zero
     794:	000b883a 	mov	r5,zero
     798:	1809883a 	mov	r4,r3
     79c:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
	xb1 = WIDTH/2;
     7a0:	0090c834 	movhi	r2,17184
     7a4:	d0a6fe15 	stw	r2,-25608(gp)
	yb1 = HEIGHT/2;
     7a8:	0090bc34 	movhi	r2,17136
     7ac:	d0a70815 	stw	r2,-25568(gp)
	vbx = 2;
     7b0:	00900034 	movhi	r2,16384
     7b4:	d0a6fc15 	stw	r2,-25616(gp)
	vby = 0.3;
     7b8:	008fa6b4 	movhi	r2,16026
     7bc:	10a66684 	addi	r2,r2,-26214
     7c0:	d0a70315 	stw	r2,-25588(gp)
	vlx = 0;
     7c4:	d0270d15 	stw	zero,-25548(gp)
	vly = 0;
     7c8:	d0270f15 	stw	zero,-25540(gp)
	vrx = 0;
     7cc:	d0270715 	stw	zero,-25572(gp)
	vry = 0;
     7d0:	d0270415 	stw	zero,-25584(gp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xl1-paddleW/2, (int) yl1-paddleH/2, (int) xl1+paddleW/2, (int) yl1+paddleH/2, COLOR_WHITE, 0);
     7d4:	d4270c17 	ldw	r16,-25552(gp)
     7d8:	d0a6ff17 	ldw	r2,-25604(gp)
     7dc:	1009883a 	mov	r4,r2
     7e0:	00030940 	call	3094 <__fixsfsi>
     7e4:	1009883a 	mov	r4,r2
     7e8:	d0a00017 	ldw	r2,-32768(gp)
     7ec:	1006d7fa 	srli	r3,r2,31
     7f0:	1885883a 	add	r2,r3,r2
     7f4:	1005d07a 	srai	r2,r2,1
     7f8:	20a3c83a 	sub	r17,r4,r2
     7fc:	d0a70b17 	ldw	r2,-25556(gp)
     800:	1009883a 	mov	r4,r2
     804:	00030940 	call	3094 <__fixsfsi>
     808:	1009883a 	mov	r4,r2
     80c:	d0a00117 	ldw	r2,-32764(gp)
     810:	1006d7fa 	srli	r3,r2,31
     814:	1885883a 	add	r2,r3,r2
     818:	1005d07a 	srai	r2,r2,1
     81c:	20a5c83a 	sub	r18,r4,r2
     820:	d0a6ff17 	ldw	r2,-25604(gp)
     824:	1009883a 	mov	r4,r2
     828:	00030940 	call	3094 <__fixsfsi>
     82c:	1009883a 	mov	r4,r2
     830:	d0a00017 	ldw	r2,-32768(gp)
     834:	1006d7fa 	srli	r3,r2,31
     838:	1885883a 	add	r2,r3,r2
     83c:	1005d07a 	srai	r2,r2,1
     840:	20a7883a 	add	r19,r4,r2
     844:	d0a70b17 	ldw	r2,-25556(gp)
     848:	1009883a 	mov	r4,r2
     84c:	00030940 	call	3094 <__fixsfsi>
     850:	1009883a 	mov	r4,r2
     854:	d0a00117 	ldw	r2,-32764(gp)
     858:	1006d7fa 	srli	r3,r2,31
     85c:	1885883a 	add	r2,r3,r2
     860:	1005d07a 	srai	r2,r2,1
     864:	2085883a 	add	r2,r4,r2
     868:	d8000215 	stw	zero,8(sp)
     86c:	00ffffd4 	movui	r3,65535
     870:	d8c00115 	stw	r3,4(sp)
     874:	d8800015 	stw	r2,0(sp)
     878:	980f883a 	mov	r7,r19
     87c:	900d883a 	mov	r6,r18
     880:	880b883a 	mov	r5,r17
     884:	8009883a 	mov	r4,r16
     888:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr1-paddleW/2, (int) yr1-paddleH/2, (int) xr1+paddleW/2, (int) yr1+paddleH/2, COLOR_WHITE, 0);
     88c:	d4270c17 	ldw	r16,-25552(gp)
     890:	d0a70a17 	ldw	r2,-25560(gp)
     894:	1009883a 	mov	r4,r2
     898:	00030940 	call	3094 <__fixsfsi>
     89c:	1009883a 	mov	r4,r2
     8a0:	d0a00017 	ldw	r2,-32768(gp)
     8a4:	1006d7fa 	srli	r3,r2,31
     8a8:	1885883a 	add	r2,r3,r2
     8ac:	1005d07a 	srai	r2,r2,1
     8b0:	20a3c83a 	sub	r17,r4,r2
     8b4:	d0a71017 	ldw	r2,-25536(gp)
     8b8:	1009883a 	mov	r4,r2
     8bc:	00030940 	call	3094 <__fixsfsi>
     8c0:	1009883a 	mov	r4,r2
     8c4:	d0a00117 	ldw	r2,-32764(gp)
     8c8:	1006d7fa 	srli	r3,r2,31
     8cc:	1885883a 	add	r2,r3,r2
     8d0:	1005d07a 	srai	r2,r2,1
     8d4:	20a5c83a 	sub	r18,r4,r2
     8d8:	d0a70a17 	ldw	r2,-25560(gp)
     8dc:	1009883a 	mov	r4,r2
     8e0:	00030940 	call	3094 <__fixsfsi>
     8e4:	1009883a 	mov	r4,r2
     8e8:	d0a00017 	ldw	r2,-32768(gp)
     8ec:	1006d7fa 	srli	r3,r2,31
     8f0:	1885883a 	add	r2,r3,r2
     8f4:	1005d07a 	srai	r2,r2,1
     8f8:	20a7883a 	add	r19,r4,r2
     8fc:	d0a71017 	ldw	r2,-25536(gp)
     900:	1009883a 	mov	r4,r2
     904:	00030940 	call	3094 <__fixsfsi>
     908:	1009883a 	mov	r4,r2
     90c:	d0a00117 	ldw	r2,-32764(gp)
     910:	1006d7fa 	srli	r3,r2,31
     914:	1885883a 	add	r2,r3,r2
     918:	1005d07a 	srai	r2,r2,1
     91c:	2085883a 	add	r2,r4,r2
     920:	d8000215 	stw	zero,8(sp)
     924:	00ffffd4 	movui	r3,65535
     928:	d8c00115 	stw	r3,4(sp)
     92c:	d8800015 	stw	r2,0(sp)
     930:	980f883a 	mov	r7,r19
     934:	900d883a 	mov	r6,r18
     938:	880b883a 	mov	r5,r17
     93c:	8009883a 	mov	r4,r16
     940:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
}
     944:	0001883a 	nop
     948:	e6fffc04 	addi	sp,fp,-16
     94c:	dfc00517 	ldw	ra,20(sp)
     950:	df000417 	ldw	fp,16(sp)
     954:	dcc00317 	ldw	r19,12(sp)
     958:	dc800217 	ldw	r18,8(sp)
     95c:	dc400117 	ldw	r17,4(sp)
     960:	dc000017 	ldw	r16,0(sp)
     964:	dec00604 	addi	sp,sp,24
     968:	f800283a 	ret

0000096c <updateBallPos>:

int note = 0;
void updateBallPos()
{
     96c:	defffc04 	addi	sp,sp,-16
     970:	dfc00315 	stw	ra,12(sp)
     974:	df000215 	stw	fp,8(sp)
     978:	dc400115 	stw	r17,4(sp)
     97c:	dc000015 	stw	r16,0(sp)
     980:	df000204 	addi	fp,sp,8
	xb0 = xb1;
     984:	d0a6fe17 	ldw	r2,-25608(gp)
     988:	d0a70015 	stw	r2,-25600(gp)
	yb0 = yb1;
     98c:	d0a70817 	ldw	r2,-25568(gp)
     990:	d0a70215 	stw	r2,-25592(gp)
	xb1 += vbx;
     994:	d0a6fe17 	ldw	r2,-25608(gp)
     998:	d0e6fc17 	ldw	r3,-25616(gp)
     99c:	180b883a 	mov	r5,r3
     9a0:	1009883a 	mov	r4,r2
     9a4:	0001d280 	call	1d28 <__addsf3>
     9a8:	1007883a 	mov	r3,r2
     9ac:	1805883a 	mov	r2,r3
     9b0:	d0a6fe15 	stw	r2,-25608(gp)
	yb1 += vby;
     9b4:	d0a70817 	ldw	r2,-25568(gp)
     9b8:	d0e70317 	ldw	r3,-25588(gp)
     9bc:	180b883a 	mov	r5,r3
     9c0:	1009883a 	mov	r4,r2
     9c4:	0001d280 	call	1d28 <__addsf3>
     9c8:	1007883a 	mov	r3,r2
     9cc:	1805883a 	mov	r2,r3
     9d0:	d0a70815 	stw	r2,-25568(gp)
	if (xb1 <= paddleW)
     9d4:	d0a00017 	ldw	r2,-32768(gp)
     9d8:	1009883a 	mov	r4,r2
     9dc:	00031040 	call	3104 <__floatsisf>
     9e0:	1007883a 	mov	r3,r2
     9e4:	d0a6fe17 	ldw	r2,-25608(gp)
     9e8:	100b883a 	mov	r5,r2
     9ec:	1809883a 	mov	r4,r3
     9f0:	00026300 	call	2630 <__gesf2>
     9f4:	10005416 	blt	r2,zero,b48 <updateBallPos+0x1dc>
	{
		if (!inPaddleBound(yb1, yl1))
     9f8:	d0a70817 	ldw	r2,-25568(gp)
     9fc:	d0e70b17 	ldw	r3,-25556(gp)
     a00:	180b883a 	mov	r5,r3
     a04:	1009883a 	mov	r4,r2
     a08:	000069c0 	call	69c <inPaddleBound>
     a0c:	1080005c 	xori	r2,r2,1
     a10:	10803fcc 	andi	r2,r2,255
     a14:	10000526 	beq	r2,zero,a2c <updateBallPos+0xc0>
		{
			scoreR += 1;
     a18:	d0a6f917 	ldw	r2,-25628(gp)
     a1c:	10800044 	addi	r2,r2,1
     a20:	d0a6f915 	stw	r2,-25628(gp)
			resetObjects();
     a24:	00007580 	call	758 <resetObjects>
     a28:	0000a506 	br	cc0 <updateBallPos+0x354>
		}
		else
		{
			xb1 = 2*(paddleW) - xb1;
     a2c:	d0a00017 	ldw	r2,-32768(gp)
     a30:	1085883a 	add	r2,r2,r2
     a34:	1009883a 	mov	r4,r2
     a38:	00031040 	call	3104 <__floatsisf>
     a3c:	1007883a 	mov	r3,r2
     a40:	d0a6fe17 	ldw	r2,-25608(gp)
     a44:	100b883a 	mov	r5,r2
     a48:	1809883a 	mov	r4,r3
     a4c:	0002bb00 	call	2bb0 <__subsf3>
     a50:	1007883a 	mov	r3,r2
     a54:	1805883a 	mov	r2,r3
     a58:	d0a6fe15 	stw	r2,-25608(gp)
			vbx *= -1;
     a5c:	d0a6fc17 	ldw	r2,-25616(gp)
     a60:	10a0003c 	xorhi	r2,r2,32768
     a64:	d0a6fc15 	stw	r2,-25616(gp)
			vby += 0.7*vly;
     a68:	d0a70317 	ldw	r2,-25588(gp)
     a6c:	1009883a 	mov	r4,r2
     a70:	00041ec0 	call	41ec <__extendsfdf2>
     a74:	1021883a 	mov	r16,r2
     a78:	1823883a 	mov	r17,r3
     a7c:	d0a70f17 	ldw	r2,-25540(gp)
     a80:	1009883a 	mov	r4,r2
     a84:	00041ec0 	call	41ec <__extendsfdf2>
     a88:	1011883a 	mov	r8,r2
     a8c:	1813883a 	mov	r9,r3
     a90:	019999b4 	movhi	r6,26214
     a94:	31999984 	addi	r6,r6,26214
     a98:	01cff9b4 	movhi	r7,16358
     a9c:	39d99984 	addi	r7,r7,26214
     aa0:	4009883a 	mov	r4,r8
     aa4:	480b883a 	mov	r5,r9
     aa8:	0003ad40 	call	3ad4 <__muldf3>
     aac:	1009883a 	mov	r4,r2
     ab0:	180b883a 	mov	r5,r3
     ab4:	2005883a 	mov	r2,r4
     ab8:	2807883a 	mov	r3,r5
     abc:	100d883a 	mov	r6,r2
     ac0:	180f883a 	mov	r7,r3
     ac4:	8009883a 	mov	r4,r16
     ac8:	880b883a 	mov	r5,r17
     acc:	00032280 	call	3228 <__adddf3>
     ad0:	1009883a 	mov	r4,r2
     ad4:	180b883a 	mov	r5,r3
     ad8:	2005883a 	mov	r2,r4
     adc:	2807883a 	mov	r3,r5
     ae0:	1009883a 	mov	r4,r2
     ae4:	180b883a 	mov	r5,r3
     ae8:	00042fc0 	call	42fc <__truncdfsf2>
     aec:	1007883a 	mov	r3,r2
     af0:	d0e70315 	stw	r3,-25588(gp)
			play_note(timer_note_period[rand() % 37], tempo / 4);
     af4:	00045200 	call	4520 <rand>
     af8:	00c00944 	movi	r3,37
     afc:	10c7283a 	div	r3,r2,r3
     b00:	18c00964 	muli	r3,r3,37
     b04:	10c7c83a 	sub	r3,r2,r3
     b08:	00800074 	movhi	r2,1
     b0c:	10b43c04 	addi	r2,r2,-12048
     b10:	18c7883a 	add	r3,r3,r3
     b14:	18c7883a 	add	r3,r3,r3
     b18:	10c5883a 	add	r2,r2,r3
     b1c:	14000017 	ldw	r16,0(r2)
     b20:	d0a00417 	ldw	r2,-32752(gp)
     b24:	01502034 	movhi	r5,16512
     b28:	1009883a 	mov	r4,r2
     b2c:	00021f00 	call	21f0 <__divsf3>
     b30:	1007883a 	mov	r3,r2
     b34:	1805883a 	mov	r2,r3
     b38:	100b883a 	mov	r5,r2
     b3c:	8009883a 	mov	r4,r16
     b40:	0001c800 	call	1c80 <play_note>
     b44:	00005e06 	br	cc0 <updateBallPos+0x354>
		}
	} else if (xb1 >= WIDTH-paddleW-1)
     b48:	d0a00017 	ldw	r2,-32768(gp)
     b4c:	00c04fc4 	movi	r3,319
     b50:	1885c83a 	sub	r2,r3,r2
     b54:	1009883a 	mov	r4,r2
     b58:	00031040 	call	3104 <__floatsisf>
     b5c:	1007883a 	mov	r3,r2
     b60:	d0a6fe17 	ldw	r2,-25608(gp)
     b64:	100b883a 	mov	r5,r2
     b68:	1809883a 	mov	r4,r3
     b6c:	00026ec0 	call	26ec <__lesf2>
     b70:	00805316 	blt	zero,r2,cc0 <updateBallPos+0x354>
	{
		if (!inPaddleBound(yb1, yr1))
     b74:	d0a70817 	ldw	r2,-25568(gp)
     b78:	d0e71017 	ldw	r3,-25536(gp)
     b7c:	180b883a 	mov	r5,r3
     b80:	1009883a 	mov	r4,r2
     b84:	000069c0 	call	69c <inPaddleBound>
     b88:	1080005c 	xori	r2,r2,1
     b8c:	10803fcc 	andi	r2,r2,255
     b90:	10000526 	beq	r2,zero,ba8 <updateBallPos+0x23c>
		{
			scoreL += 1;
     b94:	d0a6f817 	ldw	r2,-25632(gp)
     b98:	10800044 	addi	r2,r2,1
     b9c:	d0a6f815 	stw	r2,-25632(gp)
			resetObjects();
     ba0:	00007580 	call	758 <resetObjects>
     ba4:	00004606 	br	cc0 <updateBallPos+0x354>
		}
		else
		{
			xb1 = 2*(WIDTH-paddleW-1) - xb1;
     ba8:	d0a00017 	ldw	r2,-32768(gp)
     bac:	00c04fc4 	movi	r3,319
     bb0:	1885c83a 	sub	r2,r3,r2
     bb4:	1085883a 	add	r2,r2,r2
     bb8:	1009883a 	mov	r4,r2
     bbc:	00031040 	call	3104 <__floatsisf>
     bc0:	1007883a 	mov	r3,r2
     bc4:	d0a6fe17 	ldw	r2,-25608(gp)
     bc8:	100b883a 	mov	r5,r2
     bcc:	1809883a 	mov	r4,r3
     bd0:	0002bb00 	call	2bb0 <__subsf3>
     bd4:	1007883a 	mov	r3,r2
     bd8:	1805883a 	mov	r2,r3
     bdc:	d0a6fe15 	stw	r2,-25608(gp)
			vbx *= -1;
     be0:	d0a6fc17 	ldw	r2,-25616(gp)
     be4:	10a0003c 	xorhi	r2,r2,32768
     be8:	d0a6fc15 	stw	r2,-25616(gp)
			vby += 0.5*vry;
     bec:	d0a70317 	ldw	r2,-25588(gp)
     bf0:	1009883a 	mov	r4,r2
     bf4:	00041ec0 	call	41ec <__extendsfdf2>
     bf8:	1021883a 	mov	r16,r2
     bfc:	1823883a 	mov	r17,r3
     c00:	d0a70417 	ldw	r2,-25584(gp)
     c04:	1009883a 	mov	r4,r2
     c08:	00041ec0 	call	41ec <__extendsfdf2>
     c0c:	1011883a 	mov	r8,r2
     c10:	1813883a 	mov	r9,r3
     c14:	000d883a 	mov	r6,zero
     c18:	01cff834 	movhi	r7,16352
     c1c:	4009883a 	mov	r4,r8
     c20:	480b883a 	mov	r5,r9
     c24:	0003ad40 	call	3ad4 <__muldf3>
     c28:	1009883a 	mov	r4,r2
     c2c:	180b883a 	mov	r5,r3
     c30:	2005883a 	mov	r2,r4
     c34:	2807883a 	mov	r3,r5
     c38:	100d883a 	mov	r6,r2
     c3c:	180f883a 	mov	r7,r3
     c40:	8009883a 	mov	r4,r16
     c44:	880b883a 	mov	r5,r17
     c48:	00032280 	call	3228 <__adddf3>
     c4c:	1009883a 	mov	r4,r2
     c50:	180b883a 	mov	r5,r3
     c54:	2005883a 	mov	r2,r4
     c58:	2807883a 	mov	r3,r5
     c5c:	1009883a 	mov	r4,r2
     c60:	180b883a 	mov	r5,r3
     c64:	00042fc0 	call	42fc <__truncdfsf2>
     c68:	1007883a 	mov	r3,r2
     c6c:	d0e70315 	stw	r3,-25588(gp)
			play_note(timer_note_period[rand() % 37], tempo / 4);
     c70:	00045200 	call	4520 <rand>
     c74:	00c00944 	movi	r3,37
     c78:	10c7283a 	div	r3,r2,r3
     c7c:	18c00964 	muli	r3,r3,37
     c80:	10c7c83a 	sub	r3,r2,r3
     c84:	00800074 	movhi	r2,1
     c88:	10b43c04 	addi	r2,r2,-12048
     c8c:	18c7883a 	add	r3,r3,r3
     c90:	18c7883a 	add	r3,r3,r3
     c94:	10c5883a 	add	r2,r2,r3
     c98:	14000017 	ldw	r16,0(r2)
     c9c:	d0a00417 	ldw	r2,-32752(gp)
     ca0:	01502034 	movhi	r5,16512
     ca4:	1009883a 	mov	r4,r2
     ca8:	00021f00 	call	21f0 <__divsf3>
     cac:	1007883a 	mov	r3,r2
     cb0:	1805883a 	mov	r2,r3
     cb4:	100b883a 	mov	r5,r2
     cb8:	8009883a 	mov	r4,r16
     cbc:	0001c800 	call	1c80 <play_note>
		}
	}
	if (yb1 <= 0)
     cc0:	d0a70817 	ldw	r2,-25568(gp)
     cc4:	000b883a 	mov	r5,zero
     cc8:	1009883a 	mov	r4,r2
     ccc:	00026ec0 	call	26ec <__lesf2>
     cd0:	00801b16 	blt	zero,r2,d40 <updateBallPos+0x3d4>
	{
		yb1 = -yb1;
     cd4:	d0a70817 	ldw	r2,-25568(gp)
     cd8:	10a0003c 	xorhi	r2,r2,32768
     cdc:	d0a70815 	stw	r2,-25568(gp)
		vby *= -1;
     ce0:	d0a70317 	ldw	r2,-25588(gp)
     ce4:	10a0003c 	xorhi	r2,r2,32768
     ce8:	d0a70315 	stw	r2,-25588(gp)
		play_note(timer_note_period[rand() % 37], tempo / 4);
     cec:	00045200 	call	4520 <rand>
     cf0:	00c00944 	movi	r3,37
     cf4:	10c7283a 	div	r3,r2,r3
     cf8:	18c00964 	muli	r3,r3,37
     cfc:	10c7c83a 	sub	r3,r2,r3
     d00:	00800074 	movhi	r2,1
     d04:	10b43c04 	addi	r2,r2,-12048
     d08:	18c7883a 	add	r3,r3,r3
     d0c:	18c7883a 	add	r3,r3,r3
     d10:	10c5883a 	add	r2,r2,r3
     d14:	14000017 	ldw	r16,0(r2)
     d18:	d0a00417 	ldw	r2,-32752(gp)
     d1c:	01502034 	movhi	r5,16512
     d20:	1009883a 	mov	r4,r2
     d24:	00021f00 	call	21f0 <__divsf3>
     d28:	1007883a 	mov	r3,r2
     d2c:	1805883a 	mov	r2,r3
     d30:	100b883a 	mov	r5,r2
     d34:	8009883a 	mov	r4,r16
     d38:	0001c800 	call	1c80 <play_note>
	{
		yb1 = 2*(HEIGHT-1) - yb1;
		vby *= -1;
		play_note(timer_note_period[rand() % 37], tempo / 4);
	}
}
     d3c:	00002406 	br	dd0 <updateBallPos+0x464>
	if (yb1 <= 0)
	{
		yb1 = -yb1;
		vby *= -1;
		play_note(timer_note_period[rand() % 37], tempo / 4);
	} else if (yb1 >= HEIGHT-1)
     d40:	d0a70817 	ldw	r2,-25568(gp)
     d44:	0150dbf4 	movhi	r5,17263
     d48:	1009883a 	mov	r4,r2
     d4c:	00026300 	call	2630 <__gesf2>
     d50:	1000010e 	bge	r2,zero,d58 <updateBallPos+0x3ec>
	{
		yb1 = 2*(HEIGHT-1) - yb1;
		vby *= -1;
		play_note(timer_note_period[rand() % 37], tempo / 4);
	}
}
     d54:	00001e06 	br	dd0 <updateBallPos+0x464>
		yb1 = -yb1;
		vby *= -1;
		play_note(timer_note_period[rand() % 37], tempo / 4);
	} else if (yb1 >= HEIGHT-1)
	{
		yb1 = 2*(HEIGHT-1) - yb1;
     d58:	d0a70817 	ldw	r2,-25568(gp)
     d5c:	100b883a 	mov	r5,r2
     d60:	0110fbf4 	movhi	r4,17391
     d64:	0002bb00 	call	2bb0 <__subsf3>
     d68:	1007883a 	mov	r3,r2
     d6c:	1805883a 	mov	r2,r3
     d70:	d0a70815 	stw	r2,-25568(gp)
		vby *= -1;
     d74:	d0a70317 	ldw	r2,-25588(gp)
     d78:	10a0003c 	xorhi	r2,r2,32768
     d7c:	d0a70315 	stw	r2,-25588(gp)
		play_note(timer_note_period[rand() % 37], tempo / 4);
     d80:	00045200 	call	4520 <rand>
     d84:	00c00944 	movi	r3,37
     d88:	10c7283a 	div	r3,r2,r3
     d8c:	18c00964 	muli	r3,r3,37
     d90:	10c7c83a 	sub	r3,r2,r3
     d94:	00800074 	movhi	r2,1
     d98:	10b43c04 	addi	r2,r2,-12048
     d9c:	18c7883a 	add	r3,r3,r3
     da0:	18c7883a 	add	r3,r3,r3
     da4:	10c5883a 	add	r2,r2,r3
     da8:	14000017 	ldw	r16,0(r2)
     dac:	d0a00417 	ldw	r2,-32752(gp)
     db0:	01502034 	movhi	r5,16512
     db4:	1009883a 	mov	r4,r2
     db8:	00021f00 	call	21f0 <__divsf3>
     dbc:	1007883a 	mov	r3,r2
     dc0:	1805883a 	mov	r2,r3
     dc4:	100b883a 	mov	r5,r2
     dc8:	8009883a 	mov	r4,r16
     dcc:	0001c800 	call	1c80 <play_note>
	}
}
     dd0:	0001883a 	nop
     dd4:	e6fffe04 	addi	sp,fp,-8
     dd8:	dfc00317 	ldw	ra,12(sp)
     ddc:	df000217 	ldw	fp,8(sp)
     de0:	dc400117 	ldw	r17,4(sp)
     de4:	dc000017 	ldw	r16,0(sp)
     de8:	dec00404 	addi	sp,sp,16
     dec:	f800283a 	ret

00000df0 <updatePaddlePos>:

void updatePaddlePos()
{
     df0:	defffe04 	addi	sp,sp,-8
     df4:	dfc00115 	stw	ra,4(sp)
     df8:	df000015 	stw	fp,0(sp)
     dfc:	d839883a 	mov	fp,sp
	xl0 = xl1;
     e00:	d0a6ff17 	ldw	r2,-25604(gp)
     e04:	d0a70615 	stw	r2,-25576(gp)
	yl0 = yl1;
     e08:	d0a70b17 	ldw	r2,-25556(gp)
     e0c:	d0a70515 	stw	r2,-25580(gp)
	xr0 = xr1;
     e10:	d0a70a17 	ldw	r2,-25560(gp)
     e14:	d0a70115 	stw	r2,-25596(gp)
	yr0 = yr1;
     e18:	d0a71017 	ldw	r2,-25536(gp)
     e1c:	d0a70e15 	stw	r2,-25544(gp)
	if (IORD_ALTERA_AVALON_PIO_DATA(JOYSTICK_STICK_1_BASE) & 0x1)
     e20:	00820834 	movhi	r2,2080
     e24:	10854004 	addi	r2,r2,5376
     e28:	10800037 	ldwio	r2,0(r2)
     e2c:	1080004c 	andi	r2,r2,1
     e30:	10000426 	beq	r2,zero,e44 <updatePaddlePos+0x54>
		vry = -paddleSpeed;
     e34:	d0a00217 	ldw	r2,-32760(gp)
     e38:	10a0003c 	xorhi	r2,r2,32768
     e3c:	d0a70415 	stw	r2,-25584(gp)
     e40:	00000906 	br	e68 <updatePaddlePos+0x78>
	else if (IORD_ALTERA_AVALON_PIO_DATA(JOYSTICK_STICK_1_BASE) & 0x2)
     e44:	00820834 	movhi	r2,2080
     e48:	10854004 	addi	r2,r2,5376
     e4c:	10800037 	ldwio	r2,0(r2)
     e50:	1080008c 	andi	r2,r2,2
     e54:	10000326 	beq	r2,zero,e64 <updatePaddlePos+0x74>
		vry = paddleSpeed;
     e58:	d0a00217 	ldw	r2,-32760(gp)
     e5c:	d0a70415 	stw	r2,-25584(gp)
     e60:	00000106 	br	e68 <updatePaddlePos+0x78>
	else
		vry = 0;
     e64:	d0270415 	stw	zero,-25584(gp)
	if (IORD_ALTERA_AVALON_PIO_DATA(JOYSTICK_STICK_2_BASE) & 0x1)
     e68:	00820834 	movhi	r2,2080
     e6c:	10853c04 	addi	r2,r2,5360
     e70:	10800037 	ldwio	r2,0(r2)
     e74:	1080004c 	andi	r2,r2,1
     e78:	10000426 	beq	r2,zero,e8c <updatePaddlePos+0x9c>
		vly = -paddleSpeed;
     e7c:	d0a00217 	ldw	r2,-32760(gp)
     e80:	10a0003c 	xorhi	r2,r2,32768
     e84:	d0a70f15 	stw	r2,-25540(gp)
     e88:	00000906 	br	eb0 <updatePaddlePos+0xc0>
	else if (IORD_ALTERA_AVALON_PIO_DATA(JOYSTICK_STICK_2_BASE) & 0x2)
     e8c:	00820834 	movhi	r2,2080
     e90:	10853c04 	addi	r2,r2,5360
     e94:	10800037 	ldwio	r2,0(r2)
     e98:	1080008c 	andi	r2,r2,2
     e9c:	10000326 	beq	r2,zero,eac <updatePaddlePos+0xbc>
		vly = paddleSpeed;
     ea0:	d0a00217 	ldw	r2,-32760(gp)
     ea4:	d0a70f15 	stw	r2,-25540(gp)
     ea8:	00000106 	br	eb0 <updatePaddlePos+0xc0>
	else
		vly = 0;
     eac:	d0270f15 	stw	zero,-25540(gp)
	yl1 += vly;
     eb0:	d0a70b17 	ldw	r2,-25556(gp)
     eb4:	d0e70f17 	ldw	r3,-25540(gp)
     eb8:	180b883a 	mov	r5,r3
     ebc:	1009883a 	mov	r4,r2
     ec0:	0001d280 	call	1d28 <__addsf3>
     ec4:	1007883a 	mov	r3,r2
     ec8:	1805883a 	mov	r2,r3
     ecc:	d0a70b15 	stw	r2,-25556(gp)
	if (yl1 < paddleH/2) yl1 = paddleH/2;
     ed0:	d0a00117 	ldw	r2,-32764(gp)
     ed4:	1006d7fa 	srli	r3,r2,31
     ed8:	1885883a 	add	r2,r3,r2
     edc:	1005d07a 	srai	r2,r2,1
     ee0:	1009883a 	mov	r4,r2
     ee4:	00031040 	call	3104 <__floatsisf>
     ee8:	1007883a 	mov	r3,r2
     eec:	d0a70b17 	ldw	r2,-25556(gp)
     ef0:	100b883a 	mov	r5,r2
     ef4:	1809883a 	mov	r4,r3
     ef8:	00026300 	call	2630 <__gesf2>
     efc:	0080090e 	bge	zero,r2,f24 <updatePaddlePos+0x134>
     f00:	d0a00117 	ldw	r2,-32764(gp)
     f04:	1006d7fa 	srli	r3,r2,31
     f08:	1885883a 	add	r2,r3,r2
     f0c:	1005d07a 	srai	r2,r2,1
     f10:	1009883a 	mov	r4,r2
     f14:	00031040 	call	3104 <__floatsisf>
     f18:	1007883a 	mov	r3,r2
     f1c:	d0e70b15 	stw	r3,-25556(gp)
     f20:	00001a06 	br	f8c <updatePaddlePos+0x19c>
	else if (yl1 > HEIGHT-1-paddleH/2) yl1 = HEIGHT-1-paddleH/2;
     f24:	d0a00117 	ldw	r2,-32764(gp)
     f28:	1006d7fa 	srli	r3,r2,31
     f2c:	1885883a 	add	r2,r3,r2
     f30:	1005d07a 	srai	r2,r2,1
     f34:	1007883a 	mov	r3,r2
     f38:	00803bc4 	movi	r2,239
     f3c:	10c5c83a 	sub	r2,r2,r3
     f40:	1009883a 	mov	r4,r2
     f44:	00031040 	call	3104 <__floatsisf>
     f48:	1007883a 	mov	r3,r2
     f4c:	d0a70b17 	ldw	r2,-25556(gp)
     f50:	100b883a 	mov	r5,r2
     f54:	1809883a 	mov	r4,r3
     f58:	00026ec0 	call	26ec <__lesf2>
     f5c:	10000b0e 	bge	r2,zero,f8c <updatePaddlePos+0x19c>
     f60:	d0a00117 	ldw	r2,-32764(gp)
     f64:	1006d7fa 	srli	r3,r2,31
     f68:	1885883a 	add	r2,r3,r2
     f6c:	1005d07a 	srai	r2,r2,1
     f70:	1007883a 	mov	r3,r2
     f74:	00803bc4 	movi	r2,239
     f78:	10c5c83a 	sub	r2,r2,r3
     f7c:	1009883a 	mov	r4,r2
     f80:	00031040 	call	3104 <__floatsisf>
     f84:	1007883a 	mov	r3,r2
     f88:	d0e70b15 	stw	r3,-25556(gp)
	yr1 += vry;
     f8c:	d0a71017 	ldw	r2,-25536(gp)
     f90:	d0e70417 	ldw	r3,-25584(gp)
     f94:	180b883a 	mov	r5,r3
     f98:	1009883a 	mov	r4,r2
     f9c:	0001d280 	call	1d28 <__addsf3>
     fa0:	1007883a 	mov	r3,r2
     fa4:	1805883a 	mov	r2,r3
     fa8:	d0a71015 	stw	r2,-25536(gp)
	if (yr1 < paddleH/2) yr1 = paddleH/2;
     fac:	d0a00117 	ldw	r2,-32764(gp)
     fb0:	1006d7fa 	srli	r3,r2,31
     fb4:	1885883a 	add	r2,r3,r2
     fb8:	1005d07a 	srai	r2,r2,1
     fbc:	1009883a 	mov	r4,r2
     fc0:	00031040 	call	3104 <__floatsisf>
     fc4:	1007883a 	mov	r3,r2
     fc8:	d0a71017 	ldw	r2,-25536(gp)
     fcc:	100b883a 	mov	r5,r2
     fd0:	1809883a 	mov	r4,r3
     fd4:	00026300 	call	2630 <__gesf2>
     fd8:	0080090e 	bge	zero,r2,1000 <updatePaddlePos+0x210>
     fdc:	d0a00117 	ldw	r2,-32764(gp)
     fe0:	1006d7fa 	srli	r3,r2,31
     fe4:	1885883a 	add	r2,r3,r2
     fe8:	1005d07a 	srai	r2,r2,1
     fec:	1009883a 	mov	r4,r2
     ff0:	00031040 	call	3104 <__floatsisf>
     ff4:	1007883a 	mov	r3,r2
     ff8:	d0e71015 	stw	r3,-25536(gp)
	else if (yr1 > HEIGHT-1-paddleH/2) yr1 = HEIGHT-1-paddleH/2;
}
     ffc:	00001b06 	br	106c <updatePaddlePos+0x27c>
	yl1 += vly;
	if (yl1 < paddleH/2) yl1 = paddleH/2;
	else if (yl1 > HEIGHT-1-paddleH/2) yl1 = HEIGHT-1-paddleH/2;
	yr1 += vry;
	if (yr1 < paddleH/2) yr1 = paddleH/2;
	else if (yr1 > HEIGHT-1-paddleH/2) yr1 = HEIGHT-1-paddleH/2;
    1000:	d0a00117 	ldw	r2,-32764(gp)
    1004:	1006d7fa 	srli	r3,r2,31
    1008:	1885883a 	add	r2,r3,r2
    100c:	1005d07a 	srai	r2,r2,1
    1010:	1007883a 	mov	r3,r2
    1014:	00803bc4 	movi	r2,239
    1018:	10c5c83a 	sub	r2,r2,r3
    101c:	1009883a 	mov	r4,r2
    1020:	00031040 	call	3104 <__floatsisf>
    1024:	1007883a 	mov	r3,r2
    1028:	d0a71017 	ldw	r2,-25536(gp)
    102c:	100b883a 	mov	r5,r2
    1030:	1809883a 	mov	r4,r3
    1034:	00026ec0 	call	26ec <__lesf2>
    1038:	10000116 	blt	r2,zero,1040 <updatePaddlePos+0x250>
}
    103c:	00000b06 	br	106c <updatePaddlePos+0x27c>
	yl1 += vly;
	if (yl1 < paddleH/2) yl1 = paddleH/2;
	else if (yl1 > HEIGHT-1-paddleH/2) yl1 = HEIGHT-1-paddleH/2;
	yr1 += vry;
	if (yr1 < paddleH/2) yr1 = paddleH/2;
	else if (yr1 > HEIGHT-1-paddleH/2) yr1 = HEIGHT-1-paddleH/2;
    1040:	d0a00117 	ldw	r2,-32764(gp)
    1044:	1006d7fa 	srli	r3,r2,31
    1048:	1885883a 	add	r2,r3,r2
    104c:	1005d07a 	srai	r2,r2,1
    1050:	1007883a 	mov	r3,r2
    1054:	00803bc4 	movi	r2,239
    1058:	10c5c83a 	sub	r2,r2,r3
    105c:	1009883a 	mov	r4,r2
    1060:	00031040 	call	3104 <__floatsisf>
    1064:	1007883a 	mov	r3,r2
    1068:	d0e71015 	stw	r3,-25536(gp)
}
    106c:	0001883a 	nop
    1070:	e037883a 	mov	sp,fp
    1074:	dfc00117 	ldw	ra,4(sp)
    1078:	df000017 	ldw	fp,0(sp)
    107c:	dec00204 	addi	sp,sp,8
    1080:	f800283a 	ret

00001084 <draw>:

void draw()
{
    1084:	defffe04 	addi	sp,sp,-8
    1088:	dfc00115 	stw	ra,4(sp)
    108c:	df000015 	stw	fp,0(sp)
    1090:	d839883a 	mov	fp,sp
	updateBallPos();
    1094:	000096c0 	call	96c <updateBallPos>
	updatePaddlePos();
    1098:	0000df00 	call	df0 <updatePaddlePos>
	drawBall();
    109c:	00010d80 	call	10d8 <drawBall>
	drawPaddles();
    10a0:	00013680 	call	1368 <drawPaddles>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DISPLAYS_BASE, (scoreL << 16) + scoreR);
    10a4:	d0a6f817 	ldw	r2,-25632(gp)
    10a8:	1006943a 	slli	r3,r2,16
    10ac:	d0a6f917 	ldw	r2,-25628(gp)
    10b0:	1887883a 	add	r3,r3,r2
    10b4:	00820834 	movhi	r2,2080
    10b8:	10854c04 	addi	r2,r2,5424
    10bc:	10c00035 	stwio	r3,0(r2)
}
    10c0:	0001883a 	nop
    10c4:	e037883a 	mov	sp,fp
    10c8:	dfc00117 	ldw	ra,4(sp)
    10cc:	df000017 	ldw	fp,0(sp)
    10d0:	dec00204 	addi	sp,sp,8
    10d4:	f800283a 	ret

000010d8 <drawBall>:

void drawBall()
{
    10d8:	defff704 	addi	sp,sp,-36
    10dc:	dfc00815 	stw	ra,32(sp)
    10e0:	df000715 	stw	fp,28(sp)
    10e4:	dcc00615 	stw	r19,24(sp)
    10e8:	dc800515 	stw	r18,20(sp)
    10ec:	dc400415 	stw	r17,16(sp)
    10f0:	dc000315 	stw	r16,12(sp)
    10f4:	df000704 	addi	fp,sp,28
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) (xb0-ballSize/2), (int) (yb0-ballSize/2), (int) (xb0+ballSize/2), (int) (yb0+ballSize/2), COLOR_BLACK, 0);
    10f8:	d4270c17 	ldw	r16,-25552(gp)
    10fc:	d4670017 	ldw	r17,-25600(gp)
    1100:	d0a00317 	ldw	r2,-32756(gp)
    1104:	1006d7fa 	srli	r3,r2,31
    1108:	1885883a 	add	r2,r3,r2
    110c:	1005d07a 	srai	r2,r2,1
    1110:	1009883a 	mov	r4,r2
    1114:	00031040 	call	3104 <__floatsisf>
    1118:	1007883a 	mov	r3,r2
    111c:	180b883a 	mov	r5,r3
    1120:	8809883a 	mov	r4,r17
    1124:	0002bb00 	call	2bb0 <__subsf3>
    1128:	1007883a 	mov	r3,r2
    112c:	1805883a 	mov	r2,r3
    1130:	1009883a 	mov	r4,r2
    1134:	00030940 	call	3094 <__fixsfsi>
    1138:	1025883a 	mov	r18,r2
    113c:	d4670217 	ldw	r17,-25592(gp)
    1140:	d0a00317 	ldw	r2,-32756(gp)
    1144:	1006d7fa 	srli	r3,r2,31
    1148:	1885883a 	add	r2,r3,r2
    114c:	1005d07a 	srai	r2,r2,1
    1150:	1009883a 	mov	r4,r2
    1154:	00031040 	call	3104 <__floatsisf>
    1158:	1007883a 	mov	r3,r2
    115c:	180b883a 	mov	r5,r3
    1160:	8809883a 	mov	r4,r17
    1164:	0002bb00 	call	2bb0 <__subsf3>
    1168:	1007883a 	mov	r3,r2
    116c:	1805883a 	mov	r2,r3
    1170:	1009883a 	mov	r4,r2
    1174:	00030940 	call	3094 <__fixsfsi>
    1178:	1023883a 	mov	r17,r2
    117c:	d0a00317 	ldw	r2,-32756(gp)
    1180:	1006d7fa 	srli	r3,r2,31
    1184:	1885883a 	add	r2,r3,r2
    1188:	1005d07a 	srai	r2,r2,1
    118c:	1009883a 	mov	r4,r2
    1190:	00031040 	call	3104 <__floatsisf>
    1194:	1007883a 	mov	r3,r2
    1198:	d0a70017 	ldw	r2,-25600(gp)
    119c:	100b883a 	mov	r5,r2
    11a0:	1809883a 	mov	r4,r3
    11a4:	0001d280 	call	1d28 <__addsf3>
    11a8:	1007883a 	mov	r3,r2
    11ac:	1805883a 	mov	r2,r3
    11b0:	1009883a 	mov	r4,r2
    11b4:	00030940 	call	3094 <__fixsfsi>
    11b8:	1027883a 	mov	r19,r2
    11bc:	d0a00317 	ldw	r2,-32756(gp)
    11c0:	1006d7fa 	srli	r3,r2,31
    11c4:	1885883a 	add	r2,r3,r2
    11c8:	1005d07a 	srai	r2,r2,1
    11cc:	1009883a 	mov	r4,r2
    11d0:	00031040 	call	3104 <__floatsisf>
    11d4:	1007883a 	mov	r3,r2
    11d8:	d0a70217 	ldw	r2,-25592(gp)
    11dc:	100b883a 	mov	r5,r2
    11e0:	1809883a 	mov	r4,r3
    11e4:	0001d280 	call	1d28 <__addsf3>
    11e8:	1007883a 	mov	r3,r2
    11ec:	1805883a 	mov	r2,r3
    11f0:	1009883a 	mov	r4,r2
    11f4:	00030940 	call	3094 <__fixsfsi>
    11f8:	d8000215 	stw	zero,8(sp)
    11fc:	d8000115 	stw	zero,4(sp)
    1200:	d8800015 	stw	r2,0(sp)
    1204:	980f883a 	mov	r7,r19
    1208:	880d883a 	mov	r6,r17
    120c:	900b883a 	mov	r5,r18
    1210:	8009883a 	mov	r4,r16
    1214:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) (xb1-ballSize/2), (int) (yb1-ballSize/2), (int) (xb1+ballSize/2), (int) (yb1+ballSize/2), COLOR_WHITE, 0);
    1218:	d4270c17 	ldw	r16,-25552(gp)
    121c:	d466fe17 	ldw	r17,-25608(gp)
    1220:	d0a00317 	ldw	r2,-32756(gp)
    1224:	1006d7fa 	srli	r3,r2,31
    1228:	1885883a 	add	r2,r3,r2
    122c:	1005d07a 	srai	r2,r2,1
    1230:	1009883a 	mov	r4,r2
    1234:	00031040 	call	3104 <__floatsisf>
    1238:	1007883a 	mov	r3,r2
    123c:	180b883a 	mov	r5,r3
    1240:	8809883a 	mov	r4,r17
    1244:	0002bb00 	call	2bb0 <__subsf3>
    1248:	1007883a 	mov	r3,r2
    124c:	1805883a 	mov	r2,r3
    1250:	1009883a 	mov	r4,r2
    1254:	00030940 	call	3094 <__fixsfsi>
    1258:	1025883a 	mov	r18,r2
    125c:	d4670817 	ldw	r17,-25568(gp)
    1260:	d0a00317 	ldw	r2,-32756(gp)
    1264:	1006d7fa 	srli	r3,r2,31
    1268:	1885883a 	add	r2,r3,r2
    126c:	1005d07a 	srai	r2,r2,1
    1270:	1009883a 	mov	r4,r2
    1274:	00031040 	call	3104 <__floatsisf>
    1278:	1007883a 	mov	r3,r2
    127c:	180b883a 	mov	r5,r3
    1280:	8809883a 	mov	r4,r17
    1284:	0002bb00 	call	2bb0 <__subsf3>
    1288:	1007883a 	mov	r3,r2
    128c:	1805883a 	mov	r2,r3
    1290:	1009883a 	mov	r4,r2
    1294:	00030940 	call	3094 <__fixsfsi>
    1298:	1023883a 	mov	r17,r2
    129c:	d0a00317 	ldw	r2,-32756(gp)
    12a0:	1006d7fa 	srli	r3,r2,31
    12a4:	1885883a 	add	r2,r3,r2
    12a8:	1005d07a 	srai	r2,r2,1
    12ac:	1009883a 	mov	r4,r2
    12b0:	00031040 	call	3104 <__floatsisf>
    12b4:	1007883a 	mov	r3,r2
    12b8:	d0a6fe17 	ldw	r2,-25608(gp)
    12bc:	100b883a 	mov	r5,r2
    12c0:	1809883a 	mov	r4,r3
    12c4:	0001d280 	call	1d28 <__addsf3>
    12c8:	1007883a 	mov	r3,r2
    12cc:	1805883a 	mov	r2,r3
    12d0:	1009883a 	mov	r4,r2
    12d4:	00030940 	call	3094 <__fixsfsi>
    12d8:	1027883a 	mov	r19,r2
    12dc:	d0a00317 	ldw	r2,-32756(gp)
    12e0:	1006d7fa 	srli	r3,r2,31
    12e4:	1885883a 	add	r2,r3,r2
    12e8:	1005d07a 	srai	r2,r2,1
    12ec:	1009883a 	mov	r4,r2
    12f0:	00031040 	call	3104 <__floatsisf>
    12f4:	1007883a 	mov	r3,r2
    12f8:	d0a70817 	ldw	r2,-25568(gp)
    12fc:	100b883a 	mov	r5,r2
    1300:	1809883a 	mov	r4,r3
    1304:	0001d280 	call	1d28 <__addsf3>
    1308:	1007883a 	mov	r3,r2
    130c:	1805883a 	mov	r2,r3
    1310:	1009883a 	mov	r4,r2
    1314:	00030940 	call	3094 <__fixsfsi>
    1318:	1007883a 	mov	r3,r2
    131c:	d8000215 	stw	zero,8(sp)
    1320:	00bfffd4 	movui	r2,65535
    1324:	d8800115 	stw	r2,4(sp)
    1328:	d8c00015 	stw	r3,0(sp)
    132c:	980f883a 	mov	r7,r19
    1330:	880d883a 	mov	r6,r17
    1334:	900b883a 	mov	r5,r18
    1338:	8009883a 	mov	r4,r16
    133c:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
}
    1340:	0001883a 	nop
    1344:	e6fffc04 	addi	sp,fp,-16
    1348:	dfc00517 	ldw	ra,20(sp)
    134c:	df000417 	ldw	fp,16(sp)
    1350:	dcc00317 	ldw	r19,12(sp)
    1354:	dc800217 	ldw	r18,8(sp)
    1358:	dc400117 	ldw	r17,4(sp)
    135c:	dc000017 	ldw	r16,0(sp)
    1360:	dec00604 	addi	sp,sp,24
    1364:	f800283a 	ret

00001368 <drawPaddles>:

void drawPaddles()
{
    1368:	defff704 	addi	sp,sp,-36
    136c:	dfc00815 	stw	ra,32(sp)
    1370:	df000715 	stw	fp,28(sp)
    1374:	dcc00615 	stw	r19,24(sp)
    1378:	dc800515 	stw	r18,20(sp)
    137c:	dc400415 	stw	r17,16(sp)
    1380:	dc000315 	stw	r16,12(sp)
    1384:	df000704 	addi	fp,sp,28
	if (yl1 > yl0)
    1388:	d0a70b17 	ldw	r2,-25556(gp)
    138c:	d0e70517 	ldw	r3,-25580(gp)
    1390:	180b883a 	mov	r5,r3
    1394:	1009883a 	mov	r4,r2
    1398:	00026300 	call	2630 <__gesf2>
    139c:	00805c0e 	bge	zero,r2,1510 <drawPaddles+0x1a8>
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xl0-paddleW/2, (int) yl0-paddleH/2, (int) xl0+paddleW/2, (int) yl1-paddleH/2, COLOR_BLACK, 0);
    13a0:	d4270c17 	ldw	r16,-25552(gp)
    13a4:	d0a70617 	ldw	r2,-25576(gp)
    13a8:	1009883a 	mov	r4,r2
    13ac:	00030940 	call	3094 <__fixsfsi>
    13b0:	1009883a 	mov	r4,r2
    13b4:	d0a00017 	ldw	r2,-32768(gp)
    13b8:	1006d7fa 	srli	r3,r2,31
    13bc:	1885883a 	add	r2,r3,r2
    13c0:	1005d07a 	srai	r2,r2,1
    13c4:	20a3c83a 	sub	r17,r4,r2
    13c8:	d0a70517 	ldw	r2,-25580(gp)
    13cc:	1009883a 	mov	r4,r2
    13d0:	00030940 	call	3094 <__fixsfsi>
    13d4:	1009883a 	mov	r4,r2
    13d8:	d0a00117 	ldw	r2,-32764(gp)
    13dc:	1006d7fa 	srli	r3,r2,31
    13e0:	1885883a 	add	r2,r3,r2
    13e4:	1005d07a 	srai	r2,r2,1
    13e8:	20a5c83a 	sub	r18,r4,r2
    13ec:	d0a70617 	ldw	r2,-25576(gp)
    13f0:	1009883a 	mov	r4,r2
    13f4:	00030940 	call	3094 <__fixsfsi>
    13f8:	1009883a 	mov	r4,r2
    13fc:	d0a00017 	ldw	r2,-32768(gp)
    1400:	1006d7fa 	srli	r3,r2,31
    1404:	1885883a 	add	r2,r3,r2
    1408:	1005d07a 	srai	r2,r2,1
    140c:	20a7883a 	add	r19,r4,r2
    1410:	d0a70b17 	ldw	r2,-25556(gp)
    1414:	1009883a 	mov	r4,r2
    1418:	00030940 	call	3094 <__fixsfsi>
    141c:	1009883a 	mov	r4,r2
    1420:	d0a00117 	ldw	r2,-32764(gp)
    1424:	1006d7fa 	srli	r3,r2,31
    1428:	1885883a 	add	r2,r3,r2
    142c:	1005d07a 	srai	r2,r2,1
    1430:	2085c83a 	sub	r2,r4,r2
    1434:	d8000215 	stw	zero,8(sp)
    1438:	d8000115 	stw	zero,4(sp)
    143c:	d8800015 	stw	r2,0(sp)
    1440:	980f883a 	mov	r7,r19
    1444:	900d883a 	mov	r6,r18
    1448:	880b883a 	mov	r5,r17
    144c:	8009883a 	mov	r4,r16
    1450:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xl0-paddleW/2, (int) yl0+paddleH/2, (int) xl0+paddleW/2, (int) yl1+paddleH/2, COLOR_WHITE, 0);
    1454:	d4270c17 	ldw	r16,-25552(gp)
    1458:	d0a70617 	ldw	r2,-25576(gp)
    145c:	1009883a 	mov	r4,r2
    1460:	00030940 	call	3094 <__fixsfsi>
    1464:	1009883a 	mov	r4,r2
    1468:	d0a00017 	ldw	r2,-32768(gp)
    146c:	1006d7fa 	srli	r3,r2,31
    1470:	1885883a 	add	r2,r3,r2
    1474:	1005d07a 	srai	r2,r2,1
    1478:	20a3c83a 	sub	r17,r4,r2
    147c:	d0a70517 	ldw	r2,-25580(gp)
    1480:	1009883a 	mov	r4,r2
    1484:	00030940 	call	3094 <__fixsfsi>
    1488:	1009883a 	mov	r4,r2
    148c:	d0a00117 	ldw	r2,-32764(gp)
    1490:	1006d7fa 	srli	r3,r2,31
    1494:	1885883a 	add	r2,r3,r2
    1498:	1005d07a 	srai	r2,r2,1
    149c:	20a5883a 	add	r18,r4,r2
    14a0:	d0a70617 	ldw	r2,-25576(gp)
    14a4:	1009883a 	mov	r4,r2
    14a8:	00030940 	call	3094 <__fixsfsi>
    14ac:	1009883a 	mov	r4,r2
    14b0:	d0a00017 	ldw	r2,-32768(gp)
    14b4:	1006d7fa 	srli	r3,r2,31
    14b8:	1885883a 	add	r2,r3,r2
    14bc:	1005d07a 	srai	r2,r2,1
    14c0:	20a7883a 	add	r19,r4,r2
    14c4:	d0a70b17 	ldw	r2,-25556(gp)
    14c8:	1009883a 	mov	r4,r2
    14cc:	00030940 	call	3094 <__fixsfsi>
    14d0:	1009883a 	mov	r4,r2
    14d4:	d0a00117 	ldw	r2,-32764(gp)
    14d8:	1006d7fa 	srli	r3,r2,31
    14dc:	1885883a 	add	r2,r3,r2
    14e0:	1005d07a 	srai	r2,r2,1
    14e4:	2085883a 	add	r2,r4,r2
    14e8:	d8000215 	stw	zero,8(sp)
    14ec:	00ffffd4 	movui	r3,65535
    14f0:	d8c00115 	stw	r3,4(sp)
    14f4:	d8800015 	stw	r2,0(sp)
    14f8:	980f883a 	mov	r7,r19
    14fc:	900d883a 	mov	r6,r18
    1500:	880b883a 	mov	r5,r17
    1504:	8009883a 	mov	r4,r16
    1508:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
    150c:	00005b06 	br	167c <drawPaddles+0x314>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xl0-paddleW/2, (int) yl1+paddleH/2, (int) xl0+paddleW/2, (int) yl0+paddleH/2, COLOR_BLACK, 0);
    1510:	d4270c17 	ldw	r16,-25552(gp)
    1514:	d0a70617 	ldw	r2,-25576(gp)
    1518:	1009883a 	mov	r4,r2
    151c:	00030940 	call	3094 <__fixsfsi>
    1520:	1009883a 	mov	r4,r2
    1524:	d0a00017 	ldw	r2,-32768(gp)
    1528:	1006d7fa 	srli	r3,r2,31
    152c:	1885883a 	add	r2,r3,r2
    1530:	1005d07a 	srai	r2,r2,1
    1534:	20a3c83a 	sub	r17,r4,r2
    1538:	d0a70b17 	ldw	r2,-25556(gp)
    153c:	1009883a 	mov	r4,r2
    1540:	00030940 	call	3094 <__fixsfsi>
    1544:	1009883a 	mov	r4,r2
    1548:	d0a00117 	ldw	r2,-32764(gp)
    154c:	1006d7fa 	srli	r3,r2,31
    1550:	1885883a 	add	r2,r3,r2
    1554:	1005d07a 	srai	r2,r2,1
    1558:	20a5883a 	add	r18,r4,r2
    155c:	d0a70617 	ldw	r2,-25576(gp)
    1560:	1009883a 	mov	r4,r2
    1564:	00030940 	call	3094 <__fixsfsi>
    1568:	1009883a 	mov	r4,r2
    156c:	d0a00017 	ldw	r2,-32768(gp)
    1570:	1006d7fa 	srli	r3,r2,31
    1574:	1885883a 	add	r2,r3,r2
    1578:	1005d07a 	srai	r2,r2,1
    157c:	20a7883a 	add	r19,r4,r2
    1580:	d0a70517 	ldw	r2,-25580(gp)
    1584:	1009883a 	mov	r4,r2
    1588:	00030940 	call	3094 <__fixsfsi>
    158c:	1009883a 	mov	r4,r2
    1590:	d0a00117 	ldw	r2,-32764(gp)
    1594:	1006d7fa 	srli	r3,r2,31
    1598:	1885883a 	add	r2,r3,r2
    159c:	1005d07a 	srai	r2,r2,1
    15a0:	2085883a 	add	r2,r4,r2
    15a4:	d8000215 	stw	zero,8(sp)
    15a8:	d8000115 	stw	zero,4(sp)
    15ac:	d8800015 	stw	r2,0(sp)
    15b0:	980f883a 	mov	r7,r19
    15b4:	900d883a 	mov	r6,r18
    15b8:	880b883a 	mov	r5,r17
    15bc:	8009883a 	mov	r4,r16
    15c0:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xl0-paddleW/2, (int) yl1-paddleH/2, (int) xl0+paddleW/2, (int) yl0-paddleH/2, COLOR_WHITE, 0);
    15c4:	d4270c17 	ldw	r16,-25552(gp)
    15c8:	d0a70617 	ldw	r2,-25576(gp)
    15cc:	1009883a 	mov	r4,r2
    15d0:	00030940 	call	3094 <__fixsfsi>
    15d4:	1009883a 	mov	r4,r2
    15d8:	d0a00017 	ldw	r2,-32768(gp)
    15dc:	1006d7fa 	srli	r3,r2,31
    15e0:	1885883a 	add	r2,r3,r2
    15e4:	1005d07a 	srai	r2,r2,1
    15e8:	20a3c83a 	sub	r17,r4,r2
    15ec:	d0a70b17 	ldw	r2,-25556(gp)
    15f0:	1009883a 	mov	r4,r2
    15f4:	00030940 	call	3094 <__fixsfsi>
    15f8:	1009883a 	mov	r4,r2
    15fc:	d0a00117 	ldw	r2,-32764(gp)
    1600:	1006d7fa 	srli	r3,r2,31
    1604:	1885883a 	add	r2,r3,r2
    1608:	1005d07a 	srai	r2,r2,1
    160c:	20a5c83a 	sub	r18,r4,r2
    1610:	d0a70617 	ldw	r2,-25576(gp)
    1614:	1009883a 	mov	r4,r2
    1618:	00030940 	call	3094 <__fixsfsi>
    161c:	1009883a 	mov	r4,r2
    1620:	d0a00017 	ldw	r2,-32768(gp)
    1624:	1006d7fa 	srli	r3,r2,31
    1628:	1885883a 	add	r2,r3,r2
    162c:	1005d07a 	srai	r2,r2,1
    1630:	20a7883a 	add	r19,r4,r2
    1634:	d0a70517 	ldw	r2,-25580(gp)
    1638:	1009883a 	mov	r4,r2
    163c:	00030940 	call	3094 <__fixsfsi>
    1640:	1009883a 	mov	r4,r2
    1644:	d0a00117 	ldw	r2,-32764(gp)
    1648:	1006d7fa 	srli	r3,r2,31
    164c:	1885883a 	add	r2,r3,r2
    1650:	1005d07a 	srai	r2,r2,1
    1654:	2085c83a 	sub	r2,r4,r2
    1658:	d8000215 	stw	zero,8(sp)
    165c:	00ffffd4 	movui	r3,65535
    1660:	d8c00115 	stw	r3,4(sp)
    1664:	d8800015 	stw	r2,0(sp)
    1668:	980f883a 	mov	r7,r19
    166c:	900d883a 	mov	r6,r18
    1670:	880b883a 	mov	r5,r17
    1674:	8009883a 	mov	r4,r16
    1678:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
	}
	if (yr1 > yr0)
    167c:	d0a71017 	ldw	r2,-25536(gp)
    1680:	d0e70e17 	ldw	r3,-25544(gp)
    1684:	180b883a 	mov	r5,r3
    1688:	1009883a 	mov	r4,r2
    168c:	00026300 	call	2630 <__gesf2>
    1690:	00805c0e 	bge	zero,r2,1804 <drawPaddles+0x49c>
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr0-paddleH/2, (int) xr0+paddleW/2, (int) yr1-paddleH/2, COLOR_BLACK, 0);
    1694:	d4270c17 	ldw	r16,-25552(gp)
    1698:	d0a70117 	ldw	r2,-25596(gp)
    169c:	1009883a 	mov	r4,r2
    16a0:	00030940 	call	3094 <__fixsfsi>
    16a4:	1009883a 	mov	r4,r2
    16a8:	d0a00017 	ldw	r2,-32768(gp)
    16ac:	1006d7fa 	srli	r3,r2,31
    16b0:	1885883a 	add	r2,r3,r2
    16b4:	1005d07a 	srai	r2,r2,1
    16b8:	20a3c83a 	sub	r17,r4,r2
    16bc:	d0a70e17 	ldw	r2,-25544(gp)
    16c0:	1009883a 	mov	r4,r2
    16c4:	00030940 	call	3094 <__fixsfsi>
    16c8:	1009883a 	mov	r4,r2
    16cc:	d0a00117 	ldw	r2,-32764(gp)
    16d0:	1006d7fa 	srli	r3,r2,31
    16d4:	1885883a 	add	r2,r3,r2
    16d8:	1005d07a 	srai	r2,r2,1
    16dc:	20a5c83a 	sub	r18,r4,r2
    16e0:	d0a70117 	ldw	r2,-25596(gp)
    16e4:	1009883a 	mov	r4,r2
    16e8:	00030940 	call	3094 <__fixsfsi>
    16ec:	1009883a 	mov	r4,r2
    16f0:	d0a00017 	ldw	r2,-32768(gp)
    16f4:	1006d7fa 	srli	r3,r2,31
    16f8:	1885883a 	add	r2,r3,r2
    16fc:	1005d07a 	srai	r2,r2,1
    1700:	20a7883a 	add	r19,r4,r2
    1704:	d0a71017 	ldw	r2,-25536(gp)
    1708:	1009883a 	mov	r4,r2
    170c:	00030940 	call	3094 <__fixsfsi>
    1710:	1009883a 	mov	r4,r2
    1714:	d0a00117 	ldw	r2,-32764(gp)
    1718:	1006d7fa 	srli	r3,r2,31
    171c:	1885883a 	add	r2,r3,r2
    1720:	1005d07a 	srai	r2,r2,1
    1724:	2085c83a 	sub	r2,r4,r2
    1728:	d8000215 	stw	zero,8(sp)
    172c:	d8000115 	stw	zero,4(sp)
    1730:	d8800015 	stw	r2,0(sp)
    1734:	980f883a 	mov	r7,r19
    1738:	900d883a 	mov	r6,r18
    173c:	880b883a 	mov	r5,r17
    1740:	8009883a 	mov	r4,r16
    1744:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr0+paddleH/2, (int) xr0+paddleW/2, (int) yr1+paddleH/2, COLOR_WHITE, 0);
    1748:	d4270c17 	ldw	r16,-25552(gp)
    174c:	d0a70117 	ldw	r2,-25596(gp)
    1750:	1009883a 	mov	r4,r2
    1754:	00030940 	call	3094 <__fixsfsi>
    1758:	1009883a 	mov	r4,r2
    175c:	d0a00017 	ldw	r2,-32768(gp)
    1760:	1006d7fa 	srli	r3,r2,31
    1764:	1885883a 	add	r2,r3,r2
    1768:	1005d07a 	srai	r2,r2,1
    176c:	20a3c83a 	sub	r17,r4,r2
    1770:	d0a70e17 	ldw	r2,-25544(gp)
    1774:	1009883a 	mov	r4,r2
    1778:	00030940 	call	3094 <__fixsfsi>
    177c:	1009883a 	mov	r4,r2
    1780:	d0a00117 	ldw	r2,-32764(gp)
    1784:	1006d7fa 	srli	r3,r2,31
    1788:	1885883a 	add	r2,r3,r2
    178c:	1005d07a 	srai	r2,r2,1
    1790:	20a5883a 	add	r18,r4,r2
    1794:	d0a70117 	ldw	r2,-25596(gp)
    1798:	1009883a 	mov	r4,r2
    179c:	00030940 	call	3094 <__fixsfsi>
    17a0:	1009883a 	mov	r4,r2
    17a4:	d0a00017 	ldw	r2,-32768(gp)
    17a8:	1006d7fa 	srli	r3,r2,31
    17ac:	1885883a 	add	r2,r3,r2
    17b0:	1005d07a 	srai	r2,r2,1
    17b4:	20a7883a 	add	r19,r4,r2
    17b8:	d0a71017 	ldw	r2,-25536(gp)
    17bc:	1009883a 	mov	r4,r2
    17c0:	00030940 	call	3094 <__fixsfsi>
    17c4:	1009883a 	mov	r4,r2
    17c8:	d0a00117 	ldw	r2,-32764(gp)
    17cc:	1006d7fa 	srli	r3,r2,31
    17d0:	1885883a 	add	r2,r3,r2
    17d4:	1005d07a 	srai	r2,r2,1
    17d8:	2085883a 	add	r2,r4,r2
    17dc:	d8000215 	stw	zero,8(sp)
    17e0:	00ffffd4 	movui	r3,65535
    17e4:	d8c00115 	stw	r3,4(sp)
    17e8:	d8800015 	stw	r2,0(sp)
    17ec:	980f883a 	mov	r7,r19
    17f0:	900d883a 	mov	r6,r18
    17f4:	880b883a 	mov	r5,r17
    17f8:	8009883a 	mov	r4,r16
    17fc:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
	else
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr1+paddleH/2, (int) xr0+paddleW/2, (int) yr0+paddleH/2, COLOR_BLACK, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr1-paddleH/2, (int) xr0+paddleW/2, (int) yr0-paddleH/2, COLOR_WHITE, 0);
	}
}
    1800:	00005b06 	br	1970 <drawPaddles+0x608>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr0-paddleH/2, (int) xr0+paddleW/2, (int) yr1-paddleH/2, COLOR_BLACK, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr0+paddleH/2, (int) xr0+paddleW/2, (int) yr1+paddleH/2, COLOR_WHITE, 0);
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr1+paddleH/2, (int) xr0+paddleW/2, (int) yr0+paddleH/2, COLOR_BLACK, 0);
    1804:	d4270c17 	ldw	r16,-25552(gp)
    1808:	d0a70117 	ldw	r2,-25596(gp)
    180c:	1009883a 	mov	r4,r2
    1810:	00030940 	call	3094 <__fixsfsi>
    1814:	1009883a 	mov	r4,r2
    1818:	d0a00017 	ldw	r2,-32768(gp)
    181c:	1006d7fa 	srli	r3,r2,31
    1820:	1885883a 	add	r2,r3,r2
    1824:	1005d07a 	srai	r2,r2,1
    1828:	20a3c83a 	sub	r17,r4,r2
    182c:	d0a71017 	ldw	r2,-25536(gp)
    1830:	1009883a 	mov	r4,r2
    1834:	00030940 	call	3094 <__fixsfsi>
    1838:	1009883a 	mov	r4,r2
    183c:	d0a00117 	ldw	r2,-32764(gp)
    1840:	1006d7fa 	srli	r3,r2,31
    1844:	1885883a 	add	r2,r3,r2
    1848:	1005d07a 	srai	r2,r2,1
    184c:	20a5883a 	add	r18,r4,r2
    1850:	d0a70117 	ldw	r2,-25596(gp)
    1854:	1009883a 	mov	r4,r2
    1858:	00030940 	call	3094 <__fixsfsi>
    185c:	1009883a 	mov	r4,r2
    1860:	d0a00017 	ldw	r2,-32768(gp)
    1864:	1006d7fa 	srli	r3,r2,31
    1868:	1885883a 	add	r2,r3,r2
    186c:	1005d07a 	srai	r2,r2,1
    1870:	20a7883a 	add	r19,r4,r2
    1874:	d0a70e17 	ldw	r2,-25544(gp)
    1878:	1009883a 	mov	r4,r2
    187c:	00030940 	call	3094 <__fixsfsi>
    1880:	1009883a 	mov	r4,r2
    1884:	d0a00117 	ldw	r2,-32764(gp)
    1888:	1006d7fa 	srli	r3,r2,31
    188c:	1885883a 	add	r2,r3,r2
    1890:	1005d07a 	srai	r2,r2,1
    1894:	2085883a 	add	r2,r4,r2
    1898:	d8000215 	stw	zero,8(sp)
    189c:	d8000115 	stw	zero,4(sp)
    18a0:	d8800015 	stw	r2,0(sp)
    18a4:	980f883a 	mov	r7,r19
    18a8:	900d883a 	mov	r6,r18
    18ac:	880b883a 	mov	r5,r17
    18b0:	8009883a 	mov	r4,r16
    18b4:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, (int) xr0-paddleW/2, (int) yr1-paddleH/2, (int) xr0+paddleW/2, (int) yr0-paddleH/2, COLOR_WHITE, 0);
    18b8:	d4270c17 	ldw	r16,-25552(gp)
    18bc:	d0a70117 	ldw	r2,-25596(gp)
    18c0:	1009883a 	mov	r4,r2
    18c4:	00030940 	call	3094 <__fixsfsi>
    18c8:	1009883a 	mov	r4,r2
    18cc:	d0a00017 	ldw	r2,-32768(gp)
    18d0:	1006d7fa 	srli	r3,r2,31
    18d4:	1885883a 	add	r2,r3,r2
    18d8:	1005d07a 	srai	r2,r2,1
    18dc:	20a3c83a 	sub	r17,r4,r2
    18e0:	d0a71017 	ldw	r2,-25536(gp)
    18e4:	1009883a 	mov	r4,r2
    18e8:	00030940 	call	3094 <__fixsfsi>
    18ec:	1009883a 	mov	r4,r2
    18f0:	d0a00117 	ldw	r2,-32764(gp)
    18f4:	1006d7fa 	srli	r3,r2,31
    18f8:	1885883a 	add	r2,r3,r2
    18fc:	1005d07a 	srai	r2,r2,1
    1900:	20a5c83a 	sub	r18,r4,r2
    1904:	d0a70117 	ldw	r2,-25596(gp)
    1908:	1009883a 	mov	r4,r2
    190c:	00030940 	call	3094 <__fixsfsi>
    1910:	1009883a 	mov	r4,r2
    1914:	d0a00017 	ldw	r2,-32768(gp)
    1918:	1006d7fa 	srli	r3,r2,31
    191c:	1885883a 	add	r2,r3,r2
    1920:	1005d07a 	srai	r2,r2,1
    1924:	20a7883a 	add	r19,r4,r2
    1928:	d0a70e17 	ldw	r2,-25544(gp)
    192c:	1009883a 	mov	r4,r2
    1930:	00030940 	call	3094 <__fixsfsi>
    1934:	1009883a 	mov	r4,r2
    1938:	d0a00117 	ldw	r2,-32764(gp)
    193c:	1006d7fa 	srli	r3,r2,31
    1940:	1885883a 	add	r2,r3,r2
    1944:	1005d07a 	srai	r2,r2,1
    1948:	2085c83a 	sub	r2,r4,r2
    194c:	d8000215 	stw	zero,8(sp)
    1950:	00ffffd4 	movui	r3,65535
    1954:	d8c00115 	stw	r3,4(sp)
    1958:	d8800015 	stw	r2,0(sp)
    195c:	980f883a 	mov	r7,r19
    1960:	900d883a 	mov	r6,r18
    1964:	880b883a 	mov	r5,r17
    1968:	8009883a 	mov	r4,r16
    196c:	000aca80 	call	aca8 <alt_up_pixel_buffer_dma_draw_box>
	}
}
    1970:	0001883a 	nop
    1974:	e6fffc04 	addi	sp,fp,-16
    1978:	dfc00517 	ldw	ra,20(sp)
    197c:	df000417 	ldw	fp,16(sp)
    1980:	dcc00317 	ldw	r19,12(sp)
    1984:	dc800217 	ldw	r18,8(sp)
    1988:	dc400117 	ldw	r17,4(sp)
    198c:	dc000017 	ldw	r16,0(sp)
    1990:	dec00604 	addi	sp,sp,24
    1994:	f800283a 	ret

00001998 <timer_0_int_init>:

#include "piezo.h"

void timer_0_int_init() {
    1998:	defffd04 	addi	sp,sp,-12
    199c:	dfc00215 	stw	ra,8(sp)
    19a0:	df000115 	stw	fp,4(sp)
    19a4:	df000104 	addi	fp,sp,4
	// stop the timer first
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
    19a8:	00c00204 	movi	r3,8
    19ac:	00820834 	movhi	r2,2080
    19b0:	10853104 	addi	r2,r2,5316
    19b4:	10c00035 	stwio	r3,0(r2)

	// timer interrupt handler
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ,
    19b8:	d8000015 	stw	zero,0(sp)
    19bc:	000f883a 	mov	r7,zero
    19c0:	01800034 	movhi	r6,0
    19c4:	31867b04 	addi	r6,r6,6636
    19c8:	014000c4 	movi	r5,3
    19cc:	0009883a 	mov	r4,zero
    19d0:	00048640 	call	4864 <alt_ic_isr_register>
				timer_0_isr, NULL, NULL);
}
    19d4:	0001883a 	nop
    19d8:	e037883a 	mov	sp,fp
    19dc:	dfc00117 	ldw	ra,4(sp)
    19e0:	df000017 	ldw	fp,0(sp)
    19e4:	dec00204 	addi	sp,sp,8
    19e8:	f800283a 	ret

000019ec <timer_0_isr>:
void timer_0_isr() {
    19ec:	defffe04 	addi	sp,sp,-8
    19f0:	df000115 	stw	fp,4(sp)
    19f4:	df000104 	addi	fp,sp,4
	// clear the TO bit first
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    19f8:	0007883a 	mov	r3,zero
    19fc:	00820834 	movhi	r2,2080
    1a00:	10853004 	addi	r2,r2,5312
    1a04:	10c00035 	stwio	r3,0(r2)

	int pwm_level = IORD_ALTERA_AVALON_TIMER_STATUS(PIEZO_PWM_BASE);
    1a08:	00820834 	movhi	r2,2080
    1a0c:	10853804 	addi	r2,r2,5344
    1a10:	10800037 	ldwio	r2,0(r2)
    1a14:	e0bfff15 	stw	r2,-4(fp)
	if (pwm_level == 0)
    1a18:	e0bfff17 	ldw	r2,-4(fp)
    1a1c:	1000051e 	bne	r2,zero,1a34 <timer_0_isr+0x48>
		IOWR_ALTERA_AVALON_TIMER_STATUS(PIEZO_PWM_BASE, 1);
    1a20:	00c00044 	movi	r3,1
    1a24:	00820834 	movhi	r2,2080
    1a28:	10853804 	addi	r2,r2,5344
    1a2c:	10c00035 	stwio	r3,0(r2)
    1a30:	00000406 	br	1a44 <timer_0_isr+0x58>
	else
		IOWR_ALTERA_AVALON_TIMER_STATUS(PIEZO_PWM_BASE, 0);
    1a34:	0007883a 	mov	r3,zero
    1a38:	00820834 	movhi	r2,2080
    1a3c:	10853804 	addi	r2,r2,5344
    1a40:	10c00035 	stwio	r3,0(r2)

	// dummy instruction to synchronize
	IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE);
    1a44:	00820834 	movhi	r2,2080
    1a48:	10853004 	addi	r2,r2,5312
    1a4c:	10800037 	ldwio	r2,0(r2)
	return;
    1a50:	0001883a 	nop
}
    1a54:	e037883a 	mov	sp,fp
    1a58:	df000017 	ldw	fp,0(sp)
    1a5c:	dec00104 	addi	sp,sp,4
    1a60:	f800283a 	ret

00001a64 <update_timer_0>:

void update_timer_0(int note_period) {
    1a64:	defffb04 	addi	sp,sp,-20
    1a68:	df000415 	stw	fp,16(sp)
    1a6c:	df000404 	addi	fp,sp,16
    1a70:	e13fff15 	stw	r4,-4(fp)
	// stop the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
    1a74:	00c00204 	movi	r3,8
    1a78:	00820834 	movhi	r2,2080
    1a7c:	10853104 	addi	r2,r2,5316
    1a80:	10c00035 	stwio	r3,0(r2)

	// load the correct value into the registers
	int period = note_period;
    1a84:	e0bfff17 	ldw	r2,-4(fp)
    1a88:	e0bffc15 	stw	r2,-16(fp)
	int periodlo = period & 0xffff;
    1a8c:	e0bffc17 	ldw	r2,-16(fp)
    1a90:	10bfffcc 	andi	r2,r2,65535
    1a94:	e0bffd15 	stw	r2,-12(fp)
	int periodhi = period >> 16;
    1a98:	e0bffc17 	ldw	r2,-16(fp)
    1a9c:	1005d43a 	srai	r2,r2,16
    1aa0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, periodlo);
    1aa4:	00820834 	movhi	r2,2080
    1aa8:	10853204 	addi	r2,r2,5320
    1aac:	e0fffd17 	ldw	r3,-12(fp)
    1ab0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, periodhi);
    1ab4:	00820834 	movhi	r2,2080
    1ab8:	10853304 	addi	r2,r2,5324
    1abc:	e0fffe17 	ldw	r3,-8(fp)
    1ac0:	10c00035 	stwio	r3,0(r2)

	//enable ITO, CONT, and START bits
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0b111);
    1ac4:	00c001c4 	movi	r3,7
    1ac8:	00820834 	movhi	r2,2080
    1acc:	10853104 	addi	r2,r2,5316
    1ad0:	10c00035 	stwio	r3,0(r2)
}
    1ad4:	0001883a 	nop
    1ad8:	e037883a 	mov	sp,fp
    1adc:	df000017 	ldw	fp,0(sp)
    1ae0:	dec00104 	addi	sp,sp,4
    1ae4:	f800283a 	ret

00001ae8 <stop_timer_0>:

void stop_timer_0()
{
    1ae8:	deffff04 	addi	sp,sp,-4
    1aec:	df000015 	stw	fp,0(sp)
    1af0:	d839883a 	mov	fp,sp
	// clear the TO bit first
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    1af4:	0007883a 	mov	r3,zero
    1af8:	00820834 	movhi	r2,2080
    1afc:	10853004 	addi	r2,r2,5312
    1b00:	10c00035 	stwio	r3,0(r2)
	// stop the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
    1b04:	00c00204 	movi	r3,8
    1b08:	00820834 	movhi	r2,2080
    1b0c:	10853104 	addi	r2,r2,5316
    1b10:	10c00035 	stwio	r3,0(r2)
}
    1b14:	0001883a 	nop
    1b18:	e037883a 	mov	sp,fp
    1b1c:	df000017 	ldw	fp,0(sp)
    1b20:	dec00104 	addi	sp,sp,4
    1b24:	f800283a 	ret

00001b28 <timer_1_int_init>:

void timer_1_int_init() {
    1b28:	defffd04 	addi	sp,sp,-12
    1b2c:	dfc00215 	stw	ra,8(sp)
    1b30:	df000115 	stw	fp,4(sp)
    1b34:	df000104 	addi	fp,sp,4
	// stop the timer first
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x8);
    1b38:	00c00204 	movi	r3,8
    1b3c:	00820834 	movhi	r2,2080
    1b40:	10852904 	addi	r2,r2,5284
    1b44:	10c00035 	stwio	r3,0(r2)

	// timer interrupt handler
	alt_ic_isr_register(TIMER_1_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_1_IRQ,
    1b48:	d8000015 	stw	zero,0(sp)
    1b4c:	000f883a 	mov	r7,zero
    1b50:	01800034 	movhi	r6,0
    1b54:	3186df04 	addi	r6,r6,7036
    1b58:	01400104 	movi	r5,4
    1b5c:	0009883a 	mov	r4,zero
    1b60:	00048640 	call	4864 <alt_ic_isr_register>
				timer_1_isr, NULL, NULL);
}
    1b64:	0001883a 	nop
    1b68:	e037883a 	mov	sp,fp
    1b6c:	dfc00117 	ldw	ra,4(sp)
    1b70:	df000017 	ldw	fp,0(sp)
    1b74:	dec00204 	addi	sp,sp,8
    1b78:	f800283a 	ret

00001b7c <timer_1_isr>:
void timer_1_isr() {
    1b7c:	defffe04 	addi	sp,sp,-8
    1b80:	dfc00115 	stw	ra,4(sp)
    1b84:	df000015 	stw	fp,0(sp)
    1b88:	d839883a 	mov	fp,sp
	// clear the TO bit first
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE, 0);
    1b8c:	0007883a 	mov	r3,zero
    1b90:	00820834 	movhi	r2,2080
    1b94:	10852804 	addi	r2,r2,5280
    1b98:	10c00035 	stwio	r3,0(r2)

	stop_timer_0();
    1b9c:	0001ae80 	call	1ae8 <stop_timer_0>

	// dummy instruction to synchronize
	IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_1_BASE);
    1ba0:	00820834 	movhi	r2,2080
    1ba4:	10852804 	addi	r2,r2,5280
    1ba8:	10800037 	ldwio	r2,0(r2)
	return;
    1bac:	0001883a 	nop
}
    1bb0:	e037883a 	mov	sp,fp
    1bb4:	dfc00117 	ldw	ra,4(sp)
    1bb8:	df000017 	ldw	fp,0(sp)
    1bbc:	dec00204 	addi	sp,sp,8
    1bc0:	f800283a 	ret

00001bc4 <update_timer_1>:

void update_timer_1(float duration_period) {
    1bc4:	defffa04 	addi	sp,sp,-24
    1bc8:	dfc00515 	stw	ra,20(sp)
    1bcc:	df000415 	stw	fp,16(sp)
    1bd0:	df000404 	addi	fp,sp,16
    1bd4:	e13fff15 	stw	r4,-4(fp)
	// stop the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0x8);
    1bd8:	00c00204 	movi	r3,8
    1bdc:	00820834 	movhi	r2,2080
    1be0:	10852904 	addi	r2,r2,5284
    1be4:	10c00035 	stwio	r3,0(r2)

	// load the correct value into the registers
	int period = duration_period * 1000 * TIMER_1_LOAD_VALUE;
    1be8:	01511eb4 	movhi	r5,17530
    1bec:	e13fff17 	ldw	r4,-4(fp)
    1bf0:	00027b40 	call	27b4 <__mulsf3>
    1bf4:	1007883a 	mov	r3,r2
    1bf8:	1805883a 	mov	r2,r3
    1bfc:	0151d0f4 	movhi	r5,18243
    1c00:	2953c004 	addi	r5,r5,20224
    1c04:	1009883a 	mov	r4,r2
    1c08:	00027b40 	call	27b4 <__mulsf3>
    1c0c:	1007883a 	mov	r3,r2
    1c10:	1805883a 	mov	r2,r3
    1c14:	1009883a 	mov	r4,r2
    1c18:	00030940 	call	3094 <__fixsfsi>
    1c1c:	e0bffc15 	stw	r2,-16(fp)
	int periodlo = period & 0xffff;
    1c20:	e0bffc17 	ldw	r2,-16(fp)
    1c24:	10bfffcc 	andi	r2,r2,65535
    1c28:	e0bffd15 	stw	r2,-12(fp)
	int periodhi = period >> 16;
    1c2c:	e0bffc17 	ldw	r2,-16(fp)
    1c30:	1005d43a 	srai	r2,r2,16
    1c34:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_1_BASE, periodlo);
    1c38:	00820834 	movhi	r2,2080
    1c3c:	10852a04 	addi	r2,r2,5288
    1c40:	e0fffd17 	ldw	r3,-12(fp)
    1c44:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_1_BASE, periodhi);
    1c48:	00820834 	movhi	r2,2080
    1c4c:	10852b04 	addi	r2,r2,5292
    1c50:	e0fffe17 	ldw	r3,-8(fp)
    1c54:	10c00035 	stwio	r3,0(r2)

	//enable ITO, not CONT, and START bits
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_1_BASE, 0b101);
    1c58:	00c00144 	movi	r3,5
    1c5c:	00820834 	movhi	r2,2080
    1c60:	10852904 	addi	r2,r2,5284
    1c64:	10c00035 	stwio	r3,0(r2)
}
    1c68:	0001883a 	nop
    1c6c:	e037883a 	mov	sp,fp
    1c70:	dfc00117 	ldw	ra,4(sp)
    1c74:	df000017 	ldw	fp,0(sp)
    1c78:	dec00204 	addi	sp,sp,8
    1c7c:	f800283a 	ret

00001c80 <play_note>:


void play_note(float note_period, float note_duration)
{
    1c80:	defffb04 	addi	sp,sp,-20
    1c84:	dfc00415 	stw	ra,16(sp)
    1c88:	df000315 	stw	fp,12(sp)
    1c8c:	df000304 	addi	fp,sp,12
    1c90:	e13ffe15 	stw	r4,-8(fp)
    1c94:	e17fff15 	stw	r5,-4(fp)
	float sound_duration = note_duration * 0.8;
    1c98:	e13fff17 	ldw	r4,-4(fp)
    1c9c:	00041ec0 	call	41ec <__extendsfdf2>
    1ca0:	1011883a 	mov	r8,r2
    1ca4:	1813883a 	mov	r9,r3
    1ca8:	01a666b4 	movhi	r6,39322
    1cac:	31a66684 	addi	r6,r6,-26214
    1cb0:	01cffab4 	movhi	r7,16362
    1cb4:	39e66644 	addi	r7,r7,-26215
    1cb8:	4009883a 	mov	r4,r8
    1cbc:	480b883a 	mov	r5,r9
    1cc0:	0003ad40 	call	3ad4 <__muldf3>
    1cc4:	1009883a 	mov	r4,r2
    1cc8:	180b883a 	mov	r5,r3
    1ccc:	2005883a 	mov	r2,r4
    1cd0:	2807883a 	mov	r3,r5
    1cd4:	1009883a 	mov	r4,r2
    1cd8:	180b883a 	mov	r5,r3
    1cdc:	00042fc0 	call	42fc <__truncdfsf2>
    1ce0:	1007883a 	mov	r3,r2
    1ce4:	e0fffd15 	stw	r3,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIEZO_PWM_BASE, 0);
    1ce8:	0007883a 	mov	r3,zero
    1cec:	00820834 	movhi	r2,2080
    1cf0:	10853804 	addi	r2,r2,5344
    1cf4:	10c00035 	stwio	r3,0(r2)
	update_timer_0(note_period);
    1cf8:	e13ffe17 	ldw	r4,-8(fp)
    1cfc:	00030940 	call	3094 <__fixsfsi>
    1d00:	1009883a 	mov	r4,r2
    1d04:	0001a640 	call	1a64 <update_timer_0>
	update_timer_1(sound_duration);
    1d08:	e13ffd17 	ldw	r4,-12(fp)
    1d0c:	0001bc40 	call	1bc4 <update_timer_1>
	//update_timer_2(note_duration);
}
    1d10:	0001883a 	nop
    1d14:	e037883a 	mov	sp,fp
    1d18:	dfc00117 	ldw	ra,4(sp)
    1d1c:	df000017 	ldw	fp,0(sp)
    1d20:	dec00204 	addi	sp,sp,8
    1d24:	f800283a 	ret

00001d28 <__addsf3>:
    1d28:	defffc04 	addi	sp,sp,-16
    1d2c:	2004d7fa 	srli	r2,r4,31
    1d30:	280cd5fa 	srli	r6,r5,23
    1d34:	dc000015 	stw	r16,0(sp)
    1d38:	00c02034 	movhi	r3,128
    1d3c:	2020d5fa 	srli	r16,r4,23
    1d40:	280ed7fa 	srli	r7,r5,31
    1d44:	18ffffc4 	addi	r3,r3,-1
    1d48:	dc400115 	stw	r17,4(sp)
    1d4c:	1908703a 	and	r4,r3,r4
    1d50:	194a703a 	and	r5,r3,r5
    1d54:	dfc00315 	stw	ra,12(sp)
    1d58:	dc800215 	stw	r18,8(sp)
    1d5c:	14403fcc 	andi	r17,r2,255
    1d60:	84003fcc 	andi	r16,r16,255
    1d64:	200890fa 	slli	r4,r4,3
    1d68:	31803fcc 	andi	r6,r6,255
    1d6c:	280a90fa 	slli	r5,r5,3
    1d70:	89c05026 	beq	r17,r7,1eb4 <__addsf3+0x18c>
    1d74:	8185c83a 	sub	r2,r16,r6
    1d78:	00807a0e 	bge	zero,r2,1f64 <__addsf3+0x23c>
    1d7c:	30001e1e 	bne	r6,zero,1df8 <__addsf3+0xd0>
    1d80:	28006d1e 	bne	r5,zero,1f38 <__addsf3+0x210>
    1d84:	208001cc 	andi	r2,r4,7
    1d88:	10000426 	beq	r2,zero,1d9c <__addsf3+0x74>
    1d8c:	208003cc 	andi	r2,r4,15
    1d90:	00c00104 	movi	r3,4
    1d94:	10c00126 	beq	r2,r3,1d9c <__addsf3+0x74>
    1d98:	20c9883a 	add	r4,r4,r3
    1d9c:	2081002c 	andhi	r2,r4,1024
    1da0:	10003926 	beq	r2,zero,1e88 <__addsf3+0x160>
    1da4:	84000044 	addi	r16,r16,1
    1da8:	00803fc4 	movi	r2,255
    1dac:	80807826 	beq	r16,r2,1f90 <__addsf3+0x268>
    1db0:	200891ba 	slli	r4,r4,6
    1db4:	8805883a 	mov	r2,r17
    1db8:	2008d27a 	srli	r4,r4,9
    1dbc:	84003fcc 	andi	r16,r16,255
    1dc0:	800695fa 	slli	r3,r16,23
    1dc4:	10803fcc 	andi	r2,r2,255
    1dc8:	04002034 	movhi	r16,128
    1dcc:	843fffc4 	addi	r16,r16,-1
    1dd0:	100497fa 	slli	r2,r2,31
    1dd4:	2408703a 	and	r4,r4,r16
    1dd8:	20e0b03a 	or	r16,r4,r3
    1ddc:	8084b03a 	or	r2,r16,r2
    1de0:	dfc00317 	ldw	ra,12(sp)
    1de4:	dc800217 	ldw	r18,8(sp)
    1de8:	dc400117 	ldw	r17,4(sp)
    1dec:	dc000017 	ldw	r16,0(sp)
    1df0:	dec00404 	addi	sp,sp,16
    1df4:	f800283a 	ret
    1df8:	00c03fc4 	movi	r3,255
    1dfc:	80ffe126 	beq	r16,r3,1d84 <__alt_data_end+0xf8001d84>
    1e00:	29410034 	orhi	r5,r5,1024
    1e04:	00c006c4 	movi	r3,27
    1e08:	18807516 	blt	r3,r2,1fe0 <__addsf3+0x2b8>
    1e0c:	00c00804 	movi	r3,32
    1e10:	1887c83a 	sub	r3,r3,r2
    1e14:	28c6983a 	sll	r3,r5,r3
    1e18:	288ad83a 	srl	r5,r5,r2
    1e1c:	1804c03a 	cmpne	r2,r3,zero
    1e20:	288ab03a 	or	r5,r5,r2
    1e24:	2149c83a 	sub	r4,r4,r5
    1e28:	2081002c 	andhi	r2,r4,1024
    1e2c:	10001426 	beq	r2,zero,1e80 <__addsf3+0x158>
    1e30:	04810034 	movhi	r18,1024
    1e34:	94bfffc4 	addi	r18,r18,-1
    1e38:	24a4703a 	and	r18,r4,r18
    1e3c:	9009883a 	mov	r4,r18
    1e40:	00044a40 	call	44a4 <__clzsi2>
    1e44:	10bffec4 	addi	r2,r2,-5
    1e48:	90a4983a 	sll	r18,r18,r2
    1e4c:	14005416 	blt	r2,r16,1fa0 <__addsf3+0x278>
    1e50:	1405c83a 	sub	r2,r2,r16
    1e54:	11000044 	addi	r4,r2,1
    1e58:	00800804 	movi	r2,32
    1e5c:	1105c83a 	sub	r2,r2,r4
    1e60:	9084983a 	sll	r2,r18,r2
    1e64:	9124d83a 	srl	r18,r18,r4
    1e68:	0021883a 	mov	r16,zero
    1e6c:	1008c03a 	cmpne	r4,r2,zero
    1e70:	9108b03a 	or	r4,r18,r4
    1e74:	003fc306 	br	1d84 <__alt_data_end+0xf8001d84>
    1e78:	1000db26 	beq	r2,zero,21e8 <__addsf3+0x4c0>
    1e7c:	1009883a 	mov	r4,r2
    1e80:	208001cc 	andi	r2,r4,7
    1e84:	103fc11e 	bne	r2,zero,1d8c <__alt_data_end+0xf8001d8c>
    1e88:	2006d0fa 	srli	r3,r4,3
    1e8c:	01003fc4 	movi	r4,255
    1e90:	8805883a 	mov	r2,r17
    1e94:	8100241e 	bne	r16,r4,1f28 <__addsf3+0x200>
    1e98:	18006e26 	beq	r3,zero,2054 <__addsf3+0x32c>
    1e9c:	19001034 	orhi	r4,r3,64
    1ea0:	00c02034 	movhi	r3,128
    1ea4:	18ffffc4 	addi	r3,r3,-1
    1ea8:	043fffc4 	movi	r16,-1
    1eac:	20c8703a 	and	r4,r4,r3
    1eb0:	003fc206 	br	1dbc <__alt_data_end+0xf8001dbc>
    1eb4:	8187c83a 	sub	r3,r16,r6
    1eb8:	00c03e0e 	bge	zero,r3,1fb4 <__addsf3+0x28c>
    1ebc:	30002326 	beq	r6,zero,1f4c <__addsf3+0x224>
    1ec0:	01803fc4 	movi	r6,255
    1ec4:	81bfaf26 	beq	r16,r6,1d84 <__alt_data_end+0xf8001d84>
    1ec8:	29410034 	orhi	r5,r5,1024
    1ecc:	018006c4 	movi	r6,27
    1ed0:	30c07416 	blt	r6,r3,20a4 <__addsf3+0x37c>
    1ed4:	01800804 	movi	r6,32
    1ed8:	30cdc83a 	sub	r6,r6,r3
    1edc:	298c983a 	sll	r6,r5,r6
    1ee0:	28cad83a 	srl	r5,r5,r3
    1ee4:	3006c03a 	cmpne	r3,r6,zero
    1ee8:	28cab03a 	or	r5,r5,r3
    1eec:	2149883a 	add	r4,r4,r5
    1ef0:	20c1002c 	andhi	r3,r4,1024
    1ef4:	183fe226 	beq	r3,zero,1e80 <__alt_data_end+0xf8001e80>
    1ef8:	84000044 	addi	r16,r16,1
    1efc:	00c03fc4 	movi	r3,255
    1f00:	80c05426 	beq	r16,r3,2054 <__addsf3+0x32c>
    1f04:	00bf0034 	movhi	r2,64512
    1f08:	10bfffc4 	addi	r2,r2,-1
    1f0c:	20c0004c 	andi	r3,r4,1
    1f10:	2088703a 	and	r4,r4,r2
    1f14:	2008d07a 	srli	r4,r4,1
    1f18:	20c8b03a 	or	r4,r4,r3
    1f1c:	003f9906 	br	1d84 <__alt_data_end+0xf8001d84>
    1f20:	0007883a 	mov	r3,zero
    1f24:	0005883a 	mov	r2,zero
    1f28:	01002034 	movhi	r4,128
    1f2c:	213fffc4 	addi	r4,r4,-1
    1f30:	1908703a 	and	r4,r3,r4
    1f34:	003fa106 	br	1dbc <__alt_data_end+0xf8001dbc>
    1f38:	10bfffc4 	addi	r2,r2,-1
    1f3c:	103fb926 	beq	r2,zero,1e24 <__alt_data_end+0xf8001e24>
    1f40:	00c03fc4 	movi	r3,255
    1f44:	80ffaf1e 	bne	r16,r3,1e04 <__alt_data_end+0xf8001e04>
    1f48:	003f8e06 	br	1d84 <__alt_data_end+0xf8001d84>
    1f4c:	283f8d26 	beq	r5,zero,1d84 <__alt_data_end+0xf8001d84>
    1f50:	18ffffc4 	addi	r3,r3,-1
    1f54:	183fe526 	beq	r3,zero,1eec <__alt_data_end+0xf8001eec>
    1f58:	01803fc4 	movi	r6,255
    1f5c:	81bfdb1e 	bne	r16,r6,1ecc <__alt_data_end+0xf8001ecc>
    1f60:	003f8806 	br	1d84 <__alt_data_end+0xf8001d84>
    1f64:	1000201e 	bne	r2,zero,1fe8 <__addsf3+0x2c0>
    1f68:	80800044 	addi	r2,r16,1
    1f6c:	10803fcc 	andi	r2,r2,255
    1f70:	01800044 	movi	r6,1
    1f74:	3080450e 	bge	r6,r2,208c <__addsf3+0x364>
    1f78:	2165c83a 	sub	r18,r4,r5
    1f7c:	90c1002c 	andhi	r3,r18,1024
    1f80:	18002b26 	beq	r3,zero,2030 <__addsf3+0x308>
    1f84:	2925c83a 	sub	r18,r5,r4
    1f88:	3823883a 	mov	r17,r7
    1f8c:	003fab06 	br	1e3c <__alt_data_end+0xf8001e3c>
    1f90:	8805883a 	mov	r2,r17
    1f94:	043fffc4 	movi	r16,-1
    1f98:	0009883a 	mov	r4,zero
    1f9c:	003f8706 	br	1dbc <__alt_data_end+0xf8001dbc>
    1fa0:	013f0034 	movhi	r4,64512
    1fa4:	213fffc4 	addi	r4,r4,-1
    1fa8:	80a1c83a 	sub	r16,r16,r2
    1fac:	9108703a 	and	r4,r18,r4
    1fb0:	003f7406 	br	1d84 <__alt_data_end+0xf8001d84>
    1fb4:	1800411e 	bne	r3,zero,20bc <__addsf3+0x394>
    1fb8:	80c00044 	addi	r3,r16,1
    1fbc:	19c03fcc 	andi	r7,r3,255
    1fc0:	01800044 	movi	r6,1
    1fc4:	31c0260e 	bge	r6,r7,2060 <__addsf3+0x338>
    1fc8:	01803fc4 	movi	r6,255
    1fcc:	19802126 	beq	r3,r6,2054 <__addsf3+0x32c>
    1fd0:	2149883a 	add	r4,r4,r5
    1fd4:	2008d07a 	srli	r4,r4,1
    1fd8:	1821883a 	mov	r16,r3
    1fdc:	003f6906 	br	1d84 <__alt_data_end+0xf8001d84>
    1fe0:	01400044 	movi	r5,1
    1fe4:	003f8f06 	br	1e24 <__alt_data_end+0xf8001e24>
    1fe8:	8000151e 	bne	r16,zero,2040 <__addsf3+0x318>
    1fec:	20002f26 	beq	r4,zero,20ac <__addsf3+0x384>
    1ff0:	0084303a 	nor	r2,zero,r2
    1ff4:	10000a26 	beq	r2,zero,2020 <__addsf3+0x2f8>
    1ff8:	00c03fc4 	movi	r3,255
    1ffc:	30c02b26 	beq	r6,r3,20ac <__addsf3+0x384>
    2000:	00c006c4 	movi	r3,27
    2004:	18806d16 	blt	r3,r2,21bc <__addsf3+0x494>
    2008:	00c00804 	movi	r3,32
    200c:	1887c83a 	sub	r3,r3,r2
    2010:	20c6983a 	sll	r3,r4,r3
    2014:	2084d83a 	srl	r2,r4,r2
    2018:	1808c03a 	cmpne	r4,r3,zero
    201c:	1108b03a 	or	r4,r2,r4
    2020:	2909c83a 	sub	r4,r5,r4
    2024:	3021883a 	mov	r16,r6
    2028:	3823883a 	mov	r17,r7
    202c:	003f7e06 	br	1e28 <__alt_data_end+0xf8001e28>
    2030:	903f821e 	bne	r18,zero,1e3c <__alt_data_end+0xf8001e3c>
    2034:	0005883a 	mov	r2,zero
    2038:	0021883a 	mov	r16,zero
    203c:	003fba06 	br	1f28 <__alt_data_end+0xf8001f28>
    2040:	00c03fc4 	movi	r3,255
    2044:	30c01926 	beq	r6,r3,20ac <__addsf3+0x384>
    2048:	0085c83a 	sub	r2,zero,r2
    204c:	21010034 	orhi	r4,r4,1024
    2050:	003feb06 	br	2000 <__alt_data_end+0xf8002000>
    2054:	043fffc4 	movi	r16,-1
    2058:	0009883a 	mov	r4,zero
    205c:	003f5706 	br	1dbc <__alt_data_end+0xf8001dbc>
    2060:	80004a1e 	bne	r16,zero,218c <__addsf3+0x464>
    2064:	20005926 	beq	r4,zero,21cc <__addsf3+0x4a4>
    2068:	283f4626 	beq	r5,zero,1d84 <__alt_data_end+0xf8001d84>
    206c:	2149883a 	add	r4,r4,r5
    2070:	2081002c 	andhi	r2,r4,1024
    2074:	103f8226 	beq	r2,zero,1e80 <__alt_data_end+0xf8001e80>
    2078:	00bf0034 	movhi	r2,64512
    207c:	10bfffc4 	addi	r2,r2,-1
    2080:	3021883a 	mov	r16,r6
    2084:	2088703a 	and	r4,r4,r2
    2088:	003f3e06 	br	1d84 <__alt_data_end+0xf8001d84>
    208c:	8000121e 	bne	r16,zero,20d8 <__addsf3+0x3b0>
    2090:	2000261e 	bne	r4,zero,212c <__addsf3+0x404>
    2094:	283fa226 	beq	r5,zero,1f20 <__alt_data_end+0xf8001f20>
    2098:	2809883a 	mov	r4,r5
    209c:	3823883a 	mov	r17,r7
    20a0:	003f3806 	br	1d84 <__alt_data_end+0xf8001d84>
    20a4:	01400044 	movi	r5,1
    20a8:	003f9006 	br	1eec <__alt_data_end+0xf8001eec>
    20ac:	2809883a 	mov	r4,r5
    20b0:	3021883a 	mov	r16,r6
    20b4:	3823883a 	mov	r17,r7
    20b8:	003f3206 	br	1d84 <__alt_data_end+0xf8001d84>
    20bc:	80000c1e 	bne	r16,zero,20f0 <__addsf3+0x3c8>
    20c0:	20002f26 	beq	r4,zero,2180 <__addsf3+0x458>
    20c4:	00c6303a 	nor	r3,zero,r3
    20c8:	18002b1e 	bne	r3,zero,2178 <__addsf3+0x450>
    20cc:	2149883a 	add	r4,r4,r5
    20d0:	3021883a 	mov	r16,r6
    20d4:	003f8606 	br	1ef0 <__alt_data_end+0xf8001ef0>
    20d8:	20001b1e 	bne	r4,zero,2148 <__addsf3+0x420>
    20dc:	28003926 	beq	r5,zero,21c4 <__addsf3+0x49c>
    20e0:	2809883a 	mov	r4,r5
    20e4:	3823883a 	mov	r17,r7
    20e8:	04003fc4 	movi	r16,255
    20ec:	003f2506 	br	1d84 <__alt_data_end+0xf8001d84>
    20f0:	01c03fc4 	movi	r7,255
    20f4:	31c02226 	beq	r6,r7,2180 <__addsf3+0x458>
    20f8:	00c7c83a 	sub	r3,zero,r3
    20fc:	21010034 	orhi	r4,r4,1024
    2100:	01c006c4 	movi	r7,27
    2104:	38c03616 	blt	r7,r3,21e0 <__addsf3+0x4b8>
    2108:	01c00804 	movi	r7,32
    210c:	38cfc83a 	sub	r7,r7,r3
    2110:	21ce983a 	sll	r7,r4,r7
    2114:	20c6d83a 	srl	r3,r4,r3
    2118:	3808c03a 	cmpne	r4,r7,zero
    211c:	1906b03a 	or	r3,r3,r4
    2120:	1949883a 	add	r4,r3,r5
    2124:	3021883a 	mov	r16,r6
    2128:	003f7106 	br	1ef0 <__alt_data_end+0xf8001ef0>
    212c:	283f1526 	beq	r5,zero,1d84 <__alt_data_end+0xf8001d84>
    2130:	2145c83a 	sub	r2,r4,r5
    2134:	10c1002c 	andhi	r3,r2,1024
    2138:	183f4f26 	beq	r3,zero,1e78 <__alt_data_end+0xf8001e78>
    213c:	2909c83a 	sub	r4,r5,r4
    2140:	3823883a 	mov	r17,r7
    2144:	003f0f06 	br	1d84 <__alt_data_end+0xf8001d84>
    2148:	28001a26 	beq	r5,zero,21b4 <__addsf3+0x48c>
    214c:	2008d0fa 	srli	r4,r4,3
    2150:	2080102c 	andhi	r2,r4,64
    2154:	10000526 	beq	r2,zero,216c <__addsf3+0x444>
    2158:	280ad0fa 	srli	r5,r5,3
    215c:	2880102c 	andhi	r2,r5,64
    2160:	1000021e 	bne	r2,zero,216c <__addsf3+0x444>
    2164:	2809883a 	mov	r4,r5
    2168:	3823883a 	mov	r17,r7
    216c:	200890fa 	slli	r4,r4,3
    2170:	04003fc4 	movi	r16,255
    2174:	003f0306 	br	1d84 <__alt_data_end+0xf8001d84>
    2178:	01c03fc4 	movi	r7,255
    217c:	31ffe01e 	bne	r6,r7,2100 <__alt_data_end+0xf8002100>
    2180:	2809883a 	mov	r4,r5
    2184:	3021883a 	mov	r16,r6
    2188:	003efe06 	br	1d84 <__alt_data_end+0xf8001d84>
    218c:	20001126 	beq	r4,zero,21d4 <__addsf3+0x4ac>
    2190:	28000826 	beq	r5,zero,21b4 <__addsf3+0x48c>
    2194:	2008d0fa 	srli	r4,r4,3
    2198:	2080102c 	andhi	r2,r4,64
    219c:	103ff326 	beq	r2,zero,216c <__alt_data_end+0xf800216c>
    21a0:	280ad0fa 	srli	r5,r5,3
    21a4:	2880102c 	andhi	r2,r5,64
    21a8:	103ff01e 	bne	r2,zero,216c <__alt_data_end+0xf800216c>
    21ac:	2809883a 	mov	r4,r5
    21b0:	003fee06 	br	216c <__alt_data_end+0xf800216c>
    21b4:	04003fc4 	movi	r16,255
    21b8:	003ef206 	br	1d84 <__alt_data_end+0xf8001d84>
    21bc:	01000044 	movi	r4,1
    21c0:	003f9706 	br	2020 <__alt_data_end+0xf8002020>
    21c4:	0005883a 	mov	r2,zero
    21c8:	003f3406 	br	1e9c <__alt_data_end+0xf8001e9c>
    21cc:	2809883a 	mov	r4,r5
    21d0:	003eec06 	br	1d84 <__alt_data_end+0xf8001d84>
    21d4:	2809883a 	mov	r4,r5
    21d8:	04003fc4 	movi	r16,255
    21dc:	003ee906 	br	1d84 <__alt_data_end+0xf8001d84>
    21e0:	00c00044 	movi	r3,1
    21e4:	003fce06 	br	2120 <__alt_data_end+0xf8002120>
    21e8:	0005883a 	mov	r2,zero
    21ec:	003f4e06 	br	1f28 <__alt_data_end+0xf8001f28>

000021f0 <__divsf3>:
    21f0:	defff504 	addi	sp,sp,-44
    21f4:	200cd5fa 	srli	r6,r4,23
    21f8:	dcc00415 	stw	r19,16(sp)
    21fc:	2026d7fa 	srli	r19,r4,31
    2200:	00c02034 	movhi	r3,128
    2204:	dd800715 	stw	r22,28(sp)
    2208:	dd000515 	stw	r20,20(sp)
    220c:	dc800315 	stw	r18,12(sp)
    2210:	18ffffc4 	addi	r3,r3,-1
    2214:	dfc00a15 	stw	ra,40(sp)
    2218:	df000915 	stw	fp,36(sp)
    221c:	ddc00815 	stw	r23,32(sp)
    2220:	dd400615 	stw	r21,24(sp)
    2224:	dc400215 	stw	r17,8(sp)
    2228:	dc000115 	stw	r16,4(sp)
    222c:	35003fcc 	andi	r20,r6,255
    2230:	1924703a 	and	r18,r3,r4
    2234:	9d803fcc 	andi	r22,r19,255
    2238:	a0005226 	beq	r20,zero,2384 <__divsf3+0x194>
    223c:	00803fc4 	movi	r2,255
    2240:	a0802e26 	beq	r20,r2,22fc <__divsf3+0x10c>
    2244:	91002034 	orhi	r4,r18,128
    2248:	202490fa 	slli	r18,r4,3
    224c:	a53fe044 	addi	r20,r20,-127
    2250:	0021883a 	mov	r16,zero
    2254:	002f883a 	mov	r23,zero
    2258:	280cd5fa 	srli	r6,r5,23
    225c:	282ad7fa 	srli	r21,r5,31
    2260:	00c02034 	movhi	r3,128
    2264:	18ffffc4 	addi	r3,r3,-1
    2268:	31803fcc 	andi	r6,r6,255
    226c:	1962703a 	and	r17,r3,r5
    2270:	af003fcc 	andi	fp,r21,255
    2274:	30004a26 	beq	r6,zero,23a0 <__divsf3+0x1b0>
    2278:	00803fc4 	movi	r2,255
    227c:	30804526 	beq	r6,r2,2394 <__divsf3+0x1a4>
    2280:	89402034 	orhi	r5,r17,128
    2284:	282290fa 	slli	r17,r5,3
    2288:	31bfe044 	addi	r6,r6,-127
    228c:	000b883a 	mov	r5,zero
    2290:	2c20b03a 	or	r16,r5,r16
    2294:	802090ba 	slli	r16,r16,2
    2298:	00800034 	movhi	r2,0
    229c:	1088af04 	addi	r2,r2,8892
    22a0:	80a1883a 	add	r16,r16,r2
    22a4:	81000017 	ldw	r4,0(r16)
    22a8:	9d46f03a 	xor	r3,r19,r21
    22ac:	180f883a 	mov	r7,r3
    22b0:	18803fcc 	andi	r2,r3,255
    22b4:	a18dc83a 	sub	r6,r20,r6
    22b8:	2000683a 	jmp	r4
    22bc:	000024a0 	cmpeqi	zero,zero,146
    22c0:	00002324 	muli	zero,zero,140
    22c4:	00002494 	movui	zero,146
    22c8:	00002310 	cmplti	zero,zero,140
    22cc:	00002494 	movui	zero,146
    22d0:	0000246c 	andhi	zero,zero,145
    22d4:	00002494 	movui	zero,146
    22d8:	00002310 	cmplti	zero,zero,140
    22dc:	00002324 	muli	zero,zero,140
    22e0:	00002324 	muli	zero,zero,140
    22e4:	0000246c 	andhi	zero,zero,145
    22e8:	00002310 	cmplti	zero,zero,140
    22ec:	00002580 	call	258 <main+0x4c>
    22f0:	00002580 	call	258 <main+0x4c>
    22f4:	00002580 	call	258 <main+0x4c>
    22f8:	00002534 	movhi	zero,148
    22fc:	9000581e 	bne	r18,zero,2460 <__divsf3+0x270>
    2300:	04000204 	movi	r16,8
    2304:	05c00084 	movi	r23,2
    2308:	003fd306 	br	2258 <__alt_data_end+0xf8002258>
    230c:	0023883a 	mov	r17,zero
    2310:	e02d883a 	mov	r22,fp
    2314:	282f883a 	mov	r23,r5
    2318:	00800084 	movi	r2,2
    231c:	b8808f1e 	bne	r23,r2,255c <__divsf3+0x36c>
    2320:	b005883a 	mov	r2,r22
    2324:	11c0004c 	andi	r7,r2,1
    2328:	013fffc4 	movi	r4,-1
    232c:	000d883a 	mov	r6,zero
    2330:	21003fcc 	andi	r4,r4,255
    2334:	200895fa 	slli	r4,r4,23
    2338:	38803fcc 	andi	r2,r7,255
    233c:	00c02034 	movhi	r3,128
    2340:	100497fa 	slli	r2,r2,31
    2344:	18ffffc4 	addi	r3,r3,-1
    2348:	30c6703a 	and	r3,r6,r3
    234c:	1906b03a 	or	r3,r3,r4
    2350:	1884b03a 	or	r2,r3,r2
    2354:	dfc00a17 	ldw	ra,40(sp)
    2358:	df000917 	ldw	fp,36(sp)
    235c:	ddc00817 	ldw	r23,32(sp)
    2360:	dd800717 	ldw	r22,28(sp)
    2364:	dd400617 	ldw	r21,24(sp)
    2368:	dd000517 	ldw	r20,20(sp)
    236c:	dcc00417 	ldw	r19,16(sp)
    2370:	dc800317 	ldw	r18,12(sp)
    2374:	dc400217 	ldw	r17,8(sp)
    2378:	dc000117 	ldw	r16,4(sp)
    237c:	dec00b04 	addi	sp,sp,44
    2380:	f800283a 	ret
    2384:	90002b1e 	bne	r18,zero,2434 <__divsf3+0x244>
    2388:	04000104 	movi	r16,4
    238c:	05c00044 	movi	r23,1
    2390:	003fb106 	br	2258 <__alt_data_end+0xf8002258>
    2394:	8800251e 	bne	r17,zero,242c <__divsf3+0x23c>
    2398:	01400084 	movi	r5,2
    239c:	00000206 	br	23a8 <__divsf3+0x1b8>
    23a0:	88001a1e 	bne	r17,zero,240c <__divsf3+0x21c>
    23a4:	01400044 	movi	r5,1
    23a8:	8160b03a 	or	r16,r16,r5
    23ac:	802090ba 	slli	r16,r16,2
    23b0:	00c00034 	movhi	r3,0
    23b4:	18c8f304 	addi	r3,r3,9164
    23b8:	80e1883a 	add	r16,r16,r3
    23bc:	80c00017 	ldw	r3,0(r16)
    23c0:	9d44f03a 	xor	r2,r19,r21
    23c4:	a18dc83a 	sub	r6,r20,r6
    23c8:	1800683a 	jmp	r3
    23cc:	00002324 	muli	zero,zero,140
    23d0:	00002324 	muli	zero,zero,140
    23d4:	00002570 	cmpltui	zero,zero,149
    23d8:	0000230c 	andi	zero,zero,140
    23dc:	00002570 	cmpltui	zero,zero,149
    23e0:	0000246c 	andhi	zero,zero,145
    23e4:	00002570 	cmpltui	zero,zero,149
    23e8:	0000230c 	andi	zero,zero,140
    23ec:	00002324 	muli	zero,zero,140
    23f0:	00002324 	muli	zero,zero,140
    23f4:	0000246c 	andhi	zero,zero,145
    23f8:	0000230c 	andi	zero,zero,140
    23fc:	00002580 	call	258 <main+0x4c>
    2400:	00002580 	call	258 <main+0x4c>
    2404:	00002580 	call	258 <main+0x4c>
    2408:	00002598 	cmpnei	zero,zero,150
    240c:	8809883a 	mov	r4,r17
    2410:	00044a40 	call	44a4 <__clzsi2>
    2414:	10fffec4 	addi	r3,r2,-5
    2418:	10801d84 	addi	r2,r2,118
    241c:	88e2983a 	sll	r17,r17,r3
    2420:	008dc83a 	sub	r6,zero,r2
    2424:	000b883a 	mov	r5,zero
    2428:	003f9906 	br	2290 <__alt_data_end+0xf8002290>
    242c:	014000c4 	movi	r5,3
    2430:	003f9706 	br	2290 <__alt_data_end+0xf8002290>
    2434:	9009883a 	mov	r4,r18
    2438:	d9400015 	stw	r5,0(sp)
    243c:	00044a40 	call	44a4 <__clzsi2>
    2440:	10fffec4 	addi	r3,r2,-5
    2444:	11801d84 	addi	r6,r2,118
    2448:	90e4983a 	sll	r18,r18,r3
    244c:	01a9c83a 	sub	r20,zero,r6
    2450:	0021883a 	mov	r16,zero
    2454:	002f883a 	mov	r23,zero
    2458:	d9400017 	ldw	r5,0(sp)
    245c:	003f7e06 	br	2258 <__alt_data_end+0xf8002258>
    2460:	04000304 	movi	r16,12
    2464:	05c000c4 	movi	r23,3
    2468:	003f7b06 	br	2258 <__alt_data_end+0xf8002258>
    246c:	01802034 	movhi	r6,128
    2470:	000f883a 	mov	r7,zero
    2474:	31bfffc4 	addi	r6,r6,-1
    2478:	013fffc4 	movi	r4,-1
    247c:	003fac06 	br	2330 <__alt_data_end+0xf8002330>
    2480:	01400044 	movi	r5,1
    2484:	2909c83a 	sub	r4,r5,r4
    2488:	00c006c4 	movi	r3,27
    248c:	19004b0e 	bge	r3,r4,25bc <__divsf3+0x3cc>
    2490:	114e703a 	and	r7,r2,r5
    2494:	0009883a 	mov	r4,zero
    2498:	000d883a 	mov	r6,zero
    249c:	003fa406 	br	2330 <__alt_data_end+0xf8002330>
    24a0:	9006917a 	slli	r3,r18,5
    24a4:	8822917a 	slli	r17,r17,5
    24a8:	1c40372e 	bgeu	r3,r17,2588 <__divsf3+0x398>
    24ac:	31bfffc4 	addi	r6,r6,-1
    24b0:	010006c4 	movi	r4,27
    24b4:	000b883a 	mov	r5,zero
    24b8:	180f883a 	mov	r7,r3
    24bc:	294b883a 	add	r5,r5,r5
    24c0:	18c7883a 	add	r3,r3,r3
    24c4:	38000116 	blt	r7,zero,24cc <__divsf3+0x2dc>
    24c8:	1c400236 	bltu	r3,r17,24d4 <__divsf3+0x2e4>
    24cc:	1c47c83a 	sub	r3,r3,r17
    24d0:	29400054 	ori	r5,r5,1
    24d4:	213fffc4 	addi	r4,r4,-1
    24d8:	203ff71e 	bne	r4,zero,24b8 <__alt_data_end+0xf80024b8>
    24dc:	1806c03a 	cmpne	r3,r3,zero
    24e0:	1962b03a 	or	r17,r3,r5
    24e4:	31001fc4 	addi	r4,r6,127
    24e8:	013fe50e 	bge	zero,r4,2480 <__alt_data_end+0xf8002480>
    24ec:	88c001cc 	andi	r3,r17,7
    24f0:	18000426 	beq	r3,zero,2504 <__divsf3+0x314>
    24f4:	88c003cc 	andi	r3,r17,15
    24f8:	01400104 	movi	r5,4
    24fc:	19400126 	beq	r3,r5,2504 <__divsf3+0x314>
    2500:	8963883a 	add	r17,r17,r5
    2504:	88c2002c 	andhi	r3,r17,2048
    2508:	18000426 	beq	r3,zero,251c <__divsf3+0x32c>
    250c:	00fe0034 	movhi	r3,63488
    2510:	18ffffc4 	addi	r3,r3,-1
    2514:	31002004 	addi	r4,r6,128
    2518:	88e2703a 	and	r17,r17,r3
    251c:	00c03f84 	movi	r3,254
    2520:	193f8016 	blt	r3,r4,2324 <__alt_data_end+0xf8002324>
    2524:	880c91ba 	slli	r6,r17,6
    2528:	11c0004c 	andi	r7,r2,1
    252c:	300cd27a 	srli	r6,r6,9
    2530:	003f7f06 	br	2330 <__alt_data_end+0xf8002330>
    2534:	9080102c 	andhi	r2,r18,64
    2538:	10000226 	beq	r2,zero,2544 <__divsf3+0x354>
    253c:	8880102c 	andhi	r2,r17,64
    2540:	10001826 	beq	r2,zero,25a4 <__divsf3+0x3b4>
    2544:	00802034 	movhi	r2,128
    2548:	91801034 	orhi	r6,r18,64
    254c:	10bfffc4 	addi	r2,r2,-1
    2550:	980f883a 	mov	r7,r19
    2554:	308c703a 	and	r6,r6,r2
    2558:	003fc706 	br	2478 <__alt_data_end+0xf8002478>
    255c:	008000c4 	movi	r2,3
    2560:	b8802d26 	beq	r23,r2,2618 <__divsf3+0x428>
    2564:	00c00044 	movi	r3,1
    2568:	b005883a 	mov	r2,r22
    256c:	b8ffdd1e 	bne	r23,r3,24e4 <__alt_data_end+0xf80024e4>
    2570:	11c0004c 	andi	r7,r2,1
    2574:	0009883a 	mov	r4,zero
    2578:	000d883a 	mov	r6,zero
    257c:	003f6c06 	br	2330 <__alt_data_end+0xf8002330>
    2580:	9023883a 	mov	r17,r18
    2584:	003f6406 	br	2318 <__alt_data_end+0xf8002318>
    2588:	1c47c83a 	sub	r3,r3,r17
    258c:	01000684 	movi	r4,26
    2590:	01400044 	movi	r5,1
    2594:	003fc806 	br	24b8 <__alt_data_end+0xf80024b8>
    2598:	9080102c 	andhi	r2,r18,64
    259c:	103fe926 	beq	r2,zero,2544 <__alt_data_end+0xf8002544>
    25a0:	0023883a 	mov	r17,zero
    25a4:	00802034 	movhi	r2,128
    25a8:	89801034 	orhi	r6,r17,64
    25ac:	10bfffc4 	addi	r2,r2,-1
    25b0:	a80f883a 	mov	r7,r21
    25b4:	308c703a 	and	r6,r6,r2
    25b8:	003faf06 	br	2478 <__alt_data_end+0xf8002478>
    25bc:	01c00804 	movi	r7,32
    25c0:	390fc83a 	sub	r7,r7,r4
    25c4:	89ce983a 	sll	r7,r17,r7
    25c8:	890ad83a 	srl	r5,r17,r4
    25cc:	380ec03a 	cmpne	r7,r7,zero
    25d0:	29cab03a 	or	r5,r5,r7
    25d4:	28c001cc 	andi	r3,r5,7
    25d8:	18000426 	beq	r3,zero,25ec <__divsf3+0x3fc>
    25dc:	28c003cc 	andi	r3,r5,15
    25e0:	01000104 	movi	r4,4
    25e4:	19000126 	beq	r3,r4,25ec <__divsf3+0x3fc>
    25e8:	290b883a 	add	r5,r5,r4
    25ec:	28c1002c 	andhi	r3,r5,1024
    25f0:	18000426 	beq	r3,zero,2604 <__divsf3+0x414>
    25f4:	11c0004c 	andi	r7,r2,1
    25f8:	01000044 	movi	r4,1
    25fc:	000d883a 	mov	r6,zero
    2600:	003f4b06 	br	2330 <__alt_data_end+0xf8002330>
    2604:	280a91ba 	slli	r5,r5,6
    2608:	11c0004c 	andi	r7,r2,1
    260c:	0009883a 	mov	r4,zero
    2610:	280cd27a 	srli	r6,r5,9
    2614:	003f4606 	br	2330 <__alt_data_end+0xf8002330>
    2618:	00802034 	movhi	r2,128
    261c:	89801034 	orhi	r6,r17,64
    2620:	10bfffc4 	addi	r2,r2,-1
    2624:	b00f883a 	mov	r7,r22
    2628:	308c703a 	and	r6,r6,r2
    262c:	003f9206 	br	2478 <__alt_data_end+0xf8002478>

00002630 <__gesf2>:
    2630:	2004d5fa 	srli	r2,r4,23
    2634:	2806d5fa 	srli	r3,r5,23
    2638:	01802034 	movhi	r6,128
    263c:	31bfffc4 	addi	r6,r6,-1
    2640:	10803fcc 	andi	r2,r2,255
    2644:	01c03fc4 	movi	r7,255
    2648:	3110703a 	and	r8,r6,r4
    264c:	18c03fcc 	andi	r3,r3,255
    2650:	314c703a 	and	r6,r6,r5
    2654:	2008d7fa 	srli	r4,r4,31
    2658:	280ad7fa 	srli	r5,r5,31
    265c:	11c01926 	beq	r2,r7,26c4 <__gesf2+0x94>
    2660:	01c03fc4 	movi	r7,255
    2664:	19c00f26 	beq	r3,r7,26a4 <__gesf2+0x74>
    2668:	1000061e 	bne	r2,zero,2684 <__gesf2+0x54>
    266c:	400f003a 	cmpeq	r7,r8,zero
    2670:	1800071e 	bne	r3,zero,2690 <__gesf2+0x60>
    2674:	3000061e 	bne	r6,zero,2690 <__gesf2+0x60>
    2678:	0005883a 	mov	r2,zero
    267c:	40000e1e 	bne	r8,zero,26b8 <__gesf2+0x88>
    2680:	f800283a 	ret
    2684:	18000a1e 	bne	r3,zero,26b0 <__gesf2+0x80>
    2688:	30000b26 	beq	r6,zero,26b8 <__gesf2+0x88>
    268c:	000f883a 	mov	r7,zero
    2690:	29403fcc 	andi	r5,r5,255
    2694:	38000726 	beq	r7,zero,26b4 <__gesf2+0x84>
    2698:	28000826 	beq	r5,zero,26bc <__gesf2+0x8c>
    269c:	00800044 	movi	r2,1
    26a0:	f800283a 	ret
    26a4:	303ff026 	beq	r6,zero,2668 <__alt_data_end+0xf8002668>
    26a8:	00bfff84 	movi	r2,-2
    26ac:	f800283a 	ret
    26b0:	29403fcc 	andi	r5,r5,255
    26b4:	21400526 	beq	r4,r5,26cc <__gesf2+0x9c>
    26b8:	203ff826 	beq	r4,zero,269c <__alt_data_end+0xf800269c>
    26bc:	00bfffc4 	movi	r2,-1
    26c0:	f800283a 	ret
    26c4:	403fe626 	beq	r8,zero,2660 <__alt_data_end+0xf8002660>
    26c8:	003ff706 	br	26a8 <__alt_data_end+0xf80026a8>
    26cc:	18bffa16 	blt	r3,r2,26b8 <__alt_data_end+0xf80026b8>
    26d0:	10c00216 	blt	r2,r3,26dc <__gesf2+0xac>
    26d4:	323ff836 	bltu	r6,r8,26b8 <__alt_data_end+0xf80026b8>
    26d8:	4180022e 	bgeu	r8,r6,26e4 <__gesf2+0xb4>
    26dc:	203fef1e 	bne	r4,zero,269c <__alt_data_end+0xf800269c>
    26e0:	003ff606 	br	26bc <__alt_data_end+0xf80026bc>
    26e4:	0005883a 	mov	r2,zero
    26e8:	f800283a 	ret

000026ec <__lesf2>:
    26ec:	2004d5fa 	srli	r2,r4,23
    26f0:	280cd5fa 	srli	r6,r5,23
    26f4:	00c02034 	movhi	r3,128
    26f8:	18ffffc4 	addi	r3,r3,-1
    26fc:	10803fcc 	andi	r2,r2,255
    2700:	01c03fc4 	movi	r7,255
    2704:	1910703a 	and	r8,r3,r4
    2708:	31803fcc 	andi	r6,r6,255
    270c:	1946703a 	and	r3,r3,r5
    2710:	2008d7fa 	srli	r4,r4,31
    2714:	280ad7fa 	srli	r5,r5,31
    2718:	11c01b26 	beq	r2,r7,2788 <__lesf2+0x9c>
    271c:	01c03fc4 	movi	r7,255
    2720:	31c01126 	beq	r6,r7,2768 <__lesf2+0x7c>
    2724:	1000071e 	bne	r2,zero,2744 <__lesf2+0x58>
    2728:	400f003a 	cmpeq	r7,r8,zero
    272c:	21003fcc 	andi	r4,r4,255
    2730:	3000081e 	bne	r6,zero,2754 <__lesf2+0x68>
    2734:	1800071e 	bne	r3,zero,2754 <__lesf2+0x68>
    2738:	0005883a 	mov	r2,zero
    273c:	40000f1e 	bne	r8,zero,277c <__lesf2+0x90>
    2740:	f800283a 	ret
    2744:	21003fcc 	andi	r4,r4,255
    2748:	30000a1e 	bne	r6,zero,2774 <__lesf2+0x88>
    274c:	18000b26 	beq	r3,zero,277c <__lesf2+0x90>
    2750:	000f883a 	mov	r7,zero
    2754:	29403fcc 	andi	r5,r5,255
    2758:	38000726 	beq	r7,zero,2778 <__lesf2+0x8c>
    275c:	28000826 	beq	r5,zero,2780 <__lesf2+0x94>
    2760:	00800044 	movi	r2,1
    2764:	f800283a 	ret
    2768:	183fee26 	beq	r3,zero,2724 <__alt_data_end+0xf8002724>
    276c:	00800084 	movi	r2,2
    2770:	f800283a 	ret
    2774:	29403fcc 	andi	r5,r5,255
    2778:	21400626 	beq	r4,r5,2794 <__lesf2+0xa8>
    277c:	203ff826 	beq	r4,zero,2760 <__alt_data_end+0xf8002760>
    2780:	00bfffc4 	movi	r2,-1
    2784:	f800283a 	ret
    2788:	403fe426 	beq	r8,zero,271c <__alt_data_end+0xf800271c>
    278c:	00800084 	movi	r2,2
    2790:	f800283a 	ret
    2794:	30bff916 	blt	r6,r2,277c <__alt_data_end+0xf800277c>
    2798:	11800216 	blt	r2,r6,27a4 <__lesf2+0xb8>
    279c:	1a3ff736 	bltu	r3,r8,277c <__alt_data_end+0xf800277c>
    27a0:	40c0022e 	bgeu	r8,r3,27ac <__lesf2+0xc0>
    27a4:	203fee1e 	bne	r4,zero,2760 <__alt_data_end+0xf8002760>
    27a8:	003ff506 	br	2780 <__alt_data_end+0xf8002780>
    27ac:	0005883a 	mov	r2,zero
    27b0:	f800283a 	ret

000027b4 <__mulsf3>:
    27b4:	defff504 	addi	sp,sp,-44
    27b8:	dc000115 	stw	r16,4(sp)
    27bc:	2020d5fa 	srli	r16,r4,23
    27c0:	dd400615 	stw	r21,24(sp)
    27c4:	202ad7fa 	srli	r21,r4,31
    27c8:	dc800315 	stw	r18,12(sp)
    27cc:	04802034 	movhi	r18,128
    27d0:	df000915 	stw	fp,36(sp)
    27d4:	dd000515 	stw	r20,20(sp)
    27d8:	94bfffc4 	addi	r18,r18,-1
    27dc:	dfc00a15 	stw	ra,40(sp)
    27e0:	ddc00815 	stw	r23,32(sp)
    27e4:	dd800715 	stw	r22,28(sp)
    27e8:	dcc00415 	stw	r19,16(sp)
    27ec:	dc400215 	stw	r17,8(sp)
    27f0:	84003fcc 	andi	r16,r16,255
    27f4:	9124703a 	and	r18,r18,r4
    27f8:	a829883a 	mov	r20,r21
    27fc:	af003fcc 	andi	fp,r21,255
    2800:	80005426 	beq	r16,zero,2954 <__mulsf3+0x1a0>
    2804:	00803fc4 	movi	r2,255
    2808:	80802f26 	beq	r16,r2,28c8 <__mulsf3+0x114>
    280c:	91002034 	orhi	r4,r18,128
    2810:	202490fa 	slli	r18,r4,3
    2814:	843fe044 	addi	r16,r16,-127
    2818:	0023883a 	mov	r17,zero
    281c:	002f883a 	mov	r23,zero
    2820:	2804d5fa 	srli	r2,r5,23
    2824:	282cd7fa 	srli	r22,r5,31
    2828:	01002034 	movhi	r4,128
    282c:	213fffc4 	addi	r4,r4,-1
    2830:	10803fcc 	andi	r2,r2,255
    2834:	2166703a 	and	r19,r4,r5
    2838:	b1803fcc 	andi	r6,r22,255
    283c:	10004c26 	beq	r2,zero,2970 <__mulsf3+0x1bc>
    2840:	00c03fc4 	movi	r3,255
    2844:	10c04726 	beq	r2,r3,2964 <__mulsf3+0x1b0>
    2848:	99002034 	orhi	r4,r19,128
    284c:	202690fa 	slli	r19,r4,3
    2850:	10bfe044 	addi	r2,r2,-127
    2854:	0007883a 	mov	r3,zero
    2858:	80a1883a 	add	r16,r16,r2
    285c:	010003c4 	movi	r4,15
    2860:	1c44b03a 	or	r2,r3,r17
    2864:	b56af03a 	xor	r21,r22,r21
    2868:	81c00044 	addi	r7,r16,1
    286c:	20806b36 	bltu	r4,r2,2a1c <__mulsf3+0x268>
    2870:	100490ba 	slli	r2,r2,2
    2874:	01000034 	movhi	r4,0
    2878:	210a2204 	addi	r4,r4,10376
    287c:	1105883a 	add	r2,r2,r4
    2880:	10800017 	ldw	r2,0(r2)
    2884:	1000683a 	jmp	r2
    2888:	00002a1c 	xori	zero,zero,168
    288c:	000028dc 	xori	zero,zero,163
    2890:	000028dc 	xori	zero,zero,163
    2894:	000028d8 	cmpnei	zero,zero,163
    2898:	00002a00 	call	2a0 <main+0x94>
    289c:	00002a00 	call	2a0 <main+0x94>
    28a0:	000029ec 	andhi	zero,zero,167
    28a4:	000028d8 	cmpnei	zero,zero,163
    28a8:	00002a00 	call	2a0 <main+0x94>
    28ac:	000029ec 	andhi	zero,zero,167
    28b0:	00002a00 	call	2a0 <main+0x94>
    28b4:	000028d8 	cmpnei	zero,zero,163
    28b8:	00002a0c 	andi	zero,zero,168
    28bc:	00002a0c 	andi	zero,zero,168
    28c0:	00002a0c 	andi	zero,zero,168
    28c4:	00002ae8 	cmpgeui	zero,zero,171
    28c8:	90003b1e 	bne	r18,zero,29b8 <__mulsf3+0x204>
    28cc:	04400204 	movi	r17,8
    28d0:	05c00084 	movi	r23,2
    28d4:	003fd206 	br	2820 <__alt_data_end+0xf8002820>
    28d8:	302b883a 	mov	r21,r6
    28dc:	00800084 	movi	r2,2
    28e0:	18802626 	beq	r3,r2,297c <__mulsf3+0x1c8>
    28e4:	008000c4 	movi	r2,3
    28e8:	1880ab26 	beq	r3,r2,2b98 <__mulsf3+0x3e4>
    28ec:	00800044 	movi	r2,1
    28f0:	1880a21e 	bne	r3,r2,2b7c <__mulsf3+0x3c8>
    28f4:	a829883a 	mov	r20,r21
    28f8:	0007883a 	mov	r3,zero
    28fc:	0009883a 	mov	r4,zero
    2900:	18803fcc 	andi	r2,r3,255
    2904:	100695fa 	slli	r3,r2,23
    2908:	a0803fcc 	andi	r2,r20,255
    290c:	100a97fa 	slli	r5,r2,31
    2910:	00802034 	movhi	r2,128
    2914:	10bfffc4 	addi	r2,r2,-1
    2918:	2084703a 	and	r2,r4,r2
    291c:	10c4b03a 	or	r2,r2,r3
    2920:	1144b03a 	or	r2,r2,r5
    2924:	dfc00a17 	ldw	ra,40(sp)
    2928:	df000917 	ldw	fp,36(sp)
    292c:	ddc00817 	ldw	r23,32(sp)
    2930:	dd800717 	ldw	r22,28(sp)
    2934:	dd400617 	ldw	r21,24(sp)
    2938:	dd000517 	ldw	r20,20(sp)
    293c:	dcc00417 	ldw	r19,16(sp)
    2940:	dc800317 	ldw	r18,12(sp)
    2944:	dc400217 	ldw	r17,8(sp)
    2948:	dc000117 	ldw	r16,4(sp)
    294c:	dec00b04 	addi	sp,sp,44
    2950:	f800283a 	ret
    2954:	90000d1e 	bne	r18,zero,298c <__mulsf3+0x1d8>
    2958:	04400104 	movi	r17,4
    295c:	05c00044 	movi	r23,1
    2960:	003faf06 	br	2820 <__alt_data_end+0xf8002820>
    2964:	9806c03a 	cmpne	r3,r19,zero
    2968:	18c00084 	addi	r3,r3,2
    296c:	003fba06 	br	2858 <__alt_data_end+0xf8002858>
    2970:	9800141e 	bne	r19,zero,29c4 <__mulsf3+0x210>
    2974:	00c00044 	movi	r3,1
    2978:	003fb706 	br	2858 <__alt_data_end+0xf8002858>
    297c:	a829883a 	mov	r20,r21
    2980:	00ffffc4 	movi	r3,-1
    2984:	0009883a 	mov	r4,zero
    2988:	003fdd06 	br	2900 <__alt_data_end+0xf8002900>
    298c:	9009883a 	mov	r4,r18
    2990:	d9400015 	stw	r5,0(sp)
    2994:	00044a40 	call	44a4 <__clzsi2>
    2998:	10fffec4 	addi	r3,r2,-5
    299c:	10801d84 	addi	r2,r2,118
    29a0:	90e4983a 	sll	r18,r18,r3
    29a4:	00a1c83a 	sub	r16,zero,r2
    29a8:	0023883a 	mov	r17,zero
    29ac:	002f883a 	mov	r23,zero
    29b0:	d9400017 	ldw	r5,0(sp)
    29b4:	003f9a06 	br	2820 <__alt_data_end+0xf8002820>
    29b8:	04400304 	movi	r17,12
    29bc:	05c000c4 	movi	r23,3
    29c0:	003f9706 	br	2820 <__alt_data_end+0xf8002820>
    29c4:	9809883a 	mov	r4,r19
    29c8:	d9800015 	stw	r6,0(sp)
    29cc:	00044a40 	call	44a4 <__clzsi2>
    29d0:	10fffec4 	addi	r3,r2,-5
    29d4:	10801d84 	addi	r2,r2,118
    29d8:	98e6983a 	sll	r19,r19,r3
    29dc:	0085c83a 	sub	r2,zero,r2
    29e0:	0007883a 	mov	r3,zero
    29e4:	d9800017 	ldw	r6,0(sp)
    29e8:	003f9b06 	br	2858 <__alt_data_end+0xf8002858>
    29ec:	01002034 	movhi	r4,128
    29f0:	0029883a 	mov	r20,zero
    29f4:	213fffc4 	addi	r4,r4,-1
    29f8:	00ffffc4 	movi	r3,-1
    29fc:	003fc006 	br	2900 <__alt_data_end+0xf8002900>
    2a00:	9027883a 	mov	r19,r18
    2a04:	b807883a 	mov	r3,r23
    2a08:	003fb406 	br	28dc <__alt_data_end+0xf80028dc>
    2a0c:	9027883a 	mov	r19,r18
    2a10:	e02b883a 	mov	r21,fp
    2a14:	b807883a 	mov	r3,r23
    2a18:	003fb006 	br	28dc <__alt_data_end+0xf80028dc>
    2a1c:	9004d43a 	srli	r2,r18,16
    2a20:	9810d43a 	srli	r8,r19,16
    2a24:	94bfffcc 	andi	r18,r18,65535
    2a28:	993fffcc 	andi	r4,r19,65535
    2a2c:	910d383a 	mul	r6,r18,r4
    2a30:	20a7383a 	mul	r19,r4,r2
    2a34:	9225383a 	mul	r18,r18,r8
    2a38:	3006d43a 	srli	r3,r6,16
    2a3c:	1211383a 	mul	r8,r2,r8
    2a40:	94e5883a 	add	r18,r18,r19
    2a44:	1c87883a 	add	r3,r3,r18
    2a48:	1cc0022e 	bgeu	r3,r19,2a54 <__mulsf3+0x2a0>
    2a4c:	00800074 	movhi	r2,1
    2a50:	4091883a 	add	r8,r8,r2
    2a54:	1804943a 	slli	r2,r3,16
    2a58:	31bfffcc 	andi	r6,r6,65535
    2a5c:	1806d43a 	srli	r3,r3,16
    2a60:	1185883a 	add	r2,r2,r6
    2a64:	102691ba 	slli	r19,r2,6
    2a68:	1a07883a 	add	r3,r3,r8
    2a6c:	1004d6ba 	srli	r2,r2,26
    2a70:	180891ba 	slli	r4,r3,6
    2a74:	9826c03a 	cmpne	r19,r19,zero
    2a78:	9884b03a 	or	r2,r19,r2
    2a7c:	1126b03a 	or	r19,r2,r4
    2a80:	9882002c 	andhi	r2,r19,2048
    2a84:	10000426 	beq	r2,zero,2a98 <__mulsf3+0x2e4>
    2a88:	9804d07a 	srli	r2,r19,1
    2a8c:	9900004c 	andi	r4,r19,1
    2a90:	3821883a 	mov	r16,r7
    2a94:	1126b03a 	or	r19,r2,r4
    2a98:	80c01fc4 	addi	r3,r16,127
    2a9c:	00c0210e 	bge	zero,r3,2b24 <__mulsf3+0x370>
    2aa0:	988001cc 	andi	r2,r19,7
    2aa4:	10000426 	beq	r2,zero,2ab8 <__mulsf3+0x304>
    2aa8:	988003cc 	andi	r2,r19,15
    2aac:	01000104 	movi	r4,4
    2ab0:	11000126 	beq	r2,r4,2ab8 <__mulsf3+0x304>
    2ab4:	9927883a 	add	r19,r19,r4
    2ab8:	9882002c 	andhi	r2,r19,2048
    2abc:	10000426 	beq	r2,zero,2ad0 <__mulsf3+0x31c>
    2ac0:	00be0034 	movhi	r2,63488
    2ac4:	10bfffc4 	addi	r2,r2,-1
    2ac8:	80c02004 	addi	r3,r16,128
    2acc:	98a6703a 	and	r19,r19,r2
    2ad0:	00803f84 	movi	r2,254
    2ad4:	10ffa916 	blt	r2,r3,297c <__alt_data_end+0xf800297c>
    2ad8:	980891ba 	slli	r4,r19,6
    2adc:	a829883a 	mov	r20,r21
    2ae0:	2008d27a 	srli	r4,r4,9
    2ae4:	003f8606 	br	2900 <__alt_data_end+0xf8002900>
    2ae8:	9080102c 	andhi	r2,r18,64
    2aec:	10000826 	beq	r2,zero,2b10 <__mulsf3+0x35c>
    2af0:	9880102c 	andhi	r2,r19,64
    2af4:	1000061e 	bne	r2,zero,2b10 <__mulsf3+0x35c>
    2af8:	00802034 	movhi	r2,128
    2afc:	99001034 	orhi	r4,r19,64
    2b00:	10bfffc4 	addi	r2,r2,-1
    2b04:	b029883a 	mov	r20,r22
    2b08:	2088703a 	and	r4,r4,r2
    2b0c:	003fba06 	br	29f8 <__alt_data_end+0xf80029f8>
    2b10:	00802034 	movhi	r2,128
    2b14:	91001034 	orhi	r4,r18,64
    2b18:	10bfffc4 	addi	r2,r2,-1
    2b1c:	2088703a 	and	r4,r4,r2
    2b20:	003fb506 	br	29f8 <__alt_data_end+0xf80029f8>
    2b24:	00800044 	movi	r2,1
    2b28:	10c7c83a 	sub	r3,r2,r3
    2b2c:	008006c4 	movi	r2,27
    2b30:	10ff7016 	blt	r2,r3,28f4 <__alt_data_end+0xf80028f4>
    2b34:	00800804 	movi	r2,32
    2b38:	10c5c83a 	sub	r2,r2,r3
    2b3c:	9884983a 	sll	r2,r19,r2
    2b40:	98c6d83a 	srl	r3,r19,r3
    2b44:	1004c03a 	cmpne	r2,r2,zero
    2b48:	1884b03a 	or	r2,r3,r2
    2b4c:	10c001cc 	andi	r3,r2,7
    2b50:	18000426 	beq	r3,zero,2b64 <__mulsf3+0x3b0>
    2b54:	10c003cc 	andi	r3,r2,15
    2b58:	01000104 	movi	r4,4
    2b5c:	19000126 	beq	r3,r4,2b64 <__mulsf3+0x3b0>
    2b60:	1105883a 	add	r2,r2,r4
    2b64:	10c1002c 	andhi	r3,r2,1024
    2b68:	18000626 	beq	r3,zero,2b84 <__mulsf3+0x3d0>
    2b6c:	a829883a 	mov	r20,r21
    2b70:	00c00044 	movi	r3,1
    2b74:	0009883a 	mov	r4,zero
    2b78:	003f6106 	br	2900 <__alt_data_end+0xf8002900>
    2b7c:	3821883a 	mov	r16,r7
    2b80:	003fc506 	br	2a98 <__alt_data_end+0xf8002a98>
    2b84:	100491ba 	slli	r2,r2,6
    2b88:	a829883a 	mov	r20,r21
    2b8c:	0007883a 	mov	r3,zero
    2b90:	1008d27a 	srli	r4,r2,9
    2b94:	003f5a06 	br	2900 <__alt_data_end+0xf8002900>
    2b98:	00802034 	movhi	r2,128
    2b9c:	99001034 	orhi	r4,r19,64
    2ba0:	10bfffc4 	addi	r2,r2,-1
    2ba4:	a829883a 	mov	r20,r21
    2ba8:	2088703a 	and	r4,r4,r2
    2bac:	003f9206 	br	29f8 <__alt_data_end+0xf80029f8>

00002bb0 <__subsf3>:
    2bb0:	defffc04 	addi	sp,sp,-16
    2bb4:	280cd5fa 	srli	r6,r5,23
    2bb8:	dc000015 	stw	r16,0(sp)
    2bbc:	01c02034 	movhi	r7,128
    2bc0:	2020d5fa 	srli	r16,r4,23
    2bc4:	39ffffc4 	addi	r7,r7,-1
    2bc8:	3906703a 	and	r3,r7,r4
    2bcc:	dc400115 	stw	r17,4(sp)
    2bd0:	394e703a 	and	r7,r7,r5
    2bd4:	2022d7fa 	srli	r17,r4,31
    2bd8:	dfc00315 	stw	ra,12(sp)
    2bdc:	dc800215 	stw	r18,8(sp)
    2be0:	31803fcc 	andi	r6,r6,255
    2be4:	01003fc4 	movi	r4,255
    2be8:	84003fcc 	andi	r16,r16,255
    2bec:	180690fa 	slli	r3,r3,3
    2bf0:	2804d7fa 	srli	r2,r5,31
    2bf4:	380e90fa 	slli	r7,r7,3
    2bf8:	31006d26 	beq	r6,r4,2db0 <__subsf3+0x200>
    2bfc:	1080005c 	xori	r2,r2,1
    2c00:	8189c83a 	sub	r4,r16,r6
    2c04:	14404f26 	beq	r2,r17,2d44 <__subsf3+0x194>
    2c08:	0100770e 	bge	zero,r4,2de8 <__subsf3+0x238>
    2c0c:	30001e1e 	bne	r6,zero,2c88 <__subsf3+0xd8>
    2c10:	38006a1e 	bne	r7,zero,2dbc <__subsf3+0x20c>
    2c14:	188001cc 	andi	r2,r3,7
    2c18:	10000426 	beq	r2,zero,2c2c <__subsf3+0x7c>
    2c1c:	188003cc 	andi	r2,r3,15
    2c20:	01000104 	movi	r4,4
    2c24:	11000126 	beq	r2,r4,2c2c <__subsf3+0x7c>
    2c28:	1907883a 	add	r3,r3,r4
    2c2c:	1881002c 	andhi	r2,r3,1024
    2c30:	10003926 	beq	r2,zero,2d18 <__subsf3+0x168>
    2c34:	84000044 	addi	r16,r16,1
    2c38:	00803fc4 	movi	r2,255
    2c3c:	80807526 	beq	r16,r2,2e14 <__subsf3+0x264>
    2c40:	180691ba 	slli	r3,r3,6
    2c44:	8880004c 	andi	r2,r17,1
    2c48:	180ad27a 	srli	r5,r3,9
    2c4c:	84003fcc 	andi	r16,r16,255
    2c50:	800695fa 	slli	r3,r16,23
    2c54:	10803fcc 	andi	r2,r2,255
    2c58:	01002034 	movhi	r4,128
    2c5c:	213fffc4 	addi	r4,r4,-1
    2c60:	100497fa 	slli	r2,r2,31
    2c64:	2920703a 	and	r16,r5,r4
    2c68:	80e0b03a 	or	r16,r16,r3
    2c6c:	8084b03a 	or	r2,r16,r2
    2c70:	dfc00317 	ldw	ra,12(sp)
    2c74:	dc800217 	ldw	r18,8(sp)
    2c78:	dc400117 	ldw	r17,4(sp)
    2c7c:	dc000017 	ldw	r16,0(sp)
    2c80:	dec00404 	addi	sp,sp,16
    2c84:	f800283a 	ret
    2c88:	00803fc4 	movi	r2,255
    2c8c:	80bfe126 	beq	r16,r2,2c14 <__alt_data_end+0xf8002c14>
    2c90:	39c10034 	orhi	r7,r7,1024
    2c94:	008006c4 	movi	r2,27
    2c98:	11007416 	blt	r2,r4,2e6c <__subsf3+0x2bc>
    2c9c:	00800804 	movi	r2,32
    2ca0:	1105c83a 	sub	r2,r2,r4
    2ca4:	3884983a 	sll	r2,r7,r2
    2ca8:	390ed83a 	srl	r7,r7,r4
    2cac:	1008c03a 	cmpne	r4,r2,zero
    2cb0:	390eb03a 	or	r7,r7,r4
    2cb4:	19c7c83a 	sub	r3,r3,r7
    2cb8:	1881002c 	andhi	r2,r3,1024
    2cbc:	10001426 	beq	r2,zero,2d10 <__subsf3+0x160>
    2cc0:	04810034 	movhi	r18,1024
    2cc4:	94bfffc4 	addi	r18,r18,-1
    2cc8:	1ca4703a 	and	r18,r3,r18
    2ccc:	9009883a 	mov	r4,r18
    2cd0:	00044a40 	call	44a4 <__clzsi2>
    2cd4:	10bffec4 	addi	r2,r2,-5
    2cd8:	90a4983a 	sll	r18,r18,r2
    2cdc:	14005116 	blt	r2,r16,2e24 <__subsf3+0x274>
    2ce0:	1405c83a 	sub	r2,r2,r16
    2ce4:	10c00044 	addi	r3,r2,1
    2ce8:	00800804 	movi	r2,32
    2cec:	10c5c83a 	sub	r2,r2,r3
    2cf0:	9084983a 	sll	r2,r18,r2
    2cf4:	90e4d83a 	srl	r18,r18,r3
    2cf8:	0021883a 	mov	r16,zero
    2cfc:	1006c03a 	cmpne	r3,r2,zero
    2d00:	90c6b03a 	or	r3,r18,r3
    2d04:	003fc306 	br	2c14 <__alt_data_end+0xf8002c14>
    2d08:	2000e026 	beq	r4,zero,308c <__subsf3+0x4dc>
    2d0c:	2007883a 	mov	r3,r4
    2d10:	188001cc 	andi	r2,r3,7
    2d14:	103fc11e 	bne	r2,zero,2c1c <__alt_data_end+0xf8002c1c>
    2d18:	180ad0fa 	srli	r5,r3,3
    2d1c:	00c03fc4 	movi	r3,255
    2d20:	8880004c 	andi	r2,r17,1
    2d24:	80c0031e 	bne	r16,r3,2d34 <__subsf3+0x184>
    2d28:	28006d26 	beq	r5,zero,2ee0 <__subsf3+0x330>
    2d2c:	29401034 	orhi	r5,r5,64
    2d30:	043fffc4 	movi	r16,-1
    2d34:	00c02034 	movhi	r3,128
    2d38:	18ffffc4 	addi	r3,r3,-1
    2d3c:	28ca703a 	and	r5,r5,r3
    2d40:	003fc206 	br	2c4c <__alt_data_end+0xf8002c4c>
    2d44:	01003c0e 	bge	zero,r4,2e38 <__subsf3+0x288>
    2d48:	30002126 	beq	r6,zero,2dd0 <__subsf3+0x220>
    2d4c:	01403fc4 	movi	r5,255
    2d50:	817fb026 	beq	r16,r5,2c14 <__alt_data_end+0xf8002c14>
    2d54:	39c10034 	orhi	r7,r7,1024
    2d58:	014006c4 	movi	r5,27
    2d5c:	29007416 	blt	r5,r4,2f30 <__subsf3+0x380>
    2d60:	01400804 	movi	r5,32
    2d64:	290bc83a 	sub	r5,r5,r4
    2d68:	394a983a 	sll	r5,r7,r5
    2d6c:	390ed83a 	srl	r7,r7,r4
    2d70:	2808c03a 	cmpne	r4,r5,zero
    2d74:	390eb03a 	or	r7,r7,r4
    2d78:	19c7883a 	add	r3,r3,r7
    2d7c:	1901002c 	andhi	r4,r3,1024
    2d80:	20003826 	beq	r4,zero,2e64 <__subsf3+0x2b4>
    2d84:	84000044 	addi	r16,r16,1
    2d88:	01003fc4 	movi	r4,255
    2d8c:	81005426 	beq	r16,r4,2ee0 <__subsf3+0x330>
    2d90:	1023883a 	mov	r17,r2
    2d94:	00bf0034 	movhi	r2,64512
    2d98:	10bfffc4 	addi	r2,r2,-1
    2d9c:	1900004c 	andi	r4,r3,1
    2da0:	1886703a 	and	r3,r3,r2
    2da4:	1806d07a 	srli	r3,r3,1
    2da8:	1906b03a 	or	r3,r3,r4
    2dac:	003f9906 	br	2c14 <__alt_data_end+0xf8002c14>
    2db0:	383f9226 	beq	r7,zero,2bfc <__alt_data_end+0xf8002bfc>
    2db4:	10803fcc 	andi	r2,r2,255
    2db8:	003f9106 	br	2c00 <__alt_data_end+0xf8002c00>
    2dbc:	213fffc4 	addi	r4,r4,-1
    2dc0:	203fbc26 	beq	r4,zero,2cb4 <__alt_data_end+0xf8002cb4>
    2dc4:	00803fc4 	movi	r2,255
    2dc8:	80bfb21e 	bne	r16,r2,2c94 <__alt_data_end+0xf8002c94>
    2dcc:	003f9106 	br	2c14 <__alt_data_end+0xf8002c14>
    2dd0:	383f9026 	beq	r7,zero,2c14 <__alt_data_end+0xf8002c14>
    2dd4:	213fffc4 	addi	r4,r4,-1
    2dd8:	203fe726 	beq	r4,zero,2d78 <__alt_data_end+0xf8002d78>
    2ddc:	01403fc4 	movi	r5,255
    2de0:	817fdd1e 	bne	r16,r5,2d58 <__alt_data_end+0xf8002d58>
    2de4:	003f8b06 	br	2c14 <__alt_data_end+0xf8002c14>
    2de8:	2000221e 	bne	r4,zero,2e74 <__subsf3+0x2c4>
    2dec:	81000044 	addi	r4,r16,1
    2df0:	21003fcc 	andi	r4,r4,255
    2df4:	01400044 	movi	r5,1
    2df8:	2900470e 	bge	r5,r4,2f18 <__subsf3+0x368>
    2dfc:	19e5c83a 	sub	r18,r3,r7
    2e00:	9141002c 	andhi	r5,r18,1024
    2e04:	28002d26 	beq	r5,zero,2ebc <__subsf3+0x30c>
    2e08:	38e5c83a 	sub	r18,r7,r3
    2e0c:	1023883a 	mov	r17,r2
    2e10:	003fae06 	br	2ccc <__alt_data_end+0xf8002ccc>
    2e14:	8880004c 	andi	r2,r17,1
    2e18:	043fffc4 	movi	r16,-1
    2e1c:	000b883a 	mov	r5,zero
    2e20:	003f8a06 	br	2c4c <__alt_data_end+0xf8002c4c>
    2e24:	00ff0034 	movhi	r3,64512
    2e28:	18ffffc4 	addi	r3,r3,-1
    2e2c:	80a1c83a 	sub	r16,r16,r2
    2e30:	90c6703a 	and	r3,r18,r3
    2e34:	003f7706 	br	2c14 <__alt_data_end+0xf8002c14>
    2e38:	2000431e 	bne	r4,zero,2f48 <__subsf3+0x398>
    2e3c:	81000044 	addi	r4,r16,1
    2e40:	21803fcc 	andi	r6,r4,255
    2e44:	01400044 	movi	r5,1
    2e48:	2980280e 	bge	r5,r6,2eec <__subsf3+0x33c>
    2e4c:	01403fc4 	movi	r5,255
    2e50:	21402326 	beq	r4,r5,2ee0 <__subsf3+0x330>
    2e54:	19c7883a 	add	r3,r3,r7
    2e58:	1806d07a 	srli	r3,r3,1
    2e5c:	2021883a 	mov	r16,r4
    2e60:	003f6c06 	br	2c14 <__alt_data_end+0xf8002c14>
    2e64:	1023883a 	mov	r17,r2
    2e68:	003fa906 	br	2d10 <__alt_data_end+0xf8002d10>
    2e6c:	01c00044 	movi	r7,1
    2e70:	003f9006 	br	2cb4 <__alt_data_end+0xf8002cb4>
    2e74:	8000151e 	bne	r16,zero,2ecc <__subsf3+0x31c>
    2e78:	18002f26 	beq	r3,zero,2f38 <__subsf3+0x388>
    2e7c:	0108303a 	nor	r4,zero,r4
    2e80:	20000a26 	beq	r4,zero,2eac <__subsf3+0x2fc>
    2e84:	01403fc4 	movi	r5,255
    2e88:	31402b26 	beq	r6,r5,2f38 <__subsf3+0x388>
    2e8c:	014006c4 	movi	r5,27
    2e90:	29006e16 	blt	r5,r4,304c <__subsf3+0x49c>
    2e94:	01400804 	movi	r5,32
    2e98:	290bc83a 	sub	r5,r5,r4
    2e9c:	194a983a 	sll	r5,r3,r5
    2ea0:	1908d83a 	srl	r4,r3,r4
    2ea4:	2806c03a 	cmpne	r3,r5,zero
    2ea8:	20c6b03a 	or	r3,r4,r3
    2eac:	38c7c83a 	sub	r3,r7,r3
    2eb0:	3021883a 	mov	r16,r6
    2eb4:	1023883a 	mov	r17,r2
    2eb8:	003f7f06 	br	2cb8 <__alt_data_end+0xf8002cb8>
    2ebc:	903f831e 	bne	r18,zero,2ccc <__alt_data_end+0xf8002ccc>
    2ec0:	0005883a 	mov	r2,zero
    2ec4:	0021883a 	mov	r16,zero
    2ec8:	003f9a06 	br	2d34 <__alt_data_end+0xf8002d34>
    2ecc:	01403fc4 	movi	r5,255
    2ed0:	31401926 	beq	r6,r5,2f38 <__subsf3+0x388>
    2ed4:	0109c83a 	sub	r4,zero,r4
    2ed8:	18c10034 	orhi	r3,r3,1024
    2edc:	003feb06 	br	2e8c <__alt_data_end+0xf8002e8c>
    2ee0:	043fffc4 	movi	r16,-1
    2ee4:	000b883a 	mov	r5,zero
    2ee8:	003f5806 	br	2c4c <__alt_data_end+0xf8002c4c>
    2eec:	8000481e 	bne	r16,zero,3010 <__subsf3+0x460>
    2ef0:	18006226 	beq	r3,zero,307c <__subsf3+0x4cc>
    2ef4:	383f4726 	beq	r7,zero,2c14 <__alt_data_end+0xf8002c14>
    2ef8:	19c7883a 	add	r3,r3,r7
    2efc:	1881002c 	andhi	r2,r3,1024
    2f00:	103f8326 	beq	r2,zero,2d10 <__alt_data_end+0xf8002d10>
    2f04:	00bf0034 	movhi	r2,64512
    2f08:	10bfffc4 	addi	r2,r2,-1
    2f0c:	2821883a 	mov	r16,r5
    2f10:	1886703a 	and	r3,r3,r2
    2f14:	003f3f06 	br	2c14 <__alt_data_end+0xf8002c14>
    2f18:	80001c1e 	bne	r16,zero,2f8c <__subsf3+0x3dc>
    2f1c:	1800261e 	bne	r3,zero,2fb8 <__subsf3+0x408>
    2f20:	38004c26 	beq	r7,zero,3054 <__subsf3+0x4a4>
    2f24:	3807883a 	mov	r3,r7
    2f28:	1023883a 	mov	r17,r2
    2f2c:	003f3906 	br	2c14 <__alt_data_end+0xf8002c14>
    2f30:	01c00044 	movi	r7,1
    2f34:	003f9006 	br	2d78 <__alt_data_end+0xf8002d78>
    2f38:	3807883a 	mov	r3,r7
    2f3c:	3021883a 	mov	r16,r6
    2f40:	1023883a 	mov	r17,r2
    2f44:	003f3306 	br	2c14 <__alt_data_end+0xf8002c14>
    2f48:	8000161e 	bne	r16,zero,2fa4 <__subsf3+0x3f4>
    2f4c:	18002d26 	beq	r3,zero,3004 <__subsf3+0x454>
    2f50:	0108303a 	nor	r4,zero,r4
    2f54:	20000a26 	beq	r4,zero,2f80 <__subsf3+0x3d0>
    2f58:	01403fc4 	movi	r5,255
    2f5c:	31402926 	beq	r6,r5,3004 <__subsf3+0x454>
    2f60:	014006c4 	movi	r5,27
    2f64:	29004716 	blt	r5,r4,3084 <__subsf3+0x4d4>
    2f68:	01400804 	movi	r5,32
    2f6c:	290bc83a 	sub	r5,r5,r4
    2f70:	194a983a 	sll	r5,r3,r5
    2f74:	1908d83a 	srl	r4,r3,r4
    2f78:	2806c03a 	cmpne	r3,r5,zero
    2f7c:	20c6b03a 	or	r3,r4,r3
    2f80:	19c7883a 	add	r3,r3,r7
    2f84:	3021883a 	mov	r16,r6
    2f88:	003f7c06 	br	2d7c <__alt_data_end+0xf8002d7c>
    2f8c:	1800111e 	bne	r3,zero,2fd4 <__subsf3+0x424>
    2f90:	38003326 	beq	r7,zero,3060 <__subsf3+0x4b0>
    2f94:	3807883a 	mov	r3,r7
    2f98:	1023883a 	mov	r17,r2
    2f9c:	04003fc4 	movi	r16,255
    2fa0:	003f1c06 	br	2c14 <__alt_data_end+0xf8002c14>
    2fa4:	01403fc4 	movi	r5,255
    2fa8:	31401626 	beq	r6,r5,3004 <__subsf3+0x454>
    2fac:	0109c83a 	sub	r4,zero,r4
    2fb0:	18c10034 	orhi	r3,r3,1024
    2fb4:	003fea06 	br	2f60 <__alt_data_end+0xf8002f60>
    2fb8:	383f1626 	beq	r7,zero,2c14 <__alt_data_end+0xf8002c14>
    2fbc:	19c9c83a 	sub	r4,r3,r7
    2fc0:	2141002c 	andhi	r5,r4,1024
    2fc4:	283f5026 	beq	r5,zero,2d08 <__alt_data_end+0xf8002d08>
    2fc8:	38c7c83a 	sub	r3,r7,r3
    2fcc:	1023883a 	mov	r17,r2
    2fd0:	003f1006 	br	2c14 <__alt_data_end+0xf8002c14>
    2fd4:	38001b26 	beq	r7,zero,3044 <__subsf3+0x494>
    2fd8:	1806d0fa 	srli	r3,r3,3
    2fdc:	1900102c 	andhi	r4,r3,64
    2fe0:	20000526 	beq	r4,zero,2ff8 <__subsf3+0x448>
    2fe4:	380ed0fa 	srli	r7,r7,3
    2fe8:	3900102c 	andhi	r4,r7,64
    2fec:	2000021e 	bne	r4,zero,2ff8 <__subsf3+0x448>
    2ff0:	3807883a 	mov	r3,r7
    2ff4:	1023883a 	mov	r17,r2
    2ff8:	180690fa 	slli	r3,r3,3
    2ffc:	04003fc4 	movi	r16,255
    3000:	003f0406 	br	2c14 <__alt_data_end+0xf8002c14>
    3004:	3807883a 	mov	r3,r7
    3008:	3021883a 	mov	r16,r6
    300c:	003f0106 	br	2c14 <__alt_data_end+0xf8002c14>
    3010:	18001726 	beq	r3,zero,3070 <__subsf3+0x4c0>
    3014:	38000b26 	beq	r7,zero,3044 <__subsf3+0x494>
    3018:	1806d0fa 	srli	r3,r3,3
    301c:	1900102c 	andhi	r4,r3,64
    3020:	20000426 	beq	r4,zero,3034 <__subsf3+0x484>
    3024:	380ed0fa 	srli	r7,r7,3
    3028:	3900102c 	andhi	r4,r7,64
    302c:	2000011e 	bne	r4,zero,3034 <__subsf3+0x484>
    3030:	3807883a 	mov	r3,r7
    3034:	180690fa 	slli	r3,r3,3
    3038:	1023883a 	mov	r17,r2
    303c:	04003fc4 	movi	r16,255
    3040:	003ef406 	br	2c14 <__alt_data_end+0xf8002c14>
    3044:	04003fc4 	movi	r16,255
    3048:	003ef206 	br	2c14 <__alt_data_end+0xf8002c14>
    304c:	00c00044 	movi	r3,1
    3050:	003f9606 	br	2eac <__alt_data_end+0xf8002eac>
    3054:	000b883a 	mov	r5,zero
    3058:	0005883a 	mov	r2,zero
    305c:	003f3506 	br	2d34 <__alt_data_end+0xf8002d34>
    3060:	01402034 	movhi	r5,128
    3064:	297fffc4 	addi	r5,r5,-1
    3068:	0005883a 	mov	r2,zero
    306c:	003f2f06 	br	2d2c <__alt_data_end+0xf8002d2c>
    3070:	3807883a 	mov	r3,r7
    3074:	04003fc4 	movi	r16,255
    3078:	003ee606 	br	2c14 <__alt_data_end+0xf8002c14>
    307c:	3807883a 	mov	r3,r7
    3080:	003ee406 	br	2c14 <__alt_data_end+0xf8002c14>
    3084:	00c00044 	movi	r3,1
    3088:	003fbd06 	br	2f80 <__alt_data_end+0xf8002f80>
    308c:	0005883a 	mov	r2,zero
    3090:	003f2806 	br	2d34 <__alt_data_end+0xf8002d34>

00003094 <__fixsfsi>:
    3094:	200ad5fa 	srli	r5,r4,23
    3098:	00c02034 	movhi	r3,128
    309c:	18ffffc4 	addi	r3,r3,-1
    30a0:	29403fcc 	andi	r5,r5,255
    30a4:	00801f84 	movi	r2,126
    30a8:	1906703a 	and	r3,r3,r4
    30ac:	2008d7fa 	srli	r4,r4,31
    30b0:	11400e0e 	bge	r2,r5,30ec <__fixsfsi+0x58>
    30b4:	00802744 	movi	r2,157
    30b8:	11400816 	blt	r2,r5,30dc <__fixsfsi+0x48>
    30bc:	00802544 	movi	r2,149
    30c0:	18c02034 	orhi	r3,r3,128
    30c4:	11400b0e 	bge	r2,r5,30f4 <__fixsfsi+0x60>
    30c8:	28bfda84 	addi	r2,r5,-150
    30cc:	1884983a 	sll	r2,r3,r2
    30d0:	20000726 	beq	r4,zero,30f0 <__fixsfsi+0x5c>
    30d4:	0085c83a 	sub	r2,zero,r2
    30d8:	f800283a 	ret
    30dc:	00a00034 	movhi	r2,32768
    30e0:	10bfffc4 	addi	r2,r2,-1
    30e4:	2085883a 	add	r2,r4,r2
    30e8:	f800283a 	ret
    30ec:	0005883a 	mov	r2,zero
    30f0:	f800283a 	ret
    30f4:	00802584 	movi	r2,150
    30f8:	1145c83a 	sub	r2,r2,r5
    30fc:	1884d83a 	srl	r2,r3,r2
    3100:	003ff306 	br	30d0 <__alt_data_end+0xf80030d0>

00003104 <__floatsisf>:
    3104:	defffd04 	addi	sp,sp,-12
    3108:	dfc00215 	stw	ra,8(sp)
    310c:	dc400115 	stw	r17,4(sp)
    3110:	dc000015 	stw	r16,0(sp)
    3114:	20003526 	beq	r4,zero,31ec <__floatsisf+0xe8>
    3118:	2021883a 	mov	r16,r4
    311c:	2022d7fa 	srli	r17,r4,31
    3120:	20003616 	blt	r4,zero,31fc <__floatsisf+0xf8>
    3124:	8009883a 	mov	r4,r16
    3128:	00044a40 	call	44a4 <__clzsi2>
    312c:	00c02784 	movi	r3,158
    3130:	1887c83a 	sub	r3,r3,r2
    3134:	01002584 	movi	r4,150
    3138:	20c01416 	blt	r4,r3,318c <__floatsisf+0x88>
    313c:	20c9c83a 	sub	r4,r4,r3
    3140:	8120983a 	sll	r16,r16,r4
    3144:	00802034 	movhi	r2,128
    3148:	10bfffc4 	addi	r2,r2,-1
    314c:	8809883a 	mov	r4,r17
    3150:	80a0703a 	and	r16,r16,r2
    3154:	18803fcc 	andi	r2,r3,255
    3158:	100695fa 	slli	r3,r2,23
    315c:	20803fcc 	andi	r2,r4,255
    3160:	100897fa 	slli	r4,r2,31
    3164:	00802034 	movhi	r2,128
    3168:	10bfffc4 	addi	r2,r2,-1
    316c:	8084703a 	and	r2,r16,r2
    3170:	10c4b03a 	or	r2,r2,r3
    3174:	1104b03a 	or	r2,r2,r4
    3178:	dfc00217 	ldw	ra,8(sp)
    317c:	dc400117 	ldw	r17,4(sp)
    3180:	dc000017 	ldw	r16,0(sp)
    3184:	dec00304 	addi	sp,sp,12
    3188:	f800283a 	ret
    318c:	01002644 	movi	r4,153
    3190:	20c01c16 	blt	r4,r3,3204 <__floatsisf+0x100>
    3194:	20c9c83a 	sub	r4,r4,r3
    3198:	8120983a 	sll	r16,r16,r4
    319c:	013f0034 	movhi	r4,64512
    31a0:	213fffc4 	addi	r4,r4,-1
    31a4:	814001cc 	andi	r5,r16,7
    31a8:	8108703a 	and	r4,r16,r4
    31ac:	28000426 	beq	r5,zero,31c0 <__floatsisf+0xbc>
    31b0:	840003cc 	andi	r16,r16,15
    31b4:	01400104 	movi	r5,4
    31b8:	81400126 	beq	r16,r5,31c0 <__floatsisf+0xbc>
    31bc:	2149883a 	add	r4,r4,r5
    31c0:	2141002c 	andhi	r5,r4,1024
    31c4:	28000526 	beq	r5,zero,31dc <__floatsisf+0xd8>
    31c8:	00c027c4 	movi	r3,159
    31cc:	1887c83a 	sub	r3,r3,r2
    31d0:	00bf0034 	movhi	r2,64512
    31d4:	10bfffc4 	addi	r2,r2,-1
    31d8:	2088703a 	and	r4,r4,r2
    31dc:	202091ba 	slli	r16,r4,6
    31e0:	8809883a 	mov	r4,r17
    31e4:	8020d27a 	srli	r16,r16,9
    31e8:	003fda06 	br	3154 <__alt_data_end+0xf8003154>
    31ec:	0009883a 	mov	r4,zero
    31f0:	0007883a 	mov	r3,zero
    31f4:	0021883a 	mov	r16,zero
    31f8:	003fd606 	br	3154 <__alt_data_end+0xf8003154>
    31fc:	0121c83a 	sub	r16,zero,r4
    3200:	003fc806 	br	3124 <__alt_data_end+0xf8003124>
    3204:	01002e44 	movi	r4,185
    3208:	20c9c83a 	sub	r4,r4,r3
    320c:	01400144 	movi	r5,5
    3210:	8108983a 	sll	r4,r16,r4
    3214:	288bc83a 	sub	r5,r5,r2
    3218:	8160d83a 	srl	r16,r16,r5
    321c:	2008c03a 	cmpne	r4,r4,zero
    3220:	8120b03a 	or	r16,r16,r4
    3224:	003fdd06 	br	319c <__alt_data_end+0xf800319c>

00003228 <__adddf3>:
    3228:	02c00434 	movhi	r11,16
    322c:	5affffc4 	addi	r11,r11,-1
    3230:	2806d7fa 	srli	r3,r5,31
    3234:	2ad4703a 	and	r10,r5,r11
    3238:	3ad2703a 	and	r9,r7,r11
    323c:	3804d53a 	srli	r2,r7,20
    3240:	3018d77a 	srli	r12,r6,29
    3244:	280ad53a 	srli	r5,r5,20
    3248:	501490fa 	slli	r10,r10,3
    324c:	2010d77a 	srli	r8,r4,29
    3250:	481290fa 	slli	r9,r9,3
    3254:	380ed7fa 	srli	r7,r7,31
    3258:	defffb04 	addi	sp,sp,-20
    325c:	dc800215 	stw	r18,8(sp)
    3260:	dc400115 	stw	r17,4(sp)
    3264:	dc000015 	stw	r16,0(sp)
    3268:	dfc00415 	stw	ra,16(sp)
    326c:	dcc00315 	stw	r19,12(sp)
    3270:	1c803fcc 	andi	r18,r3,255
    3274:	2c01ffcc 	andi	r16,r5,2047
    3278:	5210b03a 	or	r8,r10,r8
    327c:	202290fa 	slli	r17,r4,3
    3280:	1081ffcc 	andi	r2,r2,2047
    3284:	4b12b03a 	or	r9,r9,r12
    3288:	300c90fa 	slli	r6,r6,3
    328c:	91c07526 	beq	r18,r7,3464 <__adddf3+0x23c>
    3290:	8087c83a 	sub	r3,r16,r2
    3294:	00c0ab0e 	bge	zero,r3,3544 <__adddf3+0x31c>
    3298:	10002a1e 	bne	r2,zero,3344 <__adddf3+0x11c>
    329c:	4984b03a 	or	r2,r9,r6
    32a0:	1000961e 	bne	r2,zero,34fc <__adddf3+0x2d4>
    32a4:	888001cc 	andi	r2,r17,7
    32a8:	10000726 	beq	r2,zero,32c8 <__adddf3+0xa0>
    32ac:	888003cc 	andi	r2,r17,15
    32b0:	00c00104 	movi	r3,4
    32b4:	10c00426 	beq	r2,r3,32c8 <__adddf3+0xa0>
    32b8:	88c7883a 	add	r3,r17,r3
    32bc:	1c63803a 	cmpltu	r17,r3,r17
    32c0:	4451883a 	add	r8,r8,r17
    32c4:	1823883a 	mov	r17,r3
    32c8:	4080202c 	andhi	r2,r8,128
    32cc:	10005926 	beq	r2,zero,3434 <__adddf3+0x20c>
    32d0:	84000044 	addi	r16,r16,1
    32d4:	0081ffc4 	movi	r2,2047
    32d8:	8080ba26 	beq	r16,r2,35c4 <__adddf3+0x39c>
    32dc:	00bfe034 	movhi	r2,65408
    32e0:	10bfffc4 	addi	r2,r2,-1
    32e4:	4090703a 	and	r8,r8,r2
    32e8:	4004977a 	slli	r2,r8,29
    32ec:	4010927a 	slli	r8,r8,9
    32f0:	8822d0fa 	srli	r17,r17,3
    32f4:	8401ffcc 	andi	r16,r16,2047
    32f8:	4010d33a 	srli	r8,r8,12
    32fc:	9007883a 	mov	r3,r18
    3300:	1444b03a 	or	r2,r2,r17
    3304:	8401ffcc 	andi	r16,r16,2047
    3308:	8020953a 	slli	r16,r16,20
    330c:	18c03fcc 	andi	r3,r3,255
    3310:	01000434 	movhi	r4,16
    3314:	213fffc4 	addi	r4,r4,-1
    3318:	180697fa 	slli	r3,r3,31
    331c:	4110703a 	and	r8,r8,r4
    3320:	4410b03a 	or	r8,r8,r16
    3324:	40c6b03a 	or	r3,r8,r3
    3328:	dfc00417 	ldw	ra,16(sp)
    332c:	dcc00317 	ldw	r19,12(sp)
    3330:	dc800217 	ldw	r18,8(sp)
    3334:	dc400117 	ldw	r17,4(sp)
    3338:	dc000017 	ldw	r16,0(sp)
    333c:	dec00504 	addi	sp,sp,20
    3340:	f800283a 	ret
    3344:	0081ffc4 	movi	r2,2047
    3348:	80bfd626 	beq	r16,r2,32a4 <__alt_data_end+0xf80032a4>
    334c:	4a402034 	orhi	r9,r9,128
    3350:	00800e04 	movi	r2,56
    3354:	10c09f16 	blt	r2,r3,35d4 <__adddf3+0x3ac>
    3358:	008007c4 	movi	r2,31
    335c:	10c0c216 	blt	r2,r3,3668 <__adddf3+0x440>
    3360:	00800804 	movi	r2,32
    3364:	10c5c83a 	sub	r2,r2,r3
    3368:	488a983a 	sll	r5,r9,r2
    336c:	30c8d83a 	srl	r4,r6,r3
    3370:	3084983a 	sll	r2,r6,r2
    3374:	48c6d83a 	srl	r3,r9,r3
    3378:	290cb03a 	or	r6,r5,r4
    337c:	1004c03a 	cmpne	r2,r2,zero
    3380:	308cb03a 	or	r6,r6,r2
    3384:	898dc83a 	sub	r6,r17,r6
    3388:	89a3803a 	cmpltu	r17,r17,r6
    338c:	40d1c83a 	sub	r8,r8,r3
    3390:	4451c83a 	sub	r8,r8,r17
    3394:	3023883a 	mov	r17,r6
    3398:	4080202c 	andhi	r2,r8,128
    339c:	10002326 	beq	r2,zero,342c <__adddf3+0x204>
    33a0:	04c02034 	movhi	r19,128
    33a4:	9cffffc4 	addi	r19,r19,-1
    33a8:	44e6703a 	and	r19,r8,r19
    33ac:	98007626 	beq	r19,zero,3588 <__adddf3+0x360>
    33b0:	9809883a 	mov	r4,r19
    33b4:	00044a40 	call	44a4 <__clzsi2>
    33b8:	10fffe04 	addi	r3,r2,-8
    33bc:	010007c4 	movi	r4,31
    33c0:	20c07716 	blt	r4,r3,35a0 <__adddf3+0x378>
    33c4:	00800804 	movi	r2,32
    33c8:	10c5c83a 	sub	r2,r2,r3
    33cc:	8884d83a 	srl	r2,r17,r2
    33d0:	98d0983a 	sll	r8,r19,r3
    33d4:	88e2983a 	sll	r17,r17,r3
    33d8:	1204b03a 	or	r2,r2,r8
    33dc:	1c007416 	blt	r3,r16,35b0 <__adddf3+0x388>
    33e0:	1c21c83a 	sub	r16,r3,r16
    33e4:	82000044 	addi	r8,r16,1
    33e8:	00c007c4 	movi	r3,31
    33ec:	1a009116 	blt	r3,r8,3634 <__adddf3+0x40c>
    33f0:	00c00804 	movi	r3,32
    33f4:	1a07c83a 	sub	r3,r3,r8
    33f8:	8a08d83a 	srl	r4,r17,r8
    33fc:	88e2983a 	sll	r17,r17,r3
    3400:	10c6983a 	sll	r3,r2,r3
    3404:	1210d83a 	srl	r8,r2,r8
    3408:	8804c03a 	cmpne	r2,r17,zero
    340c:	1906b03a 	or	r3,r3,r4
    3410:	18a2b03a 	or	r17,r3,r2
    3414:	0021883a 	mov	r16,zero
    3418:	003fa206 	br	32a4 <__alt_data_end+0xf80032a4>
    341c:	1890b03a 	or	r8,r3,r2
    3420:	40017d26 	beq	r8,zero,3a18 <__adddf3+0x7f0>
    3424:	1011883a 	mov	r8,r2
    3428:	1823883a 	mov	r17,r3
    342c:	888001cc 	andi	r2,r17,7
    3430:	103f9e1e 	bne	r2,zero,32ac <__alt_data_end+0xf80032ac>
    3434:	4004977a 	slli	r2,r8,29
    3438:	8822d0fa 	srli	r17,r17,3
    343c:	4010d0fa 	srli	r8,r8,3
    3440:	9007883a 	mov	r3,r18
    3444:	1444b03a 	or	r2,r2,r17
    3448:	0101ffc4 	movi	r4,2047
    344c:	81002426 	beq	r16,r4,34e0 <__adddf3+0x2b8>
    3450:	8120703a 	and	r16,r16,r4
    3454:	01000434 	movhi	r4,16
    3458:	213fffc4 	addi	r4,r4,-1
    345c:	4110703a 	and	r8,r8,r4
    3460:	003fa806 	br	3304 <__alt_data_end+0xf8003304>
    3464:	8089c83a 	sub	r4,r16,r2
    3468:	01005e0e 	bge	zero,r4,35e4 <__adddf3+0x3bc>
    346c:	10002b26 	beq	r2,zero,351c <__adddf3+0x2f4>
    3470:	0081ffc4 	movi	r2,2047
    3474:	80bf8b26 	beq	r16,r2,32a4 <__alt_data_end+0xf80032a4>
    3478:	4a402034 	orhi	r9,r9,128
    347c:	00800e04 	movi	r2,56
    3480:	1100a40e 	bge	r2,r4,3714 <__adddf3+0x4ec>
    3484:	498cb03a 	or	r6,r9,r6
    3488:	300ac03a 	cmpne	r5,r6,zero
    348c:	0013883a 	mov	r9,zero
    3490:	2c4b883a 	add	r5,r5,r17
    3494:	2c63803a 	cmpltu	r17,r5,r17
    3498:	4a11883a 	add	r8,r9,r8
    349c:	8a11883a 	add	r8,r17,r8
    34a0:	2823883a 	mov	r17,r5
    34a4:	4080202c 	andhi	r2,r8,128
    34a8:	103fe026 	beq	r2,zero,342c <__alt_data_end+0xf800342c>
    34ac:	84000044 	addi	r16,r16,1
    34b0:	0081ffc4 	movi	r2,2047
    34b4:	8080d226 	beq	r16,r2,3800 <__adddf3+0x5d8>
    34b8:	00bfe034 	movhi	r2,65408
    34bc:	10bfffc4 	addi	r2,r2,-1
    34c0:	4090703a 	and	r8,r8,r2
    34c4:	880ad07a 	srli	r5,r17,1
    34c8:	400897fa 	slli	r4,r8,31
    34cc:	88c0004c 	andi	r3,r17,1
    34d0:	28e2b03a 	or	r17,r5,r3
    34d4:	4010d07a 	srli	r8,r8,1
    34d8:	2462b03a 	or	r17,r4,r17
    34dc:	003f7106 	br	32a4 <__alt_data_end+0xf80032a4>
    34e0:	4088b03a 	or	r4,r8,r2
    34e4:	20014526 	beq	r4,zero,39fc <__adddf3+0x7d4>
    34e8:	01000434 	movhi	r4,16
    34ec:	42000234 	orhi	r8,r8,8
    34f0:	213fffc4 	addi	r4,r4,-1
    34f4:	4110703a 	and	r8,r8,r4
    34f8:	003f8206 	br	3304 <__alt_data_end+0xf8003304>
    34fc:	18ffffc4 	addi	r3,r3,-1
    3500:	1800491e 	bne	r3,zero,3628 <__adddf3+0x400>
    3504:	898bc83a 	sub	r5,r17,r6
    3508:	8963803a 	cmpltu	r17,r17,r5
    350c:	4251c83a 	sub	r8,r8,r9
    3510:	4451c83a 	sub	r8,r8,r17
    3514:	2823883a 	mov	r17,r5
    3518:	003f9f06 	br	3398 <__alt_data_end+0xf8003398>
    351c:	4984b03a 	or	r2,r9,r6
    3520:	103f6026 	beq	r2,zero,32a4 <__alt_data_end+0xf80032a4>
    3524:	213fffc4 	addi	r4,r4,-1
    3528:	2000931e 	bne	r4,zero,3778 <__adddf3+0x550>
    352c:	898d883a 	add	r6,r17,r6
    3530:	3463803a 	cmpltu	r17,r6,r17
    3534:	4251883a 	add	r8,r8,r9
    3538:	8a11883a 	add	r8,r17,r8
    353c:	3023883a 	mov	r17,r6
    3540:	003fd806 	br	34a4 <__alt_data_end+0xf80034a4>
    3544:	1800541e 	bne	r3,zero,3698 <__adddf3+0x470>
    3548:	80800044 	addi	r2,r16,1
    354c:	1081ffcc 	andi	r2,r2,2047
    3550:	00c00044 	movi	r3,1
    3554:	1880a00e 	bge	r3,r2,37d8 <__adddf3+0x5b0>
    3558:	8989c83a 	sub	r4,r17,r6
    355c:	8905803a 	cmpltu	r2,r17,r4
    3560:	4267c83a 	sub	r19,r8,r9
    3564:	98a7c83a 	sub	r19,r19,r2
    3568:	9880202c 	andhi	r2,r19,128
    356c:	10006326 	beq	r2,zero,36fc <__adddf3+0x4d4>
    3570:	3463c83a 	sub	r17,r6,r17
    3574:	4a07c83a 	sub	r3,r9,r8
    3578:	344d803a 	cmpltu	r6,r6,r17
    357c:	19a7c83a 	sub	r19,r3,r6
    3580:	3825883a 	mov	r18,r7
    3584:	983f8a1e 	bne	r19,zero,33b0 <__alt_data_end+0xf80033b0>
    3588:	8809883a 	mov	r4,r17
    358c:	00044a40 	call	44a4 <__clzsi2>
    3590:	10800804 	addi	r2,r2,32
    3594:	10fffe04 	addi	r3,r2,-8
    3598:	010007c4 	movi	r4,31
    359c:	20ff890e 	bge	r4,r3,33c4 <__alt_data_end+0xf80033c4>
    35a0:	10bff604 	addi	r2,r2,-40
    35a4:	8884983a 	sll	r2,r17,r2
    35a8:	0023883a 	mov	r17,zero
    35ac:	1c3f8c0e 	bge	r3,r16,33e0 <__alt_data_end+0xf80033e0>
    35b0:	023fe034 	movhi	r8,65408
    35b4:	423fffc4 	addi	r8,r8,-1
    35b8:	80e1c83a 	sub	r16,r16,r3
    35bc:	1210703a 	and	r8,r2,r8
    35c0:	003f3806 	br	32a4 <__alt_data_end+0xf80032a4>
    35c4:	9007883a 	mov	r3,r18
    35c8:	0011883a 	mov	r8,zero
    35cc:	0005883a 	mov	r2,zero
    35d0:	003f4c06 	br	3304 <__alt_data_end+0xf8003304>
    35d4:	498cb03a 	or	r6,r9,r6
    35d8:	300cc03a 	cmpne	r6,r6,zero
    35dc:	0007883a 	mov	r3,zero
    35e0:	003f6806 	br	3384 <__alt_data_end+0xf8003384>
    35e4:	20009c1e 	bne	r4,zero,3858 <__adddf3+0x630>
    35e8:	80800044 	addi	r2,r16,1
    35ec:	1141ffcc 	andi	r5,r2,2047
    35f0:	01000044 	movi	r4,1
    35f4:	2140670e 	bge	r4,r5,3794 <__adddf3+0x56c>
    35f8:	0101ffc4 	movi	r4,2047
    35fc:	11007f26 	beq	r2,r4,37fc <__adddf3+0x5d4>
    3600:	898d883a 	add	r6,r17,r6
    3604:	4247883a 	add	r3,r8,r9
    3608:	3451803a 	cmpltu	r8,r6,r17
    360c:	40d1883a 	add	r8,r8,r3
    3610:	402297fa 	slli	r17,r8,31
    3614:	300cd07a 	srli	r6,r6,1
    3618:	4010d07a 	srli	r8,r8,1
    361c:	1021883a 	mov	r16,r2
    3620:	89a2b03a 	or	r17,r17,r6
    3624:	003f1f06 	br	32a4 <__alt_data_end+0xf80032a4>
    3628:	0081ffc4 	movi	r2,2047
    362c:	80bf481e 	bne	r16,r2,3350 <__alt_data_end+0xf8003350>
    3630:	003f1c06 	br	32a4 <__alt_data_end+0xf80032a4>
    3634:	843ff844 	addi	r16,r16,-31
    3638:	01000804 	movi	r4,32
    363c:	1406d83a 	srl	r3,r2,r16
    3640:	41005026 	beq	r8,r4,3784 <__adddf3+0x55c>
    3644:	01001004 	movi	r4,64
    3648:	2211c83a 	sub	r8,r4,r8
    364c:	1204983a 	sll	r2,r2,r8
    3650:	88a2b03a 	or	r17,r17,r2
    3654:	8822c03a 	cmpne	r17,r17,zero
    3658:	1c62b03a 	or	r17,r3,r17
    365c:	0011883a 	mov	r8,zero
    3660:	0021883a 	mov	r16,zero
    3664:	003f7106 	br	342c <__alt_data_end+0xf800342c>
    3668:	193ff804 	addi	r4,r3,-32
    366c:	00800804 	movi	r2,32
    3670:	4908d83a 	srl	r4,r9,r4
    3674:	18804526 	beq	r3,r2,378c <__adddf3+0x564>
    3678:	00801004 	movi	r2,64
    367c:	10c5c83a 	sub	r2,r2,r3
    3680:	4886983a 	sll	r3,r9,r2
    3684:	198cb03a 	or	r6,r3,r6
    3688:	300cc03a 	cmpne	r6,r6,zero
    368c:	218cb03a 	or	r6,r4,r6
    3690:	0007883a 	mov	r3,zero
    3694:	003f3b06 	br	3384 <__alt_data_end+0xf8003384>
    3698:	80002a26 	beq	r16,zero,3744 <__adddf3+0x51c>
    369c:	0101ffc4 	movi	r4,2047
    36a0:	11006826 	beq	r2,r4,3844 <__adddf3+0x61c>
    36a4:	00c7c83a 	sub	r3,zero,r3
    36a8:	42002034 	orhi	r8,r8,128
    36ac:	01000e04 	movi	r4,56
    36b0:	20c07c16 	blt	r4,r3,38a4 <__adddf3+0x67c>
    36b4:	010007c4 	movi	r4,31
    36b8:	20c0da16 	blt	r4,r3,3a24 <__adddf3+0x7fc>
    36bc:	01000804 	movi	r4,32
    36c0:	20c9c83a 	sub	r4,r4,r3
    36c4:	4114983a 	sll	r10,r8,r4
    36c8:	88cad83a 	srl	r5,r17,r3
    36cc:	8908983a 	sll	r4,r17,r4
    36d0:	40c6d83a 	srl	r3,r8,r3
    36d4:	5162b03a 	or	r17,r10,r5
    36d8:	2008c03a 	cmpne	r4,r4,zero
    36dc:	8922b03a 	or	r17,r17,r4
    36e0:	3463c83a 	sub	r17,r6,r17
    36e4:	48c7c83a 	sub	r3,r9,r3
    36e8:	344d803a 	cmpltu	r6,r6,r17
    36ec:	1991c83a 	sub	r8,r3,r6
    36f0:	1021883a 	mov	r16,r2
    36f4:	3825883a 	mov	r18,r7
    36f8:	003f2706 	br	3398 <__alt_data_end+0xf8003398>
    36fc:	24d0b03a 	or	r8,r4,r19
    3700:	40001b1e 	bne	r8,zero,3770 <__adddf3+0x548>
    3704:	0005883a 	mov	r2,zero
    3708:	0007883a 	mov	r3,zero
    370c:	0021883a 	mov	r16,zero
    3710:	003f4d06 	br	3448 <__alt_data_end+0xf8003448>
    3714:	008007c4 	movi	r2,31
    3718:	11003c16 	blt	r2,r4,380c <__adddf3+0x5e4>
    371c:	00800804 	movi	r2,32
    3720:	1105c83a 	sub	r2,r2,r4
    3724:	488e983a 	sll	r7,r9,r2
    3728:	310ad83a 	srl	r5,r6,r4
    372c:	3084983a 	sll	r2,r6,r2
    3730:	4912d83a 	srl	r9,r9,r4
    3734:	394ab03a 	or	r5,r7,r5
    3738:	1004c03a 	cmpne	r2,r2,zero
    373c:	288ab03a 	or	r5,r5,r2
    3740:	003f5306 	br	3490 <__alt_data_end+0xf8003490>
    3744:	4448b03a 	or	r4,r8,r17
    3748:	20003e26 	beq	r4,zero,3844 <__adddf3+0x61c>
    374c:	00c6303a 	nor	r3,zero,r3
    3750:	18003a1e 	bne	r3,zero,383c <__adddf3+0x614>
    3754:	3463c83a 	sub	r17,r6,r17
    3758:	4a07c83a 	sub	r3,r9,r8
    375c:	344d803a 	cmpltu	r6,r6,r17
    3760:	1991c83a 	sub	r8,r3,r6
    3764:	1021883a 	mov	r16,r2
    3768:	3825883a 	mov	r18,r7
    376c:	003f0a06 	br	3398 <__alt_data_end+0xf8003398>
    3770:	2023883a 	mov	r17,r4
    3774:	003f0d06 	br	33ac <__alt_data_end+0xf80033ac>
    3778:	0081ffc4 	movi	r2,2047
    377c:	80bf3f1e 	bne	r16,r2,347c <__alt_data_end+0xf800347c>
    3780:	003ec806 	br	32a4 <__alt_data_end+0xf80032a4>
    3784:	0005883a 	mov	r2,zero
    3788:	003fb106 	br	3650 <__alt_data_end+0xf8003650>
    378c:	0007883a 	mov	r3,zero
    3790:	003fbc06 	br	3684 <__alt_data_end+0xf8003684>
    3794:	4444b03a 	or	r2,r8,r17
    3798:	8000871e 	bne	r16,zero,39b8 <__adddf3+0x790>
    379c:	1000ba26 	beq	r2,zero,3a88 <__adddf3+0x860>
    37a0:	4984b03a 	or	r2,r9,r6
    37a4:	103ebf26 	beq	r2,zero,32a4 <__alt_data_end+0xf80032a4>
    37a8:	8985883a 	add	r2,r17,r6
    37ac:	4247883a 	add	r3,r8,r9
    37b0:	1451803a 	cmpltu	r8,r2,r17
    37b4:	40d1883a 	add	r8,r8,r3
    37b8:	40c0202c 	andhi	r3,r8,128
    37bc:	1023883a 	mov	r17,r2
    37c0:	183f1a26 	beq	r3,zero,342c <__alt_data_end+0xf800342c>
    37c4:	00bfe034 	movhi	r2,65408
    37c8:	10bfffc4 	addi	r2,r2,-1
    37cc:	2021883a 	mov	r16,r4
    37d0:	4090703a 	and	r8,r8,r2
    37d4:	003eb306 	br	32a4 <__alt_data_end+0xf80032a4>
    37d8:	4444b03a 	or	r2,r8,r17
    37dc:	8000291e 	bne	r16,zero,3884 <__adddf3+0x65c>
    37e0:	10004b1e 	bne	r2,zero,3910 <__adddf3+0x6e8>
    37e4:	4990b03a 	or	r8,r9,r6
    37e8:	40008b26 	beq	r8,zero,3a18 <__adddf3+0x7f0>
    37ec:	4811883a 	mov	r8,r9
    37f0:	3023883a 	mov	r17,r6
    37f4:	3825883a 	mov	r18,r7
    37f8:	003eaa06 	br	32a4 <__alt_data_end+0xf80032a4>
    37fc:	1021883a 	mov	r16,r2
    3800:	0011883a 	mov	r8,zero
    3804:	0005883a 	mov	r2,zero
    3808:	003f0f06 	br	3448 <__alt_data_end+0xf8003448>
    380c:	217ff804 	addi	r5,r4,-32
    3810:	00800804 	movi	r2,32
    3814:	494ad83a 	srl	r5,r9,r5
    3818:	20807d26 	beq	r4,r2,3a10 <__adddf3+0x7e8>
    381c:	00801004 	movi	r2,64
    3820:	1109c83a 	sub	r4,r2,r4
    3824:	4912983a 	sll	r9,r9,r4
    3828:	498cb03a 	or	r6,r9,r6
    382c:	300cc03a 	cmpne	r6,r6,zero
    3830:	298ab03a 	or	r5,r5,r6
    3834:	0013883a 	mov	r9,zero
    3838:	003f1506 	br	3490 <__alt_data_end+0xf8003490>
    383c:	0101ffc4 	movi	r4,2047
    3840:	113f9a1e 	bne	r2,r4,36ac <__alt_data_end+0xf80036ac>
    3844:	4811883a 	mov	r8,r9
    3848:	3023883a 	mov	r17,r6
    384c:	1021883a 	mov	r16,r2
    3850:	3825883a 	mov	r18,r7
    3854:	003e9306 	br	32a4 <__alt_data_end+0xf80032a4>
    3858:	8000161e 	bne	r16,zero,38b4 <__adddf3+0x68c>
    385c:	444ab03a 	or	r5,r8,r17
    3860:	28005126 	beq	r5,zero,39a8 <__adddf3+0x780>
    3864:	0108303a 	nor	r4,zero,r4
    3868:	20004d1e 	bne	r4,zero,39a0 <__adddf3+0x778>
    386c:	89a3883a 	add	r17,r17,r6
    3870:	4253883a 	add	r9,r8,r9
    3874:	898d803a 	cmpltu	r6,r17,r6
    3878:	3251883a 	add	r8,r6,r9
    387c:	1021883a 	mov	r16,r2
    3880:	003f0806 	br	34a4 <__alt_data_end+0xf80034a4>
    3884:	1000301e 	bne	r2,zero,3948 <__adddf3+0x720>
    3888:	4984b03a 	or	r2,r9,r6
    388c:	10007126 	beq	r2,zero,3a54 <__adddf3+0x82c>
    3890:	4811883a 	mov	r8,r9
    3894:	3023883a 	mov	r17,r6
    3898:	3825883a 	mov	r18,r7
    389c:	0401ffc4 	movi	r16,2047
    38a0:	003e8006 	br	32a4 <__alt_data_end+0xf80032a4>
    38a4:	4462b03a 	or	r17,r8,r17
    38a8:	8822c03a 	cmpne	r17,r17,zero
    38ac:	0007883a 	mov	r3,zero
    38b0:	003f8b06 	br	36e0 <__alt_data_end+0xf80036e0>
    38b4:	0141ffc4 	movi	r5,2047
    38b8:	11403b26 	beq	r2,r5,39a8 <__adddf3+0x780>
    38bc:	0109c83a 	sub	r4,zero,r4
    38c0:	42002034 	orhi	r8,r8,128
    38c4:	01400e04 	movi	r5,56
    38c8:	29006716 	blt	r5,r4,3a68 <__adddf3+0x840>
    38cc:	014007c4 	movi	r5,31
    38d0:	29007016 	blt	r5,r4,3a94 <__adddf3+0x86c>
    38d4:	01400804 	movi	r5,32
    38d8:	290bc83a 	sub	r5,r5,r4
    38dc:	4154983a 	sll	r10,r8,r5
    38e0:	890ed83a 	srl	r7,r17,r4
    38e4:	894a983a 	sll	r5,r17,r5
    38e8:	4108d83a 	srl	r4,r8,r4
    38ec:	51e2b03a 	or	r17,r10,r7
    38f0:	280ac03a 	cmpne	r5,r5,zero
    38f4:	8962b03a 	or	r17,r17,r5
    38f8:	89a3883a 	add	r17,r17,r6
    38fc:	2253883a 	add	r9,r4,r9
    3900:	898d803a 	cmpltu	r6,r17,r6
    3904:	3251883a 	add	r8,r6,r9
    3908:	1021883a 	mov	r16,r2
    390c:	003ee506 	br	34a4 <__alt_data_end+0xf80034a4>
    3910:	4984b03a 	or	r2,r9,r6
    3914:	103e6326 	beq	r2,zero,32a4 <__alt_data_end+0xf80032a4>
    3918:	8987c83a 	sub	r3,r17,r6
    391c:	88c9803a 	cmpltu	r4,r17,r3
    3920:	4245c83a 	sub	r2,r8,r9
    3924:	1105c83a 	sub	r2,r2,r4
    3928:	1100202c 	andhi	r4,r2,128
    392c:	203ebb26 	beq	r4,zero,341c <__alt_data_end+0xf800341c>
    3930:	3463c83a 	sub	r17,r6,r17
    3934:	4a07c83a 	sub	r3,r9,r8
    3938:	344d803a 	cmpltu	r6,r6,r17
    393c:	1991c83a 	sub	r8,r3,r6
    3940:	3825883a 	mov	r18,r7
    3944:	003e5706 	br	32a4 <__alt_data_end+0xf80032a4>
    3948:	4984b03a 	or	r2,r9,r6
    394c:	10002e26 	beq	r2,zero,3a08 <__adddf3+0x7e0>
    3950:	4004d0fa 	srli	r2,r8,3
    3954:	8822d0fa 	srli	r17,r17,3
    3958:	4010977a 	slli	r8,r8,29
    395c:	10c0022c 	andhi	r3,r2,8
    3960:	4462b03a 	or	r17,r8,r17
    3964:	18000826 	beq	r3,zero,3988 <__adddf3+0x760>
    3968:	4808d0fa 	srli	r4,r9,3
    396c:	20c0022c 	andhi	r3,r4,8
    3970:	1800051e 	bne	r3,zero,3988 <__adddf3+0x760>
    3974:	300cd0fa 	srli	r6,r6,3
    3978:	4806977a 	slli	r3,r9,29
    397c:	2005883a 	mov	r2,r4
    3980:	3825883a 	mov	r18,r7
    3984:	19a2b03a 	or	r17,r3,r6
    3988:	8810d77a 	srli	r8,r17,29
    398c:	100490fa 	slli	r2,r2,3
    3990:	882290fa 	slli	r17,r17,3
    3994:	0401ffc4 	movi	r16,2047
    3998:	4090b03a 	or	r8,r8,r2
    399c:	003e4106 	br	32a4 <__alt_data_end+0xf80032a4>
    39a0:	0141ffc4 	movi	r5,2047
    39a4:	117fc71e 	bne	r2,r5,38c4 <__alt_data_end+0xf80038c4>
    39a8:	4811883a 	mov	r8,r9
    39ac:	3023883a 	mov	r17,r6
    39b0:	1021883a 	mov	r16,r2
    39b4:	003e3b06 	br	32a4 <__alt_data_end+0xf80032a4>
    39b8:	10002f26 	beq	r2,zero,3a78 <__adddf3+0x850>
    39bc:	4984b03a 	or	r2,r9,r6
    39c0:	10001126 	beq	r2,zero,3a08 <__adddf3+0x7e0>
    39c4:	4004d0fa 	srli	r2,r8,3
    39c8:	8822d0fa 	srli	r17,r17,3
    39cc:	4010977a 	slli	r8,r8,29
    39d0:	10c0022c 	andhi	r3,r2,8
    39d4:	4462b03a 	or	r17,r8,r17
    39d8:	183feb26 	beq	r3,zero,3988 <__alt_data_end+0xf8003988>
    39dc:	4808d0fa 	srli	r4,r9,3
    39e0:	20c0022c 	andhi	r3,r4,8
    39e4:	183fe81e 	bne	r3,zero,3988 <__alt_data_end+0xf8003988>
    39e8:	300cd0fa 	srli	r6,r6,3
    39ec:	4806977a 	slli	r3,r9,29
    39f0:	2005883a 	mov	r2,r4
    39f4:	19a2b03a 	or	r17,r3,r6
    39f8:	003fe306 	br	3988 <__alt_data_end+0xf8003988>
    39fc:	0011883a 	mov	r8,zero
    3a00:	0005883a 	mov	r2,zero
    3a04:	003e3f06 	br	3304 <__alt_data_end+0xf8003304>
    3a08:	0401ffc4 	movi	r16,2047
    3a0c:	003e2506 	br	32a4 <__alt_data_end+0xf80032a4>
    3a10:	0013883a 	mov	r9,zero
    3a14:	003f8406 	br	3828 <__alt_data_end+0xf8003828>
    3a18:	0005883a 	mov	r2,zero
    3a1c:	0007883a 	mov	r3,zero
    3a20:	003e8906 	br	3448 <__alt_data_end+0xf8003448>
    3a24:	197ff804 	addi	r5,r3,-32
    3a28:	01000804 	movi	r4,32
    3a2c:	414ad83a 	srl	r5,r8,r5
    3a30:	19002426 	beq	r3,r4,3ac4 <__adddf3+0x89c>
    3a34:	01001004 	movi	r4,64
    3a38:	20c7c83a 	sub	r3,r4,r3
    3a3c:	40c6983a 	sll	r3,r8,r3
    3a40:	1c46b03a 	or	r3,r3,r17
    3a44:	1806c03a 	cmpne	r3,r3,zero
    3a48:	28e2b03a 	or	r17,r5,r3
    3a4c:	0007883a 	mov	r3,zero
    3a50:	003f2306 	br	36e0 <__alt_data_end+0xf80036e0>
    3a54:	0007883a 	mov	r3,zero
    3a58:	5811883a 	mov	r8,r11
    3a5c:	00bfffc4 	movi	r2,-1
    3a60:	0401ffc4 	movi	r16,2047
    3a64:	003e7806 	br	3448 <__alt_data_end+0xf8003448>
    3a68:	4462b03a 	or	r17,r8,r17
    3a6c:	8822c03a 	cmpne	r17,r17,zero
    3a70:	0009883a 	mov	r4,zero
    3a74:	003fa006 	br	38f8 <__alt_data_end+0xf80038f8>
    3a78:	4811883a 	mov	r8,r9
    3a7c:	3023883a 	mov	r17,r6
    3a80:	0401ffc4 	movi	r16,2047
    3a84:	003e0706 	br	32a4 <__alt_data_end+0xf80032a4>
    3a88:	4811883a 	mov	r8,r9
    3a8c:	3023883a 	mov	r17,r6
    3a90:	003e0406 	br	32a4 <__alt_data_end+0xf80032a4>
    3a94:	21fff804 	addi	r7,r4,-32
    3a98:	01400804 	movi	r5,32
    3a9c:	41ced83a 	srl	r7,r8,r7
    3aa0:	21400a26 	beq	r4,r5,3acc <__adddf3+0x8a4>
    3aa4:	01401004 	movi	r5,64
    3aa8:	2909c83a 	sub	r4,r5,r4
    3aac:	4108983a 	sll	r4,r8,r4
    3ab0:	2448b03a 	or	r4,r4,r17
    3ab4:	2008c03a 	cmpne	r4,r4,zero
    3ab8:	3922b03a 	or	r17,r7,r4
    3abc:	0009883a 	mov	r4,zero
    3ac0:	003f8d06 	br	38f8 <__alt_data_end+0xf80038f8>
    3ac4:	0007883a 	mov	r3,zero
    3ac8:	003fdd06 	br	3a40 <__alt_data_end+0xf8003a40>
    3acc:	0009883a 	mov	r4,zero
    3ad0:	003ff706 	br	3ab0 <__alt_data_end+0xf8003ab0>

00003ad4 <__muldf3>:
    3ad4:	defff304 	addi	sp,sp,-52
    3ad8:	2804d53a 	srli	r2,r5,20
    3adc:	dd800915 	stw	r22,36(sp)
    3ae0:	282cd7fa 	srli	r22,r5,31
    3ae4:	dc000315 	stw	r16,12(sp)
    3ae8:	04000434 	movhi	r16,16
    3aec:	dd400815 	stw	r21,32(sp)
    3af0:	dc800515 	stw	r18,20(sp)
    3af4:	843fffc4 	addi	r16,r16,-1
    3af8:	dfc00c15 	stw	ra,48(sp)
    3afc:	df000b15 	stw	fp,44(sp)
    3b00:	ddc00a15 	stw	r23,40(sp)
    3b04:	dd000715 	stw	r20,28(sp)
    3b08:	dcc00615 	stw	r19,24(sp)
    3b0c:	dc400415 	stw	r17,16(sp)
    3b10:	1481ffcc 	andi	r18,r2,2047
    3b14:	2c20703a 	and	r16,r5,r16
    3b18:	b02b883a 	mov	r21,r22
    3b1c:	b2403fcc 	andi	r9,r22,255
    3b20:	90006026 	beq	r18,zero,3ca4 <__muldf3+0x1d0>
    3b24:	0081ffc4 	movi	r2,2047
    3b28:	2029883a 	mov	r20,r4
    3b2c:	90803626 	beq	r18,r2,3c08 <__muldf3+0x134>
    3b30:	80800434 	orhi	r2,r16,16
    3b34:	100490fa 	slli	r2,r2,3
    3b38:	2020d77a 	srli	r16,r4,29
    3b3c:	202890fa 	slli	r20,r4,3
    3b40:	94bf0044 	addi	r18,r18,-1023
    3b44:	80a0b03a 	or	r16,r16,r2
    3b48:	0027883a 	mov	r19,zero
    3b4c:	0039883a 	mov	fp,zero
    3b50:	3804d53a 	srli	r2,r7,20
    3b54:	382ed7fa 	srli	r23,r7,31
    3b58:	04400434 	movhi	r17,16
    3b5c:	8c7fffc4 	addi	r17,r17,-1
    3b60:	1081ffcc 	andi	r2,r2,2047
    3b64:	3011883a 	mov	r8,r6
    3b68:	3c62703a 	and	r17,r7,r17
    3b6c:	ba803fcc 	andi	r10,r23,255
    3b70:	10006d26 	beq	r2,zero,3d28 <__muldf3+0x254>
    3b74:	00c1ffc4 	movi	r3,2047
    3b78:	10c06526 	beq	r2,r3,3d10 <__muldf3+0x23c>
    3b7c:	88c00434 	orhi	r3,r17,16
    3b80:	180690fa 	slli	r3,r3,3
    3b84:	3022d77a 	srli	r17,r6,29
    3b88:	301090fa 	slli	r8,r6,3
    3b8c:	10bf0044 	addi	r2,r2,-1023
    3b90:	88e2b03a 	or	r17,r17,r3
    3b94:	000b883a 	mov	r5,zero
    3b98:	9085883a 	add	r2,r18,r2
    3b9c:	2cc8b03a 	or	r4,r5,r19
    3ba0:	00c003c4 	movi	r3,15
    3ba4:	bdacf03a 	xor	r22,r23,r22
    3ba8:	12c00044 	addi	r11,r2,1
    3bac:	19009936 	bltu	r3,r4,3e14 <__muldf3+0x340>
    3bb0:	200890ba 	slli	r4,r4,2
    3bb4:	00c00034 	movhi	r3,0
    3bb8:	18cef204 	addi	r3,r3,15304
    3bbc:	20c9883a 	add	r4,r4,r3
    3bc0:	20c00017 	ldw	r3,0(r4)
    3bc4:	1800683a 	jmp	r3
    3bc8:	00003e14 	movui	zero,248
    3bcc:	00003c28 	cmpgeui	zero,zero,240
    3bd0:	00003c28 	cmpgeui	zero,zero,240
    3bd4:	00003c24 	muli	zero,zero,240
    3bd8:	00003df0 	cmpltui	zero,zero,247
    3bdc:	00003df0 	cmpltui	zero,zero,247
    3be0:	00003dd8 	cmpnei	zero,zero,247
    3be4:	00003c24 	muli	zero,zero,240
    3be8:	00003df0 	cmpltui	zero,zero,247
    3bec:	00003dd8 	cmpnei	zero,zero,247
    3bf0:	00003df0 	cmpltui	zero,zero,247
    3bf4:	00003c24 	muli	zero,zero,240
    3bf8:	00003e00 	call	3e0 <timer_2_int_init+0x44>
    3bfc:	00003e00 	call	3e0 <timer_2_int_init+0x44>
    3c00:	00003e00 	call	3e0 <timer_2_int_init+0x44>
    3c04:	0000401c 	xori	zero,zero,256
    3c08:	2404b03a 	or	r2,r4,r16
    3c0c:	10006f1e 	bne	r2,zero,3dcc <__muldf3+0x2f8>
    3c10:	04c00204 	movi	r19,8
    3c14:	0021883a 	mov	r16,zero
    3c18:	0029883a 	mov	r20,zero
    3c1c:	07000084 	movi	fp,2
    3c20:	003fcb06 	br	3b50 <__alt_data_end+0xf8003b50>
    3c24:	502d883a 	mov	r22,r10
    3c28:	00800084 	movi	r2,2
    3c2c:	28805726 	beq	r5,r2,3d8c <__muldf3+0x2b8>
    3c30:	008000c4 	movi	r2,3
    3c34:	28816626 	beq	r5,r2,41d0 <__muldf3+0x6fc>
    3c38:	00800044 	movi	r2,1
    3c3c:	2881411e 	bne	r5,r2,4144 <__muldf3+0x670>
    3c40:	b02b883a 	mov	r21,r22
    3c44:	0005883a 	mov	r2,zero
    3c48:	000b883a 	mov	r5,zero
    3c4c:	0029883a 	mov	r20,zero
    3c50:	1004953a 	slli	r2,r2,20
    3c54:	a8c03fcc 	andi	r3,r21,255
    3c58:	04400434 	movhi	r17,16
    3c5c:	8c7fffc4 	addi	r17,r17,-1
    3c60:	180697fa 	slli	r3,r3,31
    3c64:	2c4a703a 	and	r5,r5,r17
    3c68:	288ab03a 	or	r5,r5,r2
    3c6c:	28c6b03a 	or	r3,r5,r3
    3c70:	a005883a 	mov	r2,r20
    3c74:	dfc00c17 	ldw	ra,48(sp)
    3c78:	df000b17 	ldw	fp,44(sp)
    3c7c:	ddc00a17 	ldw	r23,40(sp)
    3c80:	dd800917 	ldw	r22,36(sp)
    3c84:	dd400817 	ldw	r21,32(sp)
    3c88:	dd000717 	ldw	r20,28(sp)
    3c8c:	dcc00617 	ldw	r19,24(sp)
    3c90:	dc800517 	ldw	r18,20(sp)
    3c94:	dc400417 	ldw	r17,16(sp)
    3c98:	dc000317 	ldw	r16,12(sp)
    3c9c:	dec00d04 	addi	sp,sp,52
    3ca0:	f800283a 	ret
    3ca4:	2404b03a 	or	r2,r4,r16
    3ca8:	2027883a 	mov	r19,r4
    3cac:	10004226 	beq	r2,zero,3db8 <__muldf3+0x2e4>
    3cb0:	8000fc26 	beq	r16,zero,40a4 <__muldf3+0x5d0>
    3cb4:	8009883a 	mov	r4,r16
    3cb8:	d9800215 	stw	r6,8(sp)
    3cbc:	d9c00015 	stw	r7,0(sp)
    3cc0:	da400115 	stw	r9,4(sp)
    3cc4:	00044a40 	call	44a4 <__clzsi2>
    3cc8:	d9800217 	ldw	r6,8(sp)
    3ccc:	d9c00017 	ldw	r7,0(sp)
    3cd0:	da400117 	ldw	r9,4(sp)
    3cd4:	113ffd44 	addi	r4,r2,-11
    3cd8:	00c00704 	movi	r3,28
    3cdc:	1900ed16 	blt	r3,r4,4094 <__muldf3+0x5c0>
    3ce0:	00c00744 	movi	r3,29
    3ce4:	147ffe04 	addi	r17,r2,-8
    3ce8:	1907c83a 	sub	r3,r3,r4
    3cec:	8460983a 	sll	r16,r16,r17
    3cf0:	98c6d83a 	srl	r3,r19,r3
    3cf4:	9c68983a 	sll	r20,r19,r17
    3cf8:	1c20b03a 	or	r16,r3,r16
    3cfc:	1080fcc4 	addi	r2,r2,1011
    3d00:	00a5c83a 	sub	r18,zero,r2
    3d04:	0027883a 	mov	r19,zero
    3d08:	0039883a 	mov	fp,zero
    3d0c:	003f9006 	br	3b50 <__alt_data_end+0xf8003b50>
    3d10:	3446b03a 	or	r3,r6,r17
    3d14:	1800261e 	bne	r3,zero,3db0 <__muldf3+0x2dc>
    3d18:	0023883a 	mov	r17,zero
    3d1c:	0011883a 	mov	r8,zero
    3d20:	01400084 	movi	r5,2
    3d24:	003f9c06 	br	3b98 <__alt_data_end+0xf8003b98>
    3d28:	3446b03a 	or	r3,r6,r17
    3d2c:	18001c26 	beq	r3,zero,3da0 <__muldf3+0x2cc>
    3d30:	8800ce26 	beq	r17,zero,406c <__muldf3+0x598>
    3d34:	8809883a 	mov	r4,r17
    3d38:	d9800215 	stw	r6,8(sp)
    3d3c:	da400115 	stw	r9,4(sp)
    3d40:	da800015 	stw	r10,0(sp)
    3d44:	00044a40 	call	44a4 <__clzsi2>
    3d48:	d9800217 	ldw	r6,8(sp)
    3d4c:	da400117 	ldw	r9,4(sp)
    3d50:	da800017 	ldw	r10,0(sp)
    3d54:	113ffd44 	addi	r4,r2,-11
    3d58:	00c00704 	movi	r3,28
    3d5c:	1900bf16 	blt	r3,r4,405c <__muldf3+0x588>
    3d60:	00c00744 	movi	r3,29
    3d64:	123ffe04 	addi	r8,r2,-8
    3d68:	1907c83a 	sub	r3,r3,r4
    3d6c:	8a22983a 	sll	r17,r17,r8
    3d70:	30c6d83a 	srl	r3,r6,r3
    3d74:	3210983a 	sll	r8,r6,r8
    3d78:	1c62b03a 	or	r17,r3,r17
    3d7c:	1080fcc4 	addi	r2,r2,1011
    3d80:	0085c83a 	sub	r2,zero,r2
    3d84:	000b883a 	mov	r5,zero
    3d88:	003f8306 	br	3b98 <__alt_data_end+0xf8003b98>
    3d8c:	b02b883a 	mov	r21,r22
    3d90:	0081ffc4 	movi	r2,2047
    3d94:	000b883a 	mov	r5,zero
    3d98:	0029883a 	mov	r20,zero
    3d9c:	003fac06 	br	3c50 <__alt_data_end+0xf8003c50>
    3da0:	0023883a 	mov	r17,zero
    3da4:	0011883a 	mov	r8,zero
    3da8:	01400044 	movi	r5,1
    3dac:	003f7a06 	br	3b98 <__alt_data_end+0xf8003b98>
    3db0:	014000c4 	movi	r5,3
    3db4:	003f7806 	br	3b98 <__alt_data_end+0xf8003b98>
    3db8:	04c00104 	movi	r19,4
    3dbc:	0021883a 	mov	r16,zero
    3dc0:	0029883a 	mov	r20,zero
    3dc4:	07000044 	movi	fp,1
    3dc8:	003f6106 	br	3b50 <__alt_data_end+0xf8003b50>
    3dcc:	04c00304 	movi	r19,12
    3dd0:	070000c4 	movi	fp,3
    3dd4:	003f5e06 	br	3b50 <__alt_data_end+0xf8003b50>
    3dd8:	01400434 	movhi	r5,16
    3ddc:	002b883a 	mov	r21,zero
    3de0:	297fffc4 	addi	r5,r5,-1
    3de4:	053fffc4 	movi	r20,-1
    3de8:	0081ffc4 	movi	r2,2047
    3dec:	003f9806 	br	3c50 <__alt_data_end+0xf8003c50>
    3df0:	8023883a 	mov	r17,r16
    3df4:	a011883a 	mov	r8,r20
    3df8:	e00b883a 	mov	r5,fp
    3dfc:	003f8a06 	br	3c28 <__alt_data_end+0xf8003c28>
    3e00:	8023883a 	mov	r17,r16
    3e04:	a011883a 	mov	r8,r20
    3e08:	482d883a 	mov	r22,r9
    3e0c:	e00b883a 	mov	r5,fp
    3e10:	003f8506 	br	3c28 <__alt_data_end+0xf8003c28>
    3e14:	a00ad43a 	srli	r5,r20,16
    3e18:	401ad43a 	srli	r13,r8,16
    3e1c:	a53fffcc 	andi	r20,r20,65535
    3e20:	423fffcc 	andi	r8,r8,65535
    3e24:	4519383a 	mul	r12,r8,r20
    3e28:	4147383a 	mul	r3,r8,r5
    3e2c:	6d09383a 	mul	r4,r13,r20
    3e30:	600cd43a 	srli	r6,r12,16
    3e34:	2b5d383a 	mul	r14,r5,r13
    3e38:	20c9883a 	add	r4,r4,r3
    3e3c:	310d883a 	add	r6,r6,r4
    3e40:	30c0022e 	bgeu	r6,r3,3e4c <__muldf3+0x378>
    3e44:	00c00074 	movhi	r3,1
    3e48:	70dd883a 	add	r14,r14,r3
    3e4c:	8826d43a 	srli	r19,r17,16
    3e50:	8bffffcc 	andi	r15,r17,65535
    3e54:	7d23383a 	mul	r17,r15,r20
    3e58:	7949383a 	mul	r4,r15,r5
    3e5c:	9d29383a 	mul	r20,r19,r20
    3e60:	8814d43a 	srli	r10,r17,16
    3e64:	3012943a 	slli	r9,r6,16
    3e68:	a129883a 	add	r20,r20,r4
    3e6c:	633fffcc 	andi	r12,r12,65535
    3e70:	5515883a 	add	r10,r10,r20
    3e74:	3006d43a 	srli	r3,r6,16
    3e78:	4b13883a 	add	r9,r9,r12
    3e7c:	2ccb383a 	mul	r5,r5,r19
    3e80:	5100022e 	bgeu	r10,r4,3e8c <__muldf3+0x3b8>
    3e84:	01000074 	movhi	r4,1
    3e88:	290b883a 	add	r5,r5,r4
    3e8c:	802ad43a 	srli	r21,r16,16
    3e90:	843fffcc 	andi	r16,r16,65535
    3e94:	440d383a 	mul	r6,r8,r16
    3e98:	4565383a 	mul	r18,r8,r21
    3e9c:	8349383a 	mul	r4,r16,r13
    3ea0:	500e943a 	slli	r7,r10,16
    3ea4:	3010d43a 	srli	r8,r6,16
    3ea8:	5028d43a 	srli	r20,r10,16
    3eac:	2489883a 	add	r4,r4,r18
    3eb0:	8abfffcc 	andi	r10,r17,65535
    3eb4:	3a95883a 	add	r10,r7,r10
    3eb8:	4119883a 	add	r12,r8,r4
    3ebc:	a169883a 	add	r20,r20,r5
    3ec0:	1a87883a 	add	r3,r3,r10
    3ec4:	6d5b383a 	mul	r13,r13,r21
    3ec8:	6480022e 	bgeu	r12,r18,3ed4 <__muldf3+0x400>
    3ecc:	01000074 	movhi	r4,1
    3ed0:	691b883a 	add	r13,r13,r4
    3ed4:	7c25383a 	mul	r18,r15,r16
    3ed8:	7d4b383a 	mul	r5,r15,r21
    3edc:	84cf383a 	mul	r7,r16,r19
    3ee0:	901ed43a 	srli	r15,r18,16
    3ee4:	6008d43a 	srli	r4,r12,16
    3ee8:	6010943a 	slli	r8,r12,16
    3eec:	394f883a 	add	r7,r7,r5
    3ef0:	333fffcc 	andi	r12,r6,65535
    3ef4:	79df883a 	add	r15,r15,r7
    3ef8:	235b883a 	add	r13,r4,r13
    3efc:	9d63383a 	mul	r17,r19,r21
    3f00:	4309883a 	add	r4,r8,r12
    3f04:	7940022e 	bgeu	r15,r5,3f10 <__muldf3+0x43c>
    3f08:	01400074 	movhi	r5,1
    3f0c:	8963883a 	add	r17,r17,r5
    3f10:	780a943a 	slli	r5,r15,16
    3f14:	91bfffcc 	andi	r6,r18,65535
    3f18:	70c7883a 	add	r3,r14,r3
    3f1c:	298d883a 	add	r6,r5,r6
    3f20:	1a8f803a 	cmpltu	r7,r3,r10
    3f24:	350b883a 	add	r5,r6,r20
    3f28:	20c7883a 	add	r3,r4,r3
    3f2c:	3955883a 	add	r10,r7,r5
    3f30:	1909803a 	cmpltu	r4,r3,r4
    3f34:	6a91883a 	add	r8,r13,r10
    3f38:	780cd43a 	srli	r6,r15,16
    3f3c:	2219883a 	add	r12,r4,r8
    3f40:	2d0b803a 	cmpltu	r5,r5,r20
    3f44:	51cf803a 	cmpltu	r7,r10,r7
    3f48:	29ceb03a 	or	r7,r5,r7
    3f4c:	4351803a 	cmpltu	r8,r8,r13
    3f50:	610b803a 	cmpltu	r5,r12,r4
    3f54:	4148b03a 	or	r4,r8,r5
    3f58:	398f883a 	add	r7,r7,r6
    3f5c:	3909883a 	add	r4,r7,r4
    3f60:	1810927a 	slli	r8,r3,9
    3f64:	2449883a 	add	r4,r4,r17
    3f68:	2008927a 	slli	r4,r4,9
    3f6c:	6022d5fa 	srli	r17,r12,23
    3f70:	1806d5fa 	srli	r3,r3,23
    3f74:	4252b03a 	or	r9,r8,r9
    3f78:	600a927a 	slli	r5,r12,9
    3f7c:	4810c03a 	cmpne	r8,r9,zero
    3f80:	2462b03a 	or	r17,r4,r17
    3f84:	40c6b03a 	or	r3,r8,r3
    3f88:	8900402c 	andhi	r4,r17,256
    3f8c:	1950b03a 	or	r8,r3,r5
    3f90:	20000726 	beq	r4,zero,3fb0 <__muldf3+0x4dc>
    3f94:	4006d07a 	srli	r3,r8,1
    3f98:	880497fa 	slli	r2,r17,31
    3f9c:	4200004c 	andi	r8,r8,1
    3fa0:	8822d07a 	srli	r17,r17,1
    3fa4:	1a10b03a 	or	r8,r3,r8
    3fa8:	1210b03a 	or	r8,r2,r8
    3fac:	5805883a 	mov	r2,r11
    3fb0:	1140ffc4 	addi	r5,r2,1023
    3fb4:	0140440e 	bge	zero,r5,40c8 <__muldf3+0x5f4>
    3fb8:	40c001cc 	andi	r3,r8,7
    3fbc:	18000726 	beq	r3,zero,3fdc <__muldf3+0x508>
    3fc0:	40c003cc 	andi	r3,r8,15
    3fc4:	01000104 	movi	r4,4
    3fc8:	19000426 	beq	r3,r4,3fdc <__muldf3+0x508>
    3fcc:	4107883a 	add	r3,r8,r4
    3fd0:	1a11803a 	cmpltu	r8,r3,r8
    3fd4:	8a23883a 	add	r17,r17,r8
    3fd8:	1811883a 	mov	r8,r3
    3fdc:	88c0402c 	andhi	r3,r17,256
    3fe0:	18000426 	beq	r3,zero,3ff4 <__muldf3+0x520>
    3fe4:	11410004 	addi	r5,r2,1024
    3fe8:	00bfc034 	movhi	r2,65280
    3fec:	10bfffc4 	addi	r2,r2,-1
    3ff0:	88a2703a 	and	r17,r17,r2
    3ff4:	0081ff84 	movi	r2,2046
    3ff8:	117f6416 	blt	r2,r5,3d8c <__alt_data_end+0xf8003d8c>
    3ffc:	8828977a 	slli	r20,r17,29
    4000:	4010d0fa 	srli	r8,r8,3
    4004:	8822927a 	slli	r17,r17,9
    4008:	2881ffcc 	andi	r2,r5,2047
    400c:	a228b03a 	or	r20,r20,r8
    4010:	880ad33a 	srli	r5,r17,12
    4014:	b02b883a 	mov	r21,r22
    4018:	003f0d06 	br	3c50 <__alt_data_end+0xf8003c50>
    401c:	8080022c 	andhi	r2,r16,8
    4020:	10000926 	beq	r2,zero,4048 <__muldf3+0x574>
    4024:	8880022c 	andhi	r2,r17,8
    4028:	1000071e 	bne	r2,zero,4048 <__muldf3+0x574>
    402c:	00800434 	movhi	r2,16
    4030:	89400234 	orhi	r5,r17,8
    4034:	10bfffc4 	addi	r2,r2,-1
    4038:	b82b883a 	mov	r21,r23
    403c:	288a703a 	and	r5,r5,r2
    4040:	4029883a 	mov	r20,r8
    4044:	003f6806 	br	3de8 <__alt_data_end+0xf8003de8>
    4048:	00800434 	movhi	r2,16
    404c:	81400234 	orhi	r5,r16,8
    4050:	10bfffc4 	addi	r2,r2,-1
    4054:	288a703a 	and	r5,r5,r2
    4058:	003f6306 	br	3de8 <__alt_data_end+0xf8003de8>
    405c:	147ff604 	addi	r17,r2,-40
    4060:	3462983a 	sll	r17,r6,r17
    4064:	0011883a 	mov	r8,zero
    4068:	003f4406 	br	3d7c <__alt_data_end+0xf8003d7c>
    406c:	3009883a 	mov	r4,r6
    4070:	d9800215 	stw	r6,8(sp)
    4074:	da400115 	stw	r9,4(sp)
    4078:	da800015 	stw	r10,0(sp)
    407c:	00044a40 	call	44a4 <__clzsi2>
    4080:	10800804 	addi	r2,r2,32
    4084:	da800017 	ldw	r10,0(sp)
    4088:	da400117 	ldw	r9,4(sp)
    408c:	d9800217 	ldw	r6,8(sp)
    4090:	003f3006 	br	3d54 <__alt_data_end+0xf8003d54>
    4094:	143ff604 	addi	r16,r2,-40
    4098:	9c20983a 	sll	r16,r19,r16
    409c:	0029883a 	mov	r20,zero
    40a0:	003f1606 	br	3cfc <__alt_data_end+0xf8003cfc>
    40a4:	d9800215 	stw	r6,8(sp)
    40a8:	d9c00015 	stw	r7,0(sp)
    40ac:	da400115 	stw	r9,4(sp)
    40b0:	00044a40 	call	44a4 <__clzsi2>
    40b4:	10800804 	addi	r2,r2,32
    40b8:	da400117 	ldw	r9,4(sp)
    40bc:	d9c00017 	ldw	r7,0(sp)
    40c0:	d9800217 	ldw	r6,8(sp)
    40c4:	003f0306 	br	3cd4 <__alt_data_end+0xf8003cd4>
    40c8:	00c00044 	movi	r3,1
    40cc:	1947c83a 	sub	r3,r3,r5
    40d0:	00800e04 	movi	r2,56
    40d4:	10feda16 	blt	r2,r3,3c40 <__alt_data_end+0xf8003c40>
    40d8:	008007c4 	movi	r2,31
    40dc:	10c01b16 	blt	r2,r3,414c <__muldf3+0x678>
    40e0:	00800804 	movi	r2,32
    40e4:	10c5c83a 	sub	r2,r2,r3
    40e8:	888a983a 	sll	r5,r17,r2
    40ec:	40c8d83a 	srl	r4,r8,r3
    40f0:	4084983a 	sll	r2,r8,r2
    40f4:	88e2d83a 	srl	r17,r17,r3
    40f8:	2906b03a 	or	r3,r5,r4
    40fc:	1004c03a 	cmpne	r2,r2,zero
    4100:	1886b03a 	or	r3,r3,r2
    4104:	188001cc 	andi	r2,r3,7
    4108:	10000726 	beq	r2,zero,4128 <__muldf3+0x654>
    410c:	188003cc 	andi	r2,r3,15
    4110:	01000104 	movi	r4,4
    4114:	11000426 	beq	r2,r4,4128 <__muldf3+0x654>
    4118:	1805883a 	mov	r2,r3
    411c:	10c00104 	addi	r3,r2,4
    4120:	1885803a 	cmpltu	r2,r3,r2
    4124:	88a3883a 	add	r17,r17,r2
    4128:	8880202c 	andhi	r2,r17,128
    412c:	10001c26 	beq	r2,zero,41a0 <__muldf3+0x6cc>
    4130:	b02b883a 	mov	r21,r22
    4134:	00800044 	movi	r2,1
    4138:	000b883a 	mov	r5,zero
    413c:	0029883a 	mov	r20,zero
    4140:	003ec306 	br	3c50 <__alt_data_end+0xf8003c50>
    4144:	5805883a 	mov	r2,r11
    4148:	003f9906 	br	3fb0 <__alt_data_end+0xf8003fb0>
    414c:	00bff844 	movi	r2,-31
    4150:	1145c83a 	sub	r2,r2,r5
    4154:	8888d83a 	srl	r4,r17,r2
    4158:	00800804 	movi	r2,32
    415c:	18801a26 	beq	r3,r2,41c8 <__muldf3+0x6f4>
    4160:	00801004 	movi	r2,64
    4164:	10c5c83a 	sub	r2,r2,r3
    4168:	8884983a 	sll	r2,r17,r2
    416c:	1204b03a 	or	r2,r2,r8
    4170:	1004c03a 	cmpne	r2,r2,zero
    4174:	2084b03a 	or	r2,r4,r2
    4178:	144001cc 	andi	r17,r2,7
    417c:	88000d1e 	bne	r17,zero,41b4 <__muldf3+0x6e0>
    4180:	000b883a 	mov	r5,zero
    4184:	1028d0fa 	srli	r20,r2,3
    4188:	b02b883a 	mov	r21,r22
    418c:	0005883a 	mov	r2,zero
    4190:	a468b03a 	or	r20,r20,r17
    4194:	003eae06 	br	3c50 <__alt_data_end+0xf8003c50>
    4198:	1007883a 	mov	r3,r2
    419c:	0023883a 	mov	r17,zero
    41a0:	880a927a 	slli	r5,r17,9
    41a4:	1805883a 	mov	r2,r3
    41a8:	8822977a 	slli	r17,r17,29
    41ac:	280ad33a 	srli	r5,r5,12
    41b0:	003ff406 	br	4184 <__alt_data_end+0xf8004184>
    41b4:	10c003cc 	andi	r3,r2,15
    41b8:	01000104 	movi	r4,4
    41bc:	193ff626 	beq	r3,r4,4198 <__alt_data_end+0xf8004198>
    41c0:	0023883a 	mov	r17,zero
    41c4:	003fd506 	br	411c <__alt_data_end+0xf800411c>
    41c8:	0005883a 	mov	r2,zero
    41cc:	003fe706 	br	416c <__alt_data_end+0xf800416c>
    41d0:	00800434 	movhi	r2,16
    41d4:	89400234 	orhi	r5,r17,8
    41d8:	10bfffc4 	addi	r2,r2,-1
    41dc:	b02b883a 	mov	r21,r22
    41e0:	288a703a 	and	r5,r5,r2
    41e4:	4029883a 	mov	r20,r8
    41e8:	003eff06 	br	3de8 <__alt_data_end+0xf8003de8>

000041ec <__extendsfdf2>:
    41ec:	200ad5fa 	srli	r5,r4,23
    41f0:	defffd04 	addi	sp,sp,-12
    41f4:	dc400115 	stw	r17,4(sp)
    41f8:	29403fcc 	andi	r5,r5,255
    41fc:	29800044 	addi	r6,r5,1
    4200:	04402034 	movhi	r17,128
    4204:	dc000015 	stw	r16,0(sp)
    4208:	8c7fffc4 	addi	r17,r17,-1
    420c:	dfc00215 	stw	ra,8(sp)
    4210:	31803fcc 	andi	r6,r6,255
    4214:	00800044 	movi	r2,1
    4218:	8922703a 	and	r17,r17,r4
    421c:	2020d7fa 	srli	r16,r4,31
    4220:	1180110e 	bge	r2,r6,4268 <__extendsfdf2+0x7c>
    4224:	880cd0fa 	srli	r6,r17,3
    4228:	8822977a 	slli	r17,r17,29
    422c:	2940e004 	addi	r5,r5,896
    4230:	2941ffcc 	andi	r5,r5,2047
    4234:	2804953a 	slli	r2,r5,20
    4238:	01400434 	movhi	r5,16
    423c:	800697fa 	slli	r3,r16,31
    4240:	297fffc4 	addi	r5,r5,-1
    4244:	314a703a 	and	r5,r6,r5
    4248:	288ab03a 	or	r5,r5,r2
    424c:	28c6b03a 	or	r3,r5,r3
    4250:	8805883a 	mov	r2,r17
    4254:	dfc00217 	ldw	ra,8(sp)
    4258:	dc400117 	ldw	r17,4(sp)
    425c:	dc000017 	ldw	r16,0(sp)
    4260:	dec00304 	addi	sp,sp,12
    4264:	f800283a 	ret
    4268:	2800111e 	bne	r5,zero,42b0 <__extendsfdf2+0xc4>
    426c:	88001c26 	beq	r17,zero,42e0 <__extendsfdf2+0xf4>
    4270:	8809883a 	mov	r4,r17
    4274:	00044a40 	call	44a4 <__clzsi2>
    4278:	00c00284 	movi	r3,10
    427c:	18801b16 	blt	r3,r2,42ec <__extendsfdf2+0x100>
    4280:	018002c4 	movi	r6,11
    4284:	308dc83a 	sub	r6,r6,r2
    4288:	11000544 	addi	r4,r2,21
    428c:	8986d83a 	srl	r3,r17,r6
    4290:	8922983a 	sll	r17,r17,r4
    4294:	0180e244 	movi	r6,905
    4298:	01400434 	movhi	r5,16
    429c:	3085c83a 	sub	r2,r6,r2
    42a0:	297fffc4 	addi	r5,r5,-1
    42a4:	194c703a 	and	r6,r3,r5
    42a8:	1141ffcc 	andi	r5,r2,2047
    42ac:	003fe006 	br	4230 <__alt_data_end+0xf8004230>
    42b0:	88000826 	beq	r17,zero,42d4 <__extendsfdf2+0xe8>
    42b4:	880cd0fa 	srli	r6,r17,3
    42b8:	00800434 	movhi	r2,16
    42bc:	10bfffc4 	addi	r2,r2,-1
    42c0:	31800234 	orhi	r6,r6,8
    42c4:	8822977a 	slli	r17,r17,29
    42c8:	308c703a 	and	r6,r6,r2
    42cc:	0141ffc4 	movi	r5,2047
    42d0:	003fd706 	br	4230 <__alt_data_end+0xf8004230>
    42d4:	0141ffc4 	movi	r5,2047
    42d8:	000d883a 	mov	r6,zero
    42dc:	003fd406 	br	4230 <__alt_data_end+0xf8004230>
    42e0:	000b883a 	mov	r5,zero
    42e4:	000d883a 	mov	r6,zero
    42e8:	003fd106 	br	4230 <__alt_data_end+0xf8004230>
    42ec:	11bffd44 	addi	r6,r2,-11
    42f0:	8986983a 	sll	r3,r17,r6
    42f4:	0023883a 	mov	r17,zero
    42f8:	003fe606 	br	4294 <__alt_data_end+0xf8004294>

000042fc <__truncdfsf2>:
    42fc:	2810d53a 	srli	r8,r5,20
    4300:	01c00434 	movhi	r7,16
    4304:	39ffffc4 	addi	r7,r7,-1
    4308:	29ce703a 	and	r7,r5,r7
    430c:	4201ffcc 	andi	r8,r8,2047
    4310:	380e90fa 	slli	r7,r7,3
    4314:	200cd77a 	srli	r6,r4,29
    4318:	42400044 	addi	r9,r8,1
    431c:	4a41ffcc 	andi	r9,r9,2047
    4320:	00c00044 	movi	r3,1
    4324:	280ad7fa 	srli	r5,r5,31
    4328:	31ceb03a 	or	r7,r6,r7
    432c:	200490fa 	slli	r2,r4,3
    4330:	1a40230e 	bge	r3,r9,43c0 <__truncdfsf2+0xc4>
    4334:	40ff2004 	addi	r3,r8,-896
    4338:	01803f84 	movi	r6,254
    433c:	30c01516 	blt	r6,r3,4394 <__truncdfsf2+0x98>
    4340:	00c0380e 	bge	zero,r3,4424 <__truncdfsf2+0x128>
    4344:	200c91ba 	slli	r6,r4,6
    4348:	380e90fa 	slli	r7,r7,3
    434c:	1004d77a 	srli	r2,r2,29
    4350:	300cc03a 	cmpne	r6,r6,zero
    4354:	31ccb03a 	or	r6,r6,r7
    4358:	308cb03a 	or	r6,r6,r2
    435c:	308001cc 	andi	r2,r6,7
    4360:	10000426 	beq	r2,zero,4374 <__truncdfsf2+0x78>
    4364:	308003cc 	andi	r2,r6,15
    4368:	01000104 	movi	r4,4
    436c:	11000126 	beq	r2,r4,4374 <__truncdfsf2+0x78>
    4370:	31800104 	addi	r6,r6,4
    4374:	3081002c 	andhi	r2,r6,1024
    4378:	10001626 	beq	r2,zero,43d4 <__truncdfsf2+0xd8>
    437c:	18c00044 	addi	r3,r3,1
    4380:	00803fc4 	movi	r2,255
    4384:	18800326 	beq	r3,r2,4394 <__truncdfsf2+0x98>
    4388:	300c91ba 	slli	r6,r6,6
    438c:	300cd27a 	srli	r6,r6,9
    4390:	00000206 	br	439c <__truncdfsf2+0xa0>
    4394:	00ffffc4 	movi	r3,-1
    4398:	000d883a 	mov	r6,zero
    439c:	18c03fcc 	andi	r3,r3,255
    43a0:	180895fa 	slli	r4,r3,23
    43a4:	00c02034 	movhi	r3,128
    43a8:	280a97fa 	slli	r5,r5,31
    43ac:	18ffffc4 	addi	r3,r3,-1
    43b0:	30c6703a 	and	r3,r6,r3
    43b4:	1906b03a 	or	r3,r3,r4
    43b8:	1944b03a 	or	r2,r3,r5
    43bc:	f800283a 	ret
    43c0:	40000b1e 	bne	r8,zero,43f0 <__truncdfsf2+0xf4>
    43c4:	388cb03a 	or	r6,r7,r2
    43c8:	0007883a 	mov	r3,zero
    43cc:	30000426 	beq	r6,zero,43e0 <__truncdfsf2+0xe4>
    43d0:	01800144 	movi	r6,5
    43d4:	00803fc4 	movi	r2,255
    43d8:	300cd0fa 	srli	r6,r6,3
    43dc:	18800a26 	beq	r3,r2,4408 <__truncdfsf2+0x10c>
    43e0:	00802034 	movhi	r2,128
    43e4:	10bfffc4 	addi	r2,r2,-1
    43e8:	308c703a 	and	r6,r6,r2
    43ec:	003feb06 	br	439c <__alt_data_end+0xf800439c>
    43f0:	3888b03a 	or	r4,r7,r2
    43f4:	203fe726 	beq	r4,zero,4394 <__alt_data_end+0xf8004394>
    43f8:	380c90fa 	slli	r6,r7,3
    43fc:	00c03fc4 	movi	r3,255
    4400:	31808034 	orhi	r6,r6,512
    4404:	003fd506 	br	435c <__alt_data_end+0xf800435c>
    4408:	303fe226 	beq	r6,zero,4394 <__alt_data_end+0xf8004394>
    440c:	00802034 	movhi	r2,128
    4410:	31801034 	orhi	r6,r6,64
    4414:	10bfffc4 	addi	r2,r2,-1
    4418:	00ffffc4 	movi	r3,-1
    441c:	308c703a 	and	r6,r6,r2
    4420:	003fde06 	br	439c <__alt_data_end+0xf800439c>
    4424:	013ffa44 	movi	r4,-23
    4428:	19000e16 	blt	r3,r4,4464 <__truncdfsf2+0x168>
    442c:	01000784 	movi	r4,30
    4430:	20c9c83a 	sub	r4,r4,r3
    4434:	018007c4 	movi	r6,31
    4438:	39c02034 	orhi	r7,r7,128
    443c:	31000b16 	blt	r6,r4,446c <__truncdfsf2+0x170>
    4440:	423f2084 	addi	r8,r8,-894
    4444:	120c983a 	sll	r6,r2,r8
    4448:	3a0e983a 	sll	r7,r7,r8
    444c:	1104d83a 	srl	r2,r2,r4
    4450:	300cc03a 	cmpne	r6,r6,zero
    4454:	31ceb03a 	or	r7,r6,r7
    4458:	388cb03a 	or	r6,r7,r2
    445c:	0007883a 	mov	r3,zero
    4460:	003fbe06 	br	435c <__alt_data_end+0xf800435c>
    4464:	0007883a 	mov	r3,zero
    4468:	003fd906 	br	43d0 <__alt_data_end+0xf80043d0>
    446c:	01bfff84 	movi	r6,-2
    4470:	30cdc83a 	sub	r6,r6,r3
    4474:	00c00804 	movi	r3,32
    4478:	398cd83a 	srl	r6,r7,r6
    447c:	20c00726 	beq	r4,r3,449c <__truncdfsf2+0x1a0>
    4480:	423f2884 	addi	r8,r8,-862
    4484:	3a0e983a 	sll	r7,r7,r8
    4488:	3884b03a 	or	r2,r7,r2
    448c:	1004c03a 	cmpne	r2,r2,zero
    4490:	118cb03a 	or	r6,r2,r6
    4494:	0007883a 	mov	r3,zero
    4498:	003fb006 	br	435c <__alt_data_end+0xf800435c>
    449c:	000f883a 	mov	r7,zero
    44a0:	003ff906 	br	4488 <__alt_data_end+0xf8004488>

000044a4 <__clzsi2>:
    44a4:	00bfffd4 	movui	r2,65535
    44a8:	11000536 	bltu	r2,r4,44c0 <__clzsi2+0x1c>
    44ac:	00803fc4 	movi	r2,255
    44b0:	11000f36 	bltu	r2,r4,44f0 <__clzsi2+0x4c>
    44b4:	00800804 	movi	r2,32
    44b8:	0007883a 	mov	r3,zero
    44bc:	00000506 	br	44d4 <__clzsi2+0x30>
    44c0:	00804034 	movhi	r2,256
    44c4:	10bfffc4 	addi	r2,r2,-1
    44c8:	11000c2e 	bgeu	r2,r4,44fc <__clzsi2+0x58>
    44cc:	00800204 	movi	r2,8
    44d0:	00c00604 	movi	r3,24
    44d4:	20c8d83a 	srl	r4,r4,r3
    44d8:	00c00074 	movhi	r3,1
    44dc:	18f3dbc4 	addi	r3,r3,-12433
    44e0:	1909883a 	add	r4,r3,r4
    44e4:	20c00003 	ldbu	r3,0(r4)
    44e8:	10c5c83a 	sub	r2,r2,r3
    44ec:	f800283a 	ret
    44f0:	00800604 	movi	r2,24
    44f4:	00c00204 	movi	r3,8
    44f8:	003ff606 	br	44d4 <__alt_data_end+0xf80044d4>
    44fc:	00800404 	movi	r2,16
    4500:	1007883a 	mov	r3,r2
    4504:	003ff306 	br	44d4 <__alt_data_end+0xf80044d4>

00004508 <srand>:
    4508:	00800074 	movhi	r2,1
    450c:	10bb1904 	addi	r2,r2,-5020
    4510:	10800017 	ldw	r2,0(r2)
    4514:	11002915 	stw	r4,164(r2)
    4518:	10002a15 	stw	zero,168(r2)
    451c:	f800283a 	ret

00004520 <rand>:
    4520:	00800074 	movhi	r2,1
    4524:	defffe04 	addi	sp,sp,-8
    4528:	10bb1904 	addi	r2,r2,-5020
    452c:	dc000015 	stw	r16,0(sp)
    4530:	14000017 	ldw	r16,0(r2)
    4534:	dfc00115 	stw	ra,4(sp)
    4538:	01932574 	movhi	r6,19605
    453c:	81002917 	ldw	r4,164(r16)
    4540:	81402a17 	ldw	r5,168(r16)
    4544:	01d614b4 	movhi	r7,22610
    4548:	319fcb44 	addi	r6,r6,32557
    454c:	39fd0b44 	addi	r7,r7,-3027
    4550:	00046300 	call	4630 <__muldi3>
    4554:	11000044 	addi	r4,r2,1
    4558:	2085803a 	cmpltu	r2,r4,r2
    455c:	10c7883a 	add	r3,r2,r3
    4560:	00a00034 	movhi	r2,32768
    4564:	10bfffc4 	addi	r2,r2,-1
    4568:	1884703a 	and	r2,r3,r2
    456c:	81002915 	stw	r4,164(r16)
    4570:	80c02a15 	stw	r3,168(r16)
    4574:	dfc00117 	ldw	ra,4(sp)
    4578:	dc000017 	ldw	r16,0(sp)
    457c:	dec00204 	addi	sp,sp,8
    4580:	f800283a 	ret

00004584 <time>:
    4584:	00800074 	movhi	r2,1
    4588:	defffc04 	addi	sp,sp,-16
    458c:	10bb1904 	addi	r2,r2,-5020
    4590:	dc000215 	stw	r16,8(sp)
    4594:	2021883a 	mov	r16,r4
    4598:	11000017 	ldw	r4,0(r2)
    459c:	000d883a 	mov	r6,zero
    45a0:	d80b883a 	mov	r5,sp
    45a4:	dfc00315 	stw	ra,12(sp)
    45a8:	00045d40 	call	45d4 <_gettimeofday_r>
    45ac:	10000716 	blt	r2,zero,45cc <time+0x48>
    45b0:	d8800017 	ldw	r2,0(sp)
    45b4:	80000126 	beq	r16,zero,45bc <time+0x38>
    45b8:	80800015 	stw	r2,0(r16)
    45bc:	dfc00317 	ldw	ra,12(sp)
    45c0:	dc000217 	ldw	r16,8(sp)
    45c4:	dec00404 	addi	sp,sp,16
    45c8:	f800283a 	ret
    45cc:	00bfffc4 	movi	r2,-1
    45d0:	003ffa06 	br	45bc <__alt_data_end+0xf80045bc>

000045d4 <_gettimeofday_r>:
    45d4:	defffd04 	addi	sp,sp,-12
    45d8:	2805883a 	mov	r2,r5
    45dc:	dc000015 	stw	r16,0(sp)
    45e0:	04000074 	movhi	r16,1
    45e4:	dc400115 	stw	r17,4(sp)
    45e8:	84022404 	addi	r16,r16,2192
    45ec:	2023883a 	mov	r17,r4
    45f0:	300b883a 	mov	r5,r6
    45f4:	1009883a 	mov	r4,r2
    45f8:	dfc00215 	stw	ra,8(sp)
    45fc:	80000015 	stw	zero,0(r16)
    4600:	00046900 	call	4690 <gettimeofday>
    4604:	00ffffc4 	movi	r3,-1
    4608:	10c00526 	beq	r2,r3,4620 <_gettimeofday_r+0x4c>
    460c:	dfc00217 	ldw	ra,8(sp)
    4610:	dc400117 	ldw	r17,4(sp)
    4614:	dc000017 	ldw	r16,0(sp)
    4618:	dec00304 	addi	sp,sp,12
    461c:	f800283a 	ret
    4620:	80c00017 	ldw	r3,0(r16)
    4624:	183ff926 	beq	r3,zero,460c <__alt_data_end+0xf800460c>
    4628:	88c00015 	stw	r3,0(r17)
    462c:	003ff706 	br	460c <__alt_data_end+0xf800460c>

00004630 <__muldi3>:
    4630:	223fffcc 	andi	r8,r4,65535
    4634:	2006d43a 	srli	r3,r4,16
    4638:	32bfffcc 	andi	r10,r6,65535
    463c:	3012d43a 	srli	r9,r6,16
    4640:	4297383a 	mul	r11,r8,r10
    4644:	1a95383a 	mul	r10,r3,r10
    4648:	4251383a 	mul	r8,r8,r9
    464c:	5804d43a 	srli	r2,r11,16
    4650:	4291883a 	add	r8,r8,r10
    4654:	1205883a 	add	r2,r2,r8
    4658:	1a51383a 	mul	r8,r3,r9
    465c:	1280022e 	bgeu	r2,r10,4668 <__muldi3+0x38>
    4660:	00c00074 	movhi	r3,1
    4664:	40d1883a 	add	r8,r8,r3
    4668:	1006d43a 	srli	r3,r2,16
    466c:	21cf383a 	mul	r7,r4,r7
    4670:	314b383a 	mul	r5,r6,r5
    4674:	1004943a 	slli	r2,r2,16
    4678:	1a11883a 	add	r8,r3,r8
    467c:	5affffcc 	andi	r11,r11,65535
    4680:	3947883a 	add	r3,r7,r5
    4684:	12c5883a 	add	r2,r2,r11
    4688:	1a07883a 	add	r3,r3,r8
    468c:	f800283a 	ret

00004690 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
    4690:	defff804 	addi	sp,sp,-32
    4694:	dfc00715 	stw	ra,28(sp)
    4698:	df000615 	stw	fp,24(sp)
    469c:	dc000515 	stw	r16,20(sp)
    46a0:	df000604 	addi	fp,sp,24
    46a4:	e13ffd15 	stw	r4,-12(fp)
    46a8:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
    46ac:	e0bffe17 	ldw	r2,-8(fp)
    46b0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    46b4:	d0a71c17 	ldw	r2,-25488(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
    46b8:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    46bc:	d0a71b17 	ldw	r2,-25492(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
    46c0:	e0bffc15 	stw	r2,-16(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
    46c4:	e0bffc17 	ldw	r2,-16(fp)
    46c8:	10005f26 	beq	r2,zero,4848 <gettimeofday+0x1b8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    46cc:	d0a71517 	ldw	r2,-25516(gp)
    46d0:	1009883a 	mov	r4,r2
    46d4:	e0fffb17 	ldw	r3,-20(fp)
    46d8:	e0bffc17 	ldw	r2,-16(fp)
    46dc:	1885203a 	divu	r2,r3,r2
    46e0:	2085883a 	add	r2,r4,r2
    46e4:	1007883a 	mov	r3,r2
    46e8:	e0bffd17 	ldw	r2,-12(fp)
    46ec:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
    46f0:	d0a71617 	ldw	r2,-25512(gp)
    46f4:	1021883a 	mov	r16,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
    46f8:	e0bffb17 	ldw	r2,-20(fp)
    46fc:	1011883a 	mov	r8,r2
    4700:	0013883a 	mov	r9,zero
    4704:	008003f4 	movhi	r2,15
    4708:	10909004 	addi	r2,r2,16960
    470c:	e0fffc17 	ldw	r3,-16(fp)
    4710:	10c5203a 	divu	r2,r2,r3
    4714:	1015883a 	mov	r10,r2
    4718:	0017883a 	mov	r11,zero
    471c:	500d883a 	mov	r6,r10
    4720:	580f883a 	mov	r7,r11
    4724:	4009883a 	mov	r4,r8
    4728:	480b883a 	mov	r5,r9
    472c:	00046300 	call	4630 <__muldi3>
    4730:	1009883a 	mov	r4,r2
    4734:	180b883a 	mov	r5,r3
    4738:	2005883a 	mov	r2,r4
    473c:	2807883a 	mov	r3,r5
    4740:	018003f4 	movhi	r6,15
    4744:	31909004 	addi	r6,r6,16960
    4748:	000f883a 	mov	r7,zero
    474c:	1009883a 	mov	r4,r2
    4750:	180b883a 	mov	r5,r3
    4754:	000c81c0 	call	c81c <__umoddi3>
    4758:	1009883a 	mov	r4,r2
    475c:	180b883a 	mov	r5,r3
    4760:	2005883a 	mov	r2,r4
    4764:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
    4768:	8085883a 	add	r2,r16,r2
    476c:	1007883a 	mov	r3,r2
    4770:	e0bffd17 	ldw	r2,-12(fp)
    4774:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    4778:	00001406 	br	47cc <gettimeofday+0x13c>
      if (ptimeval->tv_sec <= 0)
    477c:	e0bffd17 	ldw	r2,-12(fp)
    4780:	10800017 	ldw	r2,0(r2)
    4784:	00800516 	blt	zero,r2,479c <gettimeofday+0x10c>
      {
          ptimeval->tv_sec = 0;
    4788:	e0bffd17 	ldw	r2,-12(fp)
    478c:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
    4790:	e0bffd17 	ldw	r2,-12(fp)
    4794:	10000115 	stw	zero,4(r2)
          break;
    4798:	00000f06 	br	47d8 <gettimeofday+0x148>
      }
      else
      {
          ptimeval->tv_sec--;
    479c:	e0bffd17 	ldw	r2,-12(fp)
    47a0:	10800017 	ldw	r2,0(r2)
    47a4:	10ffffc4 	addi	r3,r2,-1
    47a8:	e0bffd17 	ldw	r2,-12(fp)
    47ac:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
    47b0:	e0bffd17 	ldw	r2,-12(fp)
    47b4:	10c00117 	ldw	r3,4(r2)
    47b8:	008003f4 	movhi	r2,15
    47bc:	10909004 	addi	r2,r2,16960
    47c0:	1887883a 	add	r3,r3,r2
    47c4:	e0bffd17 	ldw	r2,-12(fp)
    47c8:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
    47cc:	e0bffd17 	ldw	r2,-12(fp)
    47d0:	10800117 	ldw	r2,4(r2)
    47d4:	103fe916 	blt	r2,zero,477c <__alt_data_end+0xf800477c>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    47d8:	00000c06 	br	480c <gettimeofday+0x17c>
      ptimeval->tv_sec++;
    47dc:	e0bffd17 	ldw	r2,-12(fp)
    47e0:	10800017 	ldw	r2,0(r2)
    47e4:	10c00044 	addi	r3,r2,1
    47e8:	e0bffd17 	ldw	r2,-12(fp)
    47ec:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
    47f0:	e0bffd17 	ldw	r2,-12(fp)
    47f4:	10c00117 	ldw	r3,4(r2)
    47f8:	00bffc74 	movhi	r2,65521
    47fc:	10af7004 	addi	r2,r2,-16960
    4800:	1887883a 	add	r3,r3,r2
    4804:	e0bffd17 	ldw	r2,-12(fp)
    4808:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
    480c:	e0bffd17 	ldw	r2,-12(fp)
    4810:	10c00117 	ldw	r3,4(r2)
    4814:	008003f4 	movhi	r2,15
    4818:	10908fc4 	addi	r2,r2,16959
    481c:	10ffef16 	blt	r2,r3,47dc <__alt_data_end+0xf80047dc>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    4820:	e0bffa17 	ldw	r2,-24(fp)
    4824:	10000626 	beq	r2,zero,4840 <gettimeofday+0x1b0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
    4828:	d0e71317 	ldw	r3,-25524(gp)
    482c:	e0bffa17 	ldw	r2,-24(fp)
    4830:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    4834:	d0e71417 	ldw	r3,-25520(gp)
    4838:	e0bffa17 	ldw	r2,-24(fp)
    483c:	10c00115 	stw	r3,4(r2)
    }

    return 0;
    4840:	0005883a 	mov	r2,zero
    4844:	00000106 	br	484c <gettimeofday+0x1bc>
  }

  return -ENOTSUP;
    4848:	00bfde84 	movi	r2,-134
}
    484c:	e6ffff04 	addi	sp,fp,-4
    4850:	dfc00217 	ldw	ra,8(sp)
    4854:	df000117 	ldw	fp,4(sp)
    4858:	dc000017 	ldw	r16,0(sp)
    485c:	dec00304 	addi	sp,sp,12
    4860:	f800283a 	ret

00004864 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4864:	defff904 	addi	sp,sp,-28
    4868:	dfc00615 	stw	ra,24(sp)
    486c:	df000515 	stw	fp,20(sp)
    4870:	df000504 	addi	fp,sp,20
    4874:	e13ffc15 	stw	r4,-16(fp)
    4878:	e17ffd15 	stw	r5,-12(fp)
    487c:	e1bffe15 	stw	r6,-8(fp)
    4880:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    4884:	e0800217 	ldw	r2,8(fp)
    4888:	d8800015 	stw	r2,0(sp)
    488c:	e1ffff17 	ldw	r7,-4(fp)
    4890:	e1bffe17 	ldw	r6,-8(fp)
    4894:	e17ffd17 	ldw	r5,-12(fp)
    4898:	e13ffc17 	ldw	r4,-16(fp)
    489c:	0004a140 	call	4a14 <alt_iic_isr_register>
}  
    48a0:	e037883a 	mov	sp,fp
    48a4:	dfc00117 	ldw	ra,4(sp)
    48a8:	df000017 	ldw	fp,0(sp)
    48ac:	dec00204 	addi	sp,sp,8
    48b0:	f800283a 	ret

000048b4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    48b4:	defff904 	addi	sp,sp,-28
    48b8:	df000615 	stw	fp,24(sp)
    48bc:	df000604 	addi	fp,sp,24
    48c0:	e13ffe15 	stw	r4,-8(fp)
    48c4:	e17fff15 	stw	r5,-4(fp)
    48c8:	e0bfff17 	ldw	r2,-4(fp)
    48cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    48d0:	0005303a 	rdctl	r2,status
    48d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48d8:	e0fffb17 	ldw	r3,-20(fp)
    48dc:	00bfff84 	movi	r2,-2
    48e0:	1884703a 	and	r2,r3,r2
    48e4:	1001703a 	wrctl	status,r2
  
  return context;
    48e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    48ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    48f0:	00c00044 	movi	r3,1
    48f4:	e0bffa17 	ldw	r2,-24(fp)
    48f8:	1884983a 	sll	r2,r3,r2
    48fc:	1007883a 	mov	r3,r2
    4900:	d0a71717 	ldw	r2,-25508(gp)
    4904:	1884b03a 	or	r2,r3,r2
    4908:	d0a71715 	stw	r2,-25508(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    490c:	d0a71717 	ldw	r2,-25508(gp)
    4910:	100170fa 	wrctl	ienable,r2
    4914:	e0bffc17 	ldw	r2,-16(fp)
    4918:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    491c:	e0bffd17 	ldw	r2,-12(fp)
    4920:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4924:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    4928:	0001883a 	nop
}
    492c:	e037883a 	mov	sp,fp
    4930:	df000017 	ldw	fp,0(sp)
    4934:	dec00104 	addi	sp,sp,4
    4938:	f800283a 	ret

0000493c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    493c:	defff904 	addi	sp,sp,-28
    4940:	df000615 	stw	fp,24(sp)
    4944:	df000604 	addi	fp,sp,24
    4948:	e13ffe15 	stw	r4,-8(fp)
    494c:	e17fff15 	stw	r5,-4(fp)
    4950:	e0bfff17 	ldw	r2,-4(fp)
    4954:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4958:	0005303a 	rdctl	r2,status
    495c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4960:	e0fffb17 	ldw	r3,-20(fp)
    4964:	00bfff84 	movi	r2,-2
    4968:	1884703a 	and	r2,r3,r2
    496c:	1001703a 	wrctl	status,r2
  
  return context;
    4970:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4974:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    4978:	00c00044 	movi	r3,1
    497c:	e0bffa17 	ldw	r2,-24(fp)
    4980:	1884983a 	sll	r2,r3,r2
    4984:	0084303a 	nor	r2,zero,r2
    4988:	1007883a 	mov	r3,r2
    498c:	d0a71717 	ldw	r2,-25508(gp)
    4990:	1884703a 	and	r2,r3,r2
    4994:	d0a71715 	stw	r2,-25508(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4998:	d0a71717 	ldw	r2,-25508(gp)
    499c:	100170fa 	wrctl	ienable,r2
    49a0:	e0bffc17 	ldw	r2,-16(fp)
    49a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49a8:	e0bffd17 	ldw	r2,-12(fp)
    49ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    49b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    49b4:	0001883a 	nop
}
    49b8:	e037883a 	mov	sp,fp
    49bc:	df000017 	ldw	fp,0(sp)
    49c0:	dec00104 	addi	sp,sp,4
    49c4:	f800283a 	ret

000049c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    49c8:	defffc04 	addi	sp,sp,-16
    49cc:	df000315 	stw	fp,12(sp)
    49d0:	df000304 	addi	fp,sp,12
    49d4:	e13ffe15 	stw	r4,-8(fp)
    49d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    49dc:	000530fa 	rdctl	r2,ienable
    49e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    49e4:	00c00044 	movi	r3,1
    49e8:	e0bfff17 	ldw	r2,-4(fp)
    49ec:	1884983a 	sll	r2,r3,r2
    49f0:	1007883a 	mov	r3,r2
    49f4:	e0bffd17 	ldw	r2,-12(fp)
    49f8:	1884703a 	and	r2,r3,r2
    49fc:	1004c03a 	cmpne	r2,r2,zero
    4a00:	10803fcc 	andi	r2,r2,255
}
    4a04:	e037883a 	mov	sp,fp
    4a08:	df000017 	ldw	fp,0(sp)
    4a0c:	dec00104 	addi	sp,sp,4
    4a10:	f800283a 	ret

00004a14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4a14:	defff504 	addi	sp,sp,-44
    4a18:	dfc00a15 	stw	ra,40(sp)
    4a1c:	df000915 	stw	fp,36(sp)
    4a20:	df000904 	addi	fp,sp,36
    4a24:	e13ffc15 	stw	r4,-16(fp)
    4a28:	e17ffd15 	stw	r5,-12(fp)
    4a2c:	e1bffe15 	stw	r6,-8(fp)
    4a30:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    4a34:	00bffa84 	movi	r2,-22
    4a38:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4a3c:	e0bffd17 	ldw	r2,-12(fp)
    4a40:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    4a44:	e0bff817 	ldw	r2,-32(fp)
    4a48:	10800808 	cmpgei	r2,r2,32
    4a4c:	1000271e 	bne	r2,zero,4aec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a50:	0005303a 	rdctl	r2,status
    4a54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a58:	e0fffb17 	ldw	r3,-20(fp)
    4a5c:	00bfff84 	movi	r2,-2
    4a60:	1884703a 	and	r2,r3,r2
    4a64:	1001703a 	wrctl	status,r2
  
  return context;
    4a68:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    4a6c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    4a70:	00800074 	movhi	r2,1
    4a74:	10823c04 	addi	r2,r2,2288
    4a78:	e0fff817 	ldw	r3,-32(fp)
    4a7c:	180690fa 	slli	r3,r3,3
    4a80:	10c5883a 	add	r2,r2,r3
    4a84:	e0fffe17 	ldw	r3,-8(fp)
    4a88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    4a8c:	00800074 	movhi	r2,1
    4a90:	10823c04 	addi	r2,r2,2288
    4a94:	e0fff817 	ldw	r3,-32(fp)
    4a98:	180690fa 	slli	r3,r3,3
    4a9c:	10c5883a 	add	r2,r2,r3
    4aa0:	10800104 	addi	r2,r2,4
    4aa4:	e0ffff17 	ldw	r3,-4(fp)
    4aa8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4aac:	e0bffe17 	ldw	r2,-8(fp)
    4ab0:	10000526 	beq	r2,zero,4ac8 <alt_iic_isr_register+0xb4>
    4ab4:	e0bff817 	ldw	r2,-32(fp)
    4ab8:	100b883a 	mov	r5,r2
    4abc:	e13ffc17 	ldw	r4,-16(fp)
    4ac0:	00048b40 	call	48b4 <alt_ic_irq_enable>
    4ac4:	00000406 	br	4ad8 <alt_iic_isr_register+0xc4>
    4ac8:	e0bff817 	ldw	r2,-32(fp)
    4acc:	100b883a 	mov	r5,r2
    4ad0:	e13ffc17 	ldw	r4,-16(fp)
    4ad4:	000493c0 	call	493c <alt_ic_irq_disable>
    4ad8:	e0bff715 	stw	r2,-36(fp)
    4adc:	e0bffa17 	ldw	r2,-24(fp)
    4ae0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ae4:	e0bff917 	ldw	r2,-28(fp)
    4ae8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    4aec:	e0bff717 	ldw	r2,-36(fp)
}
    4af0:	e037883a 	mov	sp,fp
    4af4:	dfc00117 	ldw	ra,4(sp)
    4af8:	df000017 	ldw	fp,0(sp)
    4afc:	dec00204 	addi	sp,sp,8
    4b00:	f800283a 	ret

00004b04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4b04:	defffc04 	addi	sp,sp,-16
    4b08:	df000315 	stw	fp,12(sp)
    4b0c:	df000304 	addi	fp,sp,12
    4b10:	e13ffd15 	stw	r4,-12(fp)
    4b14:	e17ffe15 	stw	r5,-8(fp)
    4b18:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4b1c:	e0fffe17 	ldw	r3,-8(fp)
    4b20:	e0bffd17 	ldw	r2,-12(fp)
    4b24:	18800c26 	beq	r3,r2,4b58 <alt_load_section+0x54>
  {
    while( to != end )
    4b28:	00000806 	br	4b4c <alt_load_section+0x48>
    {
      *to++ = *from++;
    4b2c:	e0bffe17 	ldw	r2,-8(fp)
    4b30:	10c00104 	addi	r3,r2,4
    4b34:	e0fffe15 	stw	r3,-8(fp)
    4b38:	e0fffd17 	ldw	r3,-12(fp)
    4b3c:	19000104 	addi	r4,r3,4
    4b40:	e13ffd15 	stw	r4,-12(fp)
    4b44:	18c00017 	ldw	r3,0(r3)
    4b48:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4b4c:	e0fffe17 	ldw	r3,-8(fp)
    4b50:	e0bfff17 	ldw	r2,-4(fp)
    4b54:	18bff51e 	bne	r3,r2,4b2c <__alt_data_end+0xf8004b2c>
    {
      *to++ = *from++;
    }
  }
}
    4b58:	0001883a 	nop
    4b5c:	e037883a 	mov	sp,fp
    4b60:	df000017 	ldw	fp,0(sp)
    4b64:	dec00104 	addi	sp,sp,4
    4b68:	f800283a 	ret

00004b6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4b6c:	defffe04 	addi	sp,sp,-8
    4b70:	dfc00115 	stw	ra,4(sp)
    4b74:	df000015 	stw	fp,0(sp)
    4b78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4b7c:	01800074 	movhi	r6,1
    4b80:	31bb2304 	addi	r6,r6,-4980
    4b84:	01400074 	movhi	r5,1
    4b88:	29743c04 	addi	r5,r5,-12048
    4b8c:	01000074 	movhi	r4,1
    4b90:	213b2304 	addi	r4,r4,-4980
    4b94:	0004b040 	call	4b04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4b98:	01800034 	movhi	r6,0
    4b9c:	31807004 	addi	r6,r6,448
    4ba0:	01400034 	movhi	r5,0
    4ba4:	29400804 	addi	r5,r5,32
    4ba8:	01000034 	movhi	r4,0
    4bac:	21000804 	addi	r4,r4,32
    4bb0:	0004b040 	call	4b04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4bb4:	01800074 	movhi	r6,1
    4bb8:	31b43c04 	addi	r6,r6,-12048
    4bbc:	01400074 	movhi	r5,1
    4bc0:	2973cf04 	addi	r5,r5,-12484
    4bc4:	01000074 	movhi	r4,1
    4bc8:	2133cf04 	addi	r4,r4,-12484
    4bcc:	0004b040 	call	4b04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    4bd0:	000b9ac0 	call	b9ac <alt_dcache_flush_all>
  alt_icache_flush_all();
    4bd4:	000bc500 	call	bc50 <alt_icache_flush_all>
}
    4bd8:	0001883a 	nop
    4bdc:	e037883a 	mov	sp,fp
    4be0:	dfc00117 	ldw	ra,4(sp)
    4be4:	df000017 	ldw	fp,0(sp)
    4be8:	dec00204 	addi	sp,sp,8
    4bec:	f800283a 	ret

00004bf0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4bf0:	defffd04 	addi	sp,sp,-12
    4bf4:	dfc00215 	stw	ra,8(sp)
    4bf8:	df000115 	stw	fp,4(sp)
    4bfc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4c00:	0009883a 	mov	r4,zero
    4c04:	0004e440 	call	4e44 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4c08:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4c0c:	0004e7c0 	call	4e7c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    4c10:	01800074 	movhi	r6,1
    4c14:	31b41d04 	addi	r6,r6,-12172
    4c18:	01400074 	movhi	r5,1
    4c1c:	29741d04 	addi	r5,r5,-12172
    4c20:	01000074 	movhi	r4,1
    4c24:	21341d04 	addi	r4,r4,-12172
    4c28:	000bd480 	call	bd48 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4c2c:	000bb000 	call	bb00 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4c30:	01000074 	movhi	r4,1
    4c34:	212ed804 	addi	r4,r4,-17568
    4c38:	000c2dc0 	call	c2dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4c3c:	d0a71817 	ldw	r2,-25504(gp)
    4c40:	d0e71917 	ldw	r3,-25500(gp)
    4c44:	d1271a17 	ldw	r4,-25496(gp)
    4c48:	200d883a 	mov	r6,r4
    4c4c:	180b883a 	mov	r5,r3
    4c50:	1009883a 	mov	r4,r2
    4c54:	000020c0 	call	20c <main>
    4c58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    4c5c:	01000044 	movi	r4,1
    4c60:	000b8dc0 	call	b8dc <close>
  exit (result);
    4c64:	e13fff17 	ldw	r4,-4(fp)
    4c68:	000c2f00 	call	c2f0 <exit>

00004c6c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4c6c:	defffa04 	addi	sp,sp,-24
    4c70:	df000515 	stw	fp,20(sp)
    4c74:	df000504 	addi	fp,sp,20
    4c78:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c7c:	0005303a 	rdctl	r2,status
    4c80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c84:	e0fffc17 	ldw	r3,-16(fp)
    4c88:	00bfff84 	movi	r2,-2
    4c8c:	1884703a 	and	r2,r3,r2
    4c90:	1001703a 	wrctl	status,r2
  
  return context;
    4c94:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4c98:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    4c9c:	e0bfff17 	ldw	r2,-4(fp)
    4ca0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4ca4:	e0bffd17 	ldw	r2,-12(fp)
    4ca8:	10800017 	ldw	r2,0(r2)
    4cac:	e0fffd17 	ldw	r3,-12(fp)
    4cb0:	18c00117 	ldw	r3,4(r3)
    4cb4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    4cb8:	e0bffd17 	ldw	r2,-12(fp)
    4cbc:	10800117 	ldw	r2,4(r2)
    4cc0:	e0fffd17 	ldw	r3,-12(fp)
    4cc4:	18c00017 	ldw	r3,0(r3)
    4cc8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4ccc:	e0bffd17 	ldw	r2,-12(fp)
    4cd0:	e0fffd17 	ldw	r3,-12(fp)
    4cd4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    4cd8:	e0bffd17 	ldw	r2,-12(fp)
    4cdc:	e0fffd17 	ldw	r3,-12(fp)
    4ce0:	10c00015 	stw	r3,0(r2)
    4ce4:	e0bffb17 	ldw	r2,-20(fp)
    4ce8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4cec:	e0bffe17 	ldw	r2,-8(fp)
    4cf0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    4cf4:	0001883a 	nop
    4cf8:	e037883a 	mov	sp,fp
    4cfc:	df000017 	ldw	fp,0(sp)
    4d00:	dec00104 	addi	sp,sp,4
    4d04:	f800283a 	ret

00004d08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    4d08:	defffb04 	addi	sp,sp,-20
    4d0c:	dfc00415 	stw	ra,16(sp)
    4d10:	df000315 	stw	fp,12(sp)
    4d14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    4d18:	d0a00917 	ldw	r2,-32732(gp)
    4d1c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    4d20:	d0a71c17 	ldw	r2,-25488(gp)
    4d24:	10800044 	addi	r2,r2,1
    4d28:	d0a71c15 	stw	r2,-25488(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4d2c:	00002e06 	br	4de8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    4d30:	e0bffd17 	ldw	r2,-12(fp)
    4d34:	10800017 	ldw	r2,0(r2)
    4d38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    4d3c:	e0bffd17 	ldw	r2,-12(fp)
    4d40:	10800403 	ldbu	r2,16(r2)
    4d44:	10803fcc 	andi	r2,r2,255
    4d48:	10000426 	beq	r2,zero,4d5c <alt_tick+0x54>
    4d4c:	d0a71c17 	ldw	r2,-25488(gp)
    4d50:	1000021e 	bne	r2,zero,4d5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    4d54:	e0bffd17 	ldw	r2,-12(fp)
    4d58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4d5c:	e0bffd17 	ldw	r2,-12(fp)
    4d60:	10800217 	ldw	r2,8(r2)
    4d64:	d0e71c17 	ldw	r3,-25488(gp)
    4d68:	18801d36 	bltu	r3,r2,4de0 <alt_tick+0xd8>
    4d6c:	e0bffd17 	ldw	r2,-12(fp)
    4d70:	10800403 	ldbu	r2,16(r2)
    4d74:	10803fcc 	andi	r2,r2,255
    4d78:	1000191e 	bne	r2,zero,4de0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    4d7c:	e0bffd17 	ldw	r2,-12(fp)
    4d80:	10800317 	ldw	r2,12(r2)
    4d84:	e0fffd17 	ldw	r3,-12(fp)
    4d88:	18c00517 	ldw	r3,20(r3)
    4d8c:	1809883a 	mov	r4,r3
    4d90:	103ee83a 	callr	r2
    4d94:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4d98:	e0bfff17 	ldw	r2,-4(fp)
    4d9c:	1000031e 	bne	r2,zero,4dac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    4da0:	e13ffd17 	ldw	r4,-12(fp)
    4da4:	0004c6c0 	call	4c6c <alt_alarm_stop>
    4da8:	00000d06 	br	4de0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    4dac:	e0bffd17 	ldw	r2,-12(fp)
    4db0:	10c00217 	ldw	r3,8(r2)
    4db4:	e0bfff17 	ldw	r2,-4(fp)
    4db8:	1887883a 	add	r3,r3,r2
    4dbc:	e0bffd17 	ldw	r2,-12(fp)
    4dc0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4dc4:	e0bffd17 	ldw	r2,-12(fp)
    4dc8:	10c00217 	ldw	r3,8(r2)
    4dcc:	d0a71c17 	ldw	r2,-25488(gp)
    4dd0:	1880032e 	bgeu	r3,r2,4de0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    4dd4:	e0bffd17 	ldw	r2,-12(fp)
    4dd8:	00c00044 	movi	r3,1
    4ddc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    4de0:	e0bffe17 	ldw	r2,-8(fp)
    4de4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4de8:	e0fffd17 	ldw	r3,-12(fp)
    4dec:	d0a00904 	addi	r2,gp,-32732
    4df0:	18bfcf1e 	bne	r3,r2,4d30 <__alt_data_end+0xf8004d30>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    4df4:	0001883a 	nop
}
    4df8:	0001883a 	nop
    4dfc:	e037883a 	mov	sp,fp
    4e00:	dfc00117 	ldw	ra,4(sp)
    4e04:	df000017 	ldw	fp,0(sp)
    4e08:	dec00204 	addi	sp,sp,8
    4e0c:	f800283a 	ret

00004e10 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4e10:	defffd04 	addi	sp,sp,-12
    4e14:	dfc00215 	stw	ra,8(sp)
    4e18:	df000115 	stw	fp,4(sp)
    4e1c:	df000104 	addi	fp,sp,4
    4e20:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4e24:	d1600d04 	addi	r5,gp,-32716
    4e28:	e13fff17 	ldw	r4,-4(fp)
    4e2c:	000ba5c0 	call	ba5c <alt_dev_llist_insert>
}
    4e30:	e037883a 	mov	sp,fp
    4e34:	dfc00117 	ldw	ra,4(sp)
    4e38:	df000017 	ldw	fp,0(sp)
    4e3c:	dec00204 	addi	sp,sp,8
    4e40:	f800283a 	ret

00004e44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4e44:	defffd04 	addi	sp,sp,-12
    4e48:	dfc00215 	stw	ra,8(sp)
    4e4c:	df000115 	stw	fp,4(sp)
    4e50:	df000104 	addi	fp,sp,4
    4e54:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    4e58:	000c07c0 	call	c07c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4e5c:	00800044 	movi	r2,1
    4e60:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4e64:	0001883a 	nop
    4e68:	e037883a 	mov	sp,fp
    4e6c:	dfc00117 	ldw	ra,4(sp)
    4e70:	df000017 	ldw	fp,0(sp)
    4e74:	dec00204 	addi	sp,sp,8
    4e78:	f800283a 	ret

00004e7c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4e7c:	defffd04 	addi	sp,sp,-12
    4e80:	dfc00215 	stw	ra,8(sp)
    4e84:	df000115 	stw	fp,4(sp)
    4e88:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    4e8c:	01c0fa04 	movi	r7,1000
    4e90:	018000c4 	movi	r6,3
    4e94:	000b883a 	mov	r5,zero
    4e98:	01020834 	movhi	r4,2080
    4e9c:	21053004 	addi	r4,r4,5312
    4ea0:	0009f6c0 	call	9f6c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_TIMER_INIT ( TIMER_3, timer_3);
    ALTERA_AVALON_TIMER_INIT ( TIMER_4, timer_4);
    ALTERA_AVALON_TIMER_INIT ( TIMER_5, timer_5);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    4ea4:	000d883a 	mov	r6,zero
    4ea8:	000b883a 	mov	r5,zero
    4eac:	01000074 	movhi	r4,1
    4eb0:	21363804 	addi	r4,r4,-10016
    4eb4:	00095f00 	call	95f0 <altera_avalon_jtag_uart_init>
    4eb8:	01000074 	movhi	r4,1
    4ebc:	21362e04 	addi	r4,r4,-10056
    4ec0:	0004e100 	call	4e10 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( RS_232, rs_232);
    4ec4:	01800244 	movi	r6,9
    4ec8:	000b883a 	mov	r5,zero
    4ecc:	01000074 	movhi	r4,1
    4ed0:	213a5004 	addi	r4,r4,-5824
    4ed4:	000a0f80 	call	a0f8 <altera_avalon_uart_init>
    4ed8:	01000074 	movhi	r4,1
    4edc:	213a4604 	addi	r4,r4,-5864
    4ee0:	0004e100 	call	4e10 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
    4ee4:	00800074 	movhi	r2,1
    4ee8:	10ba7704 	addi	r2,r2,-5668
    4eec:	10800a17 	ldw	r2,40(r2)
    4ef0:	10800017 	ldw	r2,0(r2)
    4ef4:	1007883a 	mov	r3,r2
    4ef8:	00800074 	movhi	r2,1
    4efc:	10ba7704 	addi	r2,r2,-5668
    4f00:	10c00b15 	stw	r3,44(r2)
    4f04:	00800074 	movhi	r2,1
    4f08:	10ba7704 	addi	r2,r2,-5668
    4f0c:	10800a17 	ldw	r2,40(r2)
    4f10:	10800104 	addi	r2,r2,4
    4f14:	10800017 	ldw	r2,0(r2)
    4f18:	1007883a 	mov	r3,r2
    4f1c:	00800074 	movhi	r2,1
    4f20:	10ba7704 	addi	r2,r2,-5668
    4f24:	10c00c15 	stw	r3,48(r2)
    4f28:	00800074 	movhi	r2,1
    4f2c:	10ba7704 	addi	r2,r2,-5668
    4f30:	10800a17 	ldw	r2,40(r2)
    4f34:	10800204 	addi	r2,r2,8
    4f38:	10800017 	ldw	r2,0(r2)
    4f3c:	10ffffcc 	andi	r3,r2,65535
    4f40:	00800074 	movhi	r2,1
    4f44:	10ba7704 	addi	r2,r2,-5668
    4f48:	10c00f15 	stw	r3,60(r2)
    4f4c:	00800074 	movhi	r2,1
    4f50:	10ba7704 	addi	r2,r2,-5668
    4f54:	10800a17 	ldw	r2,40(r2)
    4f58:	10800204 	addi	r2,r2,8
    4f5c:	10800017 	ldw	r2,0(r2)
    4f60:	1006d43a 	srli	r3,r2,16
    4f64:	00800074 	movhi	r2,1
    4f68:	10ba7704 	addi	r2,r2,-5668
    4f6c:	10c01015 	stw	r3,64(r2)
    4f70:	00800074 	movhi	r2,1
    4f74:	10ba7704 	addi	r2,r2,-5668
    4f78:	10800a17 	ldw	r2,40(r2)
    4f7c:	10800304 	addi	r2,r2,12
    4f80:	10800017 	ldw	r2,0(r2)
    4f84:	1005d07a 	srai	r2,r2,1
    4f88:	10c0004c 	andi	r3,r2,1
    4f8c:	00800074 	movhi	r2,1
    4f90:	10ba7704 	addi	r2,r2,-5668
    4f94:	10c00d15 	stw	r3,52(r2)
    4f98:	00800074 	movhi	r2,1
    4f9c:	10ba7704 	addi	r2,r2,-5668
    4fa0:	10800a17 	ldw	r2,40(r2)
    4fa4:	10800304 	addi	r2,r2,12
    4fa8:	10800017 	ldw	r2,0(r2)
    4fac:	1005d13a 	srai	r2,r2,4
    4fb0:	10c003cc 	andi	r3,r2,15
    4fb4:	00800074 	movhi	r2,1
    4fb8:	10ba7704 	addi	r2,r2,-5668
    4fbc:	10c00e15 	stw	r3,56(r2)
    4fc0:	00800074 	movhi	r2,1
    4fc4:	10ba7704 	addi	r2,r2,-5668
    4fc8:	10800a17 	ldw	r2,40(r2)
    4fcc:	10800304 	addi	r2,r2,12
    4fd0:	10800017 	ldw	r2,0(r2)
    4fd4:	1005d43a 	srai	r2,r2,16
    4fd8:	e0bfff05 	stb	r2,-4(fp)
    4fdc:	00800074 	movhi	r2,1
    4fe0:	10ba7704 	addi	r2,r2,-5668
    4fe4:	10800a17 	ldw	r2,40(r2)
    4fe8:	10800304 	addi	r2,r2,12
    4fec:	10800017 	ldw	r2,0(r2)
    4ff0:	1004d63a 	srli	r2,r2,24
    4ff4:	e0bfff45 	stb	r2,-3(fp)
    4ff8:	00800074 	movhi	r2,1
    4ffc:	10ba7704 	addi	r2,r2,-5668
    5000:	10800e17 	ldw	r2,56(r2)
    5004:	10800058 	cmpnei	r2,r2,1
    5008:	1000041e 	bne	r2,zero,501c <alt_sys_init+0x1a0>
    500c:	00800074 	movhi	r2,1
    5010:	10ba7704 	addi	r2,r2,-5668
    5014:	10001115 	stw	zero,68(r2)
    5018:	00000e06 	br	5054 <alt_sys_init+0x1d8>
    501c:	00800074 	movhi	r2,1
    5020:	10ba7704 	addi	r2,r2,-5668
    5024:	10800e17 	ldw	r2,56(r2)
    5028:	10800098 	cmpnei	r2,r2,2
    502c:	1000051e 	bne	r2,zero,5044 <alt_sys_init+0x1c8>
    5030:	00800074 	movhi	r2,1
    5034:	10ba7704 	addi	r2,r2,-5668
    5038:	00c00044 	movi	r3,1
    503c:	10c01115 	stw	r3,68(r2)
    5040:	00000406 	br	5054 <alt_sys_init+0x1d8>
    5044:	00800074 	movhi	r2,1
    5048:	10ba7704 	addi	r2,r2,-5668
    504c:	00c00084 	movi	r3,2
    5050:	10c01115 	stw	r3,68(r2)
    5054:	e0bfff03 	ldbu	r2,-4(fp)
    5058:	00c00804 	movi	r3,32
    505c:	1885c83a 	sub	r2,r3,r2
    5060:	00ffffc4 	movi	r3,-1
    5064:	1886d83a 	srl	r3,r3,r2
    5068:	00800074 	movhi	r2,1
    506c:	10ba7704 	addi	r2,r2,-5668
    5070:	10c01215 	stw	r3,72(r2)
    5074:	e0ffff03 	ldbu	r3,-4(fp)
    5078:	00800074 	movhi	r2,1
    507c:	10ba7704 	addi	r2,r2,-5668
    5080:	10801117 	ldw	r2,68(r2)
    5084:	1887883a 	add	r3,r3,r2
    5088:	00800074 	movhi	r2,1
    508c:	10ba7704 	addi	r2,r2,-5668
    5090:	10c01315 	stw	r3,76(r2)
    5094:	e0bfff43 	ldbu	r2,-3(fp)
    5098:	00c00804 	movi	r3,32
    509c:	1885c83a 	sub	r2,r3,r2
    50a0:	00ffffc4 	movi	r3,-1
    50a4:	1886d83a 	srl	r3,r3,r2
    50a8:	00800074 	movhi	r2,1
    50ac:	10ba7704 	addi	r2,r2,-5668
    50b0:	10c01415 	stw	r3,80(r2)
    50b4:	01000074 	movhi	r4,1
    50b8:	213a7704 	addi	r4,r4,-5668
    50bc:	0004e100 	call	4e10 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( PIXEL_RGB_RESAMPLER, pixel_rgb_resampler);
    50c0:	00800074 	movhi	r2,1
    50c4:	10ba8c04 	addi	r2,r2,-5584
    50c8:	10800a17 	ldw	r2,40(r2)
    50cc:	10800017 	ldw	r2,0(r2)
    50d0:	10c003cc 	andi	r3,r2,15
    50d4:	00800074 	movhi	r2,1
    50d8:	10ba8c04 	addi	r2,r2,-5584
    50dc:	10c00b15 	stw	r3,44(r2)
    50e0:	00800074 	movhi	r2,1
    50e4:	10ba8c04 	addi	r2,r2,-5584
    50e8:	10800a17 	ldw	r2,40(r2)
    50ec:	10800017 	ldw	r2,0(r2)
    50f0:	1005d13a 	srai	r2,r2,4
    50f4:	10c0004c 	andi	r3,r2,1
    50f8:	00800074 	movhi	r2,1
    50fc:	10ba8c04 	addi	r2,r2,-5584
    5100:	10c00c15 	stw	r3,48(r2)
    5104:	00800074 	movhi	r2,1
    5108:	10ba8c04 	addi	r2,r2,-5584
    510c:	10800a17 	ldw	r2,40(r2)
    5110:	10800017 	ldw	r2,0(r2)
    5114:	1005d17a 	srai	r2,r2,5
    5118:	10c0004c 	andi	r3,r2,1
    511c:	00800074 	movhi	r2,1
    5120:	10ba8c04 	addi	r2,r2,-5584
    5124:	10c00d15 	stw	r3,52(r2)
    5128:	00800074 	movhi	r2,1
    512c:	10ba8c04 	addi	r2,r2,-5584
    5130:	10800a17 	ldw	r2,40(r2)
    5134:	10800017 	ldw	r2,0(r2)
    5138:	1005d43a 	srai	r2,r2,16
    513c:	10c003cc 	andi	r3,r2,15
    5140:	00800074 	movhi	r2,1
    5144:	10ba8c04 	addi	r2,r2,-5584
    5148:	10c00e15 	stw	r3,56(r2)
    514c:	00800074 	movhi	r2,1
    5150:	10ba8c04 	addi	r2,r2,-5584
    5154:	10800a17 	ldw	r2,40(r2)
    5158:	10800017 	ldw	r2,0(r2)
    515c:	1005d53a 	srai	r2,r2,20
    5160:	10c0004c 	andi	r3,r2,1
    5164:	00800074 	movhi	r2,1
    5168:	10ba8c04 	addi	r2,r2,-5584
    516c:	10c00f15 	stw	r3,60(r2)
    5170:	00800074 	movhi	r2,1
    5174:	10ba8c04 	addi	r2,r2,-5584
    5178:	10800a17 	ldw	r2,40(r2)
    517c:	10800017 	ldw	r2,0(r2)
    5180:	1005d57a 	srai	r2,r2,21
    5184:	10c0004c 	andi	r3,r2,1
    5188:	00800074 	movhi	r2,1
    518c:	10ba8c04 	addi	r2,r2,-5584
    5190:	10c01015 	stw	r3,64(r2)
    5194:	01000074 	movhi	r4,1
    5198:	213a8c04 	addi	r4,r4,-5584
    519c:	0004e100 	call	4e10 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, sd_card);
    51a0:	01000074 	movhi	r4,1
    51a4:	213a9d04 	addi	r4,r4,-5516
    51a8:	0004e100 	call	4e10 <alt_dev_reg>
}
    51ac:	0001883a 	nop
    51b0:	e037883a 	mov	sp,fp
    51b4:	dfc00117 	ldw	ra,4(sp)
    51b8:	df000017 	ldw	fp,0(sp)
    51bc:	dec00204 	addi	sp,sp,8
    51c0:	f800283a 	ret

000051c4 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    51c4:	defffa04 	addi	sp,sp,-24
    51c8:	dfc00515 	stw	ra,20(sp)
    51cc:	df000415 	stw	fp,16(sp)
    51d0:	df000404 	addi	fp,sp,16
    51d4:	e13ffe15 	stw	r4,-8(fp)
    51d8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    51dc:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
    51e0:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    51e4:	10001e26 	beq	r2,zero,5260 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
    51e8:	00803fc4 	movi	r2,255
    51ec:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    51f0:	d0a72317 	ldw	r2,-25460(gp)
    51f4:	e13ffe17 	ldw	r4,-8(fp)
    51f8:	e0ffff17 	ldw	r3,-4(fp)
    51fc:	20c7883a 	add	r3,r4,r3
    5200:	1806927a 	slli	r3,r3,9
    5204:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
    5208:	d0a72217 	ldw	r2,-25464(gp)
    520c:	00c00604 	movi	r3,24
    5210:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    5214:	d0a71f17 	ldw	r2,-25476(gp)
    5218:	1080002b 	ldhuio	r2,0(r2)
    521c:	10bfffcc 	andi	r2,r2,65535
    5220:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
    5224:	e0bffd0b 	ldhu	r2,-12(fp)
    5228:	10bfffcc 	andi	r2,r2,65535
    522c:	1080010c 	andi	r2,r2,4
    5230:	103ff81e 	bne	r2,zero,5214 <__alt_data_end+0xf8005214>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
    5234:	e0bffd0b 	ldhu	r2,-12(fp)
    5238:	10bfffcc 	andi	r2,r2,65535
    523c:	1080040c 	andi	r2,r2,16
    5240:	1000071e 	bne	r2,zero,5260 <Write_Sector_Data+0x9c>
        {
            result = true;
    5244:	00800044 	movi	r2,1
    5248:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    524c:	d0272815 	stw	zero,-25440(gp)
            current_sector_index = sector_index+partition_offset;
    5250:	e0fffe17 	ldw	r3,-8(fp)
    5254:	e0bfff17 	ldw	r2,-4(fp)
    5258:	1885883a 	add	r2,r3,r2
    525c:	d0a72915 	stw	r2,-25436(gp)
        }
    }
    return result;
    5260:	e0bffc17 	ldw	r2,-16(fp)
}
    5264:	e037883a 	mov	sp,fp
    5268:	dfc00117 	ldw	ra,4(sp)
    526c:	df000017 	ldw	fp,0(sp)
    5270:	dec00204 	addi	sp,sp,8
    5274:	f800283a 	ret

00005278 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    5278:	defffd04 	addi	sp,sp,-12
    527c:	dfc00215 	stw	ra,8(sp)
    5280:	df000115 	stw	fp,4(sp)
    5284:	df000104 	addi	fp,sp,4
    bool result = true;
    5288:	00800044 	movi	r2,1
    528c:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
    5290:	d0a72817 	ldw	r2,-25440(gp)
    5294:	10000526 	beq	r2,zero,52ac <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
    5298:	d0a72917 	ldw	r2,-25436(gp)
    529c:	000b883a 	mov	r5,zero
    52a0:	1009883a 	mov	r4,r2
    52a4:	00051c40 	call	51c4 <Write_Sector_Data>
    52a8:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
    52ac:	e0bfff17 	ldw	r2,-4(fp)
}
    52b0:	e037883a 	mov	sp,fp
    52b4:	dfc00117 	ldw	ra,4(sp)
    52b8:	df000017 	ldw	fp,0(sp)
    52bc:	dec00204 	addi	sp,sp,8
    52c0:	f800283a 	ret

000052c4 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
    52c4:	defffa04 	addi	sp,sp,-24
    52c8:	dfc00515 	stw	ra,20(sp)
    52cc:	df000415 	stw	fp,16(sp)
    52d0:	df000404 	addi	fp,sp,16
    52d4:	e13ffe15 	stw	r4,-8(fp)
    52d8:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
    52dc:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
    52e0:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    52e4:	10002726 	beq	r2,zero,5384 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
    52e8:	00803fc4 	movi	r2,255
    52ec:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
    52f0:	d0a72817 	ldw	r2,-25440(gp)
    52f4:	10000726 	beq	r2,zero,5314 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
    52f8:	d0a72917 	ldw	r2,-25436(gp)
    52fc:	000b883a 	mov	r5,zero
    5300:	1009883a 	mov	r4,r2
    5304:	00051c40 	call	51c4 <Write_Sector_Data>
    5308:	1000021e 	bne	r2,zero,5314 <Read_Sector_Data+0x50>
            {
                return false;
    530c:	0005883a 	mov	r2,zero
    5310:	00001d06 	br	5388 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    5314:	d0a72317 	ldw	r2,-25460(gp)
    5318:	e13ffe17 	ldw	r4,-8(fp)
    531c:	e0ffff17 	ldw	r3,-4(fp)
    5320:	20c7883a 	add	r3,r4,r3
    5324:	1806927a 	slli	r3,r3,9
    5328:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
    532c:	d0a72217 	ldw	r2,-25464(gp)
    5330:	00c00444 	movi	r3,17
    5334:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    5338:	d0a71f17 	ldw	r2,-25476(gp)
    533c:	1080002b 	ldhuio	r2,0(r2)
    5340:	10bfffcc 	andi	r2,r2,65535
    5344:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
    5348:	e0bffd0b 	ldhu	r2,-12(fp)
    534c:	10bfffcc 	andi	r2,r2,65535
    5350:	1080010c 	andi	r2,r2,4
    5354:	103ff81e 	bne	r2,zero,5338 <__alt_data_end+0xf8005338>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
    5358:	e0bffd0b 	ldhu	r2,-12(fp)
    535c:	10bfffcc 	andi	r2,r2,65535
    5360:	1080040c 	andi	r2,r2,16
    5364:	1000071e 	bne	r2,zero,5384 <Read_Sector_Data+0xc0>
		{
			result = true;
    5368:	00800044 	movi	r2,1
    536c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    5370:	d0272815 	stw	zero,-25440(gp)
            current_sector_index = sector_index+partition_offset;
    5374:	e0fffe17 	ldw	r3,-8(fp)
    5378:	e0bfff17 	ldw	r2,-4(fp)
    537c:	1885883a 	add	r2,r3,r2
    5380:	d0a72915 	stw	r2,-25436(gp)
		}
	}
	return result;
    5384:	e0bffc17 	ldw	r2,-16(fp)
}
    5388:	e037883a 	mov	sp,fp
    538c:	dfc00117 	ldw	ra,4(sp)
    5390:	df000017 	ldw	fp,0(sp)
    5394:	dec00204 	addi	sp,sp,8
    5398:	f800283a 	ret

0000539c <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    539c:	defffb04 	addi	sp,sp,-20
    53a0:	dfc00415 	stw	ra,16(sp)
    53a4:	df000315 	stw	fp,12(sp)
    53a8:	df000304 	addi	fp,sp,12
    53ac:	e13ffe15 	stw	r4,-8(fp)
    53b0:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    53b4:	e0bffe17 	ldw	r2,-8(fp)
    53b8:	1004d23a 	srli	r2,r2,8
    53bc:	d0e72517 	ldw	r3,-25452(gp)
    53c0:	10c5883a 	add	r2,r2,r3
    53c4:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    53c8:	00800074 	movhi	r2,1
    53cc:	10828104 	addi	r2,r2,2564
    53d0:	10801117 	ldw	r2,68(r2)
    53d4:	e0fffd17 	ldw	r3,-12(fp)
    53d8:	1885883a 	add	r2,r3,r2
    53dc:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
    53e0:	d0a72917 	ldw	r2,-25436(gp)
    53e4:	e0fffd17 	ldw	r3,-12(fp)
    53e8:	18800726 	beq	r3,r2,5408 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    53ec:	e0bffd17 	ldw	r2,-12(fp)
    53f0:	000b883a 	mov	r5,zero
    53f4:	1009883a 	mov	r4,r2
    53f8:	00052c40 	call	52c4 <Read_Sector_Data>
    53fc:	1000021e 	bne	r2,zero,5408 <get_cluster_flag+0x6c>
        {
            return false;
    5400:	0005883a 	mov	r2,zero
    5404:	00000d06 	br	543c <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
    5408:	e0bffe17 	ldw	r2,-8(fp)
    540c:	10803fcc 	andi	r2,r2,255
    5410:	1085883a 	add	r2,r2,r2
    5414:	1007883a 	mov	r3,r2
    5418:	d0a72717 	ldw	r2,-25444(gp)
    541c:	10800a17 	ldw	r2,40(r2)
    5420:	1885883a 	add	r2,r3,r2
    5424:	1080002b 	ldhuio	r2,0(r2)
    5428:	10bfffcc 	andi	r2,r2,65535
    542c:	1007883a 	mov	r3,r2
    5430:	e0bfff17 	ldw	r2,-4(fp)
    5434:	10c0000d 	sth	r3,0(r2)
    return true;
    5438:	00800044 	movi	r2,1
}
    543c:	e037883a 	mov	sp,fp
    5440:	dfc00117 	ldw	ra,4(sp)
    5444:	df000017 	ldw	fp,0(sp)
    5448:	dec00204 	addi	sp,sp,8
    544c:	f800283a 	ret

00005450 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    5450:	defffa04 	addi	sp,sp,-24
    5454:	dfc00515 	stw	ra,20(sp)
    5458:	df000415 	stw	fp,16(sp)
    545c:	df000404 	addi	fp,sp,16
    5460:	e13ffd15 	stw	r4,-12(fp)
    5464:	2805883a 	mov	r2,r5
    5468:	e1bfff15 	stw	r6,-4(fp)
    546c:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    5470:	e0bffd17 	ldw	r2,-12(fp)
    5474:	1004d23a 	srli	r2,r2,8
    5478:	d0e72517 	ldw	r3,-25452(gp)
    547c:	10c5883a 	add	r2,r2,r3
    5480:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
    5484:	e0bfff17 	ldw	r2,-4(fp)
    5488:	10000726 	beq	r2,zero,54a8 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    548c:	00800074 	movhi	r2,1
    5490:	10828104 	addi	r2,r2,2564
    5494:	10801117 	ldw	r2,68(r2)
    5498:	e0fffc17 	ldw	r3,-16(fp)
    549c:	1885883a 	add	r2,r3,r2
    54a0:	e0bffc15 	stw	r2,-16(fp)
    54a4:	00000606 	br	54c0 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    54a8:	00800074 	movhi	r2,1
    54ac:	10828104 	addi	r2,r2,2564
    54b0:	10801217 	ldw	r2,72(r2)
    54b4:	e0fffc17 	ldw	r3,-16(fp)
    54b8:	1885883a 	add	r2,r3,r2
    54bc:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
    54c0:	d0a72917 	ldw	r2,-25436(gp)
    54c4:	e0fffc17 	ldw	r3,-16(fp)
    54c8:	18800726 	beq	r3,r2,54e8 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    54cc:	e0bffc17 	ldw	r2,-16(fp)
    54d0:	000b883a 	mov	r5,zero
    54d4:	1009883a 	mov	r4,r2
    54d8:	00052c40 	call	52c4 <Read_Sector_Data>
    54dc:	1000021e 	bne	r2,zero,54e8 <mark_cluster+0x98>
        {
            return false;
    54e0:	0005883a 	mov	r2,zero
    54e4:	00000d06 	br	551c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    54e8:	e0bffd17 	ldw	r2,-12(fp)
    54ec:	10803fcc 	andi	r2,r2,255
    54f0:	1085883a 	add	r2,r2,r2
    54f4:	1007883a 	mov	r3,r2
    54f8:	d0a72717 	ldw	r2,-25444(gp)
    54fc:	10800a17 	ldw	r2,40(r2)
    5500:	1885883a 	add	r2,r3,r2
    5504:	1007883a 	mov	r3,r2
    5508:	e0bffe0f 	ldh	r2,-8(fp)
    550c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
    5510:	00800044 	movi	r2,1
    5514:	d0a72815 	stw	r2,-25440(gp)
    return true;
    5518:	00800044 	movi	r2,1
}
    551c:	e037883a 	mov	sp,fp
    5520:	dfc00117 	ldw	ra,4(sp)
    5524:	df000017 	ldw	fp,0(sp)
    5528:	dec00204 	addi	sp,sp,8
    552c:	f800283a 	ret

00005530 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
    5530:	defff704 	addi	sp,sp,-36
    5534:	dfc00815 	stw	ra,32(sp)
    5538:	df000715 	stw	fp,28(sp)
    553c:	df000704 	addi	fp,sp,28
	bool result = false;
    5540:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
    5544:	000b883a 	mov	r5,zero
    5548:	0009883a 	mov	r4,zero
    554c:	00052c40 	call	52c4 <Read_Sector_Data>
    5550:	10005a26 	beq	r2,zero,56bc <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
    5554:	d0a72717 	ldw	r2,-25444(gp)
    5558:	10800a17 	ldw	r2,40(r2)
    555c:	10807f84 	addi	r2,r2,510
    5560:	1080002b 	ldhuio	r2,0(r2)
    5564:	10bfffcc 	andi	r2,r2,65535
    5568:	10bfffcc 	andi	r2,r2,65535
    556c:	10a0001c 	xori	r2,r2,32768
    5570:	10a00004 	addi	r2,r2,-32768
    5574:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
    5578:	e0bffb17 	ldw	r2,-20(fp)
    557c:	10ffffcc 	andi	r3,r2,65535
    5580:	00aa9554 	movui	r2,43605
    5584:	18804d1e 	bne	r3,r2,56bc <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    5588:	e03ffa15 	stw	zero,-24(fp)
    558c:	00004806 	br	56b0 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
    5590:	e0bffa17 	ldw	r2,-24(fp)
    5594:	1004913a 	slli	r2,r2,4
    5598:	10806f84 	addi	r2,r2,446
    559c:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
    55a0:	d0a72717 	ldw	r2,-25444(gp)
    55a4:	10c00a17 	ldw	r3,40(r2)
    55a8:	e0bffc17 	ldw	r2,-16(fp)
    55ac:	1885883a 	add	r2,r3,r2
    55b0:	10800104 	addi	r2,r2,4
    55b4:	10800023 	ldbuio	r2,0(r2)
    55b8:	10803fcc 	andi	r2,r2,255
    55bc:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
    55c0:	e0bffd07 	ldb	r2,-12(fp)
    55c4:	10800060 	cmpeqi	r2,r2,1
    55c8:	1000091e 	bne	r2,zero,55f0 <Check_for_Master_Boot_Record+0xc0>
    55cc:	e0bffd07 	ldb	r2,-12(fp)
    55d0:	10800120 	cmpeqi	r2,r2,4
    55d4:	1000061e 	bne	r2,zero,55f0 <Check_for_Master_Boot_Record+0xc0>
    55d8:	e0bffd07 	ldb	r2,-12(fp)
    55dc:	108001a0 	cmpeqi	r2,r2,6
    55e0:	1000031e 	bne	r2,zero,55f0 <Check_for_Master_Boot_Record+0xc0>
    55e4:	e0bffd07 	ldb	r2,-12(fp)
    55e8:	10800398 	cmpnei	r2,r2,14
    55ec:	10002d1e 	bne	r2,zero,56a4 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
    55f0:	d0a72717 	ldw	r2,-25444(gp)
    55f4:	10c00a17 	ldw	r3,40(r2)
    55f8:	e0bffc17 	ldw	r2,-16(fp)
    55fc:	1885883a 	add	r2,r3,r2
    5600:	10800284 	addi	r2,r2,10
    5604:	1080002b 	ldhuio	r2,0(r2)
    5608:	10bfffcc 	andi	r2,r2,65535
    560c:	1006943a 	slli	r3,r2,16
    5610:	d0a72717 	ldw	r2,-25444(gp)
    5614:	11000a17 	ldw	r4,40(r2)
    5618:	e0bffc17 	ldw	r2,-16(fp)
    561c:	2085883a 	add	r2,r4,r2
    5620:	10800204 	addi	r2,r2,8
    5624:	1080002b 	ldhuio	r2,0(r2)
    5628:	10bfffcc 	andi	r2,r2,65535
    562c:	10bfffcc 	andi	r2,r2,65535
    5630:	1884b03a 	or	r2,r3,r2
    5634:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
    5638:	d0a72717 	ldw	r2,-25444(gp)
    563c:	10c00a17 	ldw	r3,40(r2)
    5640:	e0bffc17 	ldw	r2,-16(fp)
    5644:	1885883a 	add	r2,r3,r2
    5648:	10800384 	addi	r2,r2,14
    564c:	1080002b 	ldhuio	r2,0(r2)
    5650:	10bfffcc 	andi	r2,r2,65535
    5654:	1006943a 	slli	r3,r2,16
    5658:	d0a72717 	ldw	r2,-25444(gp)
    565c:	11000a17 	ldw	r4,40(r2)
    5660:	e0bffc17 	ldw	r2,-16(fp)
    5664:	2085883a 	add	r2,r4,r2
    5668:	10800304 	addi	r2,r2,12
    566c:	1080002b 	ldhuio	r2,0(r2)
    5670:	10bfffcc 	andi	r2,r2,65535
    5674:	10bfffcc 	andi	r2,r2,65535
    5678:	1884b03a 	or	r2,r3,r2
    567c:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
    5680:	e0bfff17 	ldw	r2,-4(fp)
    5684:	0080070e 	bge	zero,r2,56a4 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
    5688:	00800044 	movi	r2,1
    568c:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
    5690:	e0bfff17 	ldw	r2,-4(fp)
    5694:	d0a72615 	stw	r2,-25448(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
    5698:	e0bffe17 	ldw	r2,-8(fp)
    569c:	d0a72515 	stw	r2,-25452(gp)
						break;
    56a0:	00000606 	br	56bc <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    56a4:	e0bffa17 	ldw	r2,-24(fp)
    56a8:	10800044 	addi	r2,r2,1
    56ac:	e0bffa15 	stw	r2,-24(fp)
    56b0:	e0bffa17 	ldw	r2,-24(fp)
    56b4:	10800110 	cmplti	r2,r2,4
    56b8:	103fb51e 	bne	r2,zero,5590 <__alt_data_end+0xf8005590>
				}
			}
		}
	}

	return result;
    56bc:	e0bff917 	ldw	r2,-28(fp)
}
    56c0:	e037883a 	mov	sp,fp
    56c4:	dfc00117 	ldw	ra,4(sp)
    56c8:	df000017 	ldw	fp,0(sp)
    56cc:	dec00204 	addi	sp,sp,8
    56d0:	f800283a 	ret

000056d4 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
    56d4:	defff804 	addi	sp,sp,-32
    56d8:	dfc00715 	stw	ra,28(sp)
    56dc:	df000615 	stw	fp,24(sp)
    56e0:	df000604 	addi	fp,sp,24
    56e4:	e13ffc15 	stw	r4,-16(fp)
    56e8:	e17ffd15 	stw	r5,-12(fp)
    56ec:	e1bffe15 	stw	r6,-8(fp)
    56f0:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
    56f4:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    56f8:	e0bffc17 	ldw	r2,-16(fp)
    56fc:	108007cc 	andi	r2,r2,31
    5700:	10008d1e 	bne	r2,zero,5938 <Read_File_Record_At_Offset+0x264>
    5704:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    5708:	10008b26 	beq	r2,zero,5938 <Read_File_Record_At_Offset+0x264>
    570c:	d0a71e17 	ldw	r2,-25480(gp)
    5710:	10008926 	beq	r2,zero,5938 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    5714:	e03ffb15 	stw	zero,-20(fp)
    5718:	00001106 	br	5760 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
    571c:	e0fffc17 	ldw	r3,-16(fp)
    5720:	e0bffb17 	ldw	r2,-20(fp)
    5724:	1885883a 	add	r2,r3,r2
    5728:	1007883a 	mov	r3,r2
    572c:	d0a72717 	ldw	r2,-25444(gp)
    5730:	10800a17 	ldw	r2,40(r2)
    5734:	1885883a 	add	r2,r3,r2
    5738:	10800023 	ldbuio	r2,0(r2)
    573c:	10803fcc 	andi	r2,r2,255
    5740:	1009883a 	mov	r4,r2
    5744:	e0fffd17 	ldw	r3,-12(fp)
    5748:	e0bffb17 	ldw	r2,-20(fp)
    574c:	1885883a 	add	r2,r3,r2
    5750:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    5754:	e0bffb17 	ldw	r2,-20(fp)
    5758:	10800044 	addi	r2,r2,1
    575c:	e0bffb15 	stw	r2,-20(fp)
    5760:	e0bffb17 	ldw	r2,-20(fp)
    5764:	10800210 	cmplti	r2,r2,8
    5768:	103fec1e 	bne	r2,zero,571c <__alt_data_end+0xf800571c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    576c:	e03ffb15 	stw	zero,-20(fp)
    5770:	00001306 	br	57c0 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
    5774:	e0fffc17 	ldw	r3,-16(fp)
    5778:	e0bffb17 	ldw	r2,-20(fp)
    577c:	1885883a 	add	r2,r3,r2
    5780:	1007883a 	mov	r3,r2
    5784:	d0a72717 	ldw	r2,-25444(gp)
    5788:	10800a17 	ldw	r2,40(r2)
    578c:	1885883a 	add	r2,r3,r2
    5790:	10800204 	addi	r2,r2,8
    5794:	10800023 	ldbuio	r2,0(r2)
    5798:	10803fcc 	andi	r2,r2,255
    579c:	1009883a 	mov	r4,r2
    57a0:	e0fffd17 	ldw	r3,-12(fp)
    57a4:	e0bffb17 	ldw	r2,-20(fp)
    57a8:	1885883a 	add	r2,r3,r2
    57ac:	10800204 	addi	r2,r2,8
    57b0:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    57b4:	e0bffb17 	ldw	r2,-20(fp)
    57b8:	10800044 	addi	r2,r2,1
    57bc:	e0bffb15 	stw	r2,-20(fp)
    57c0:	e0bffb17 	ldw	r2,-20(fp)
    57c4:	108000d0 	cmplti	r2,r2,3
    57c8:	103fea1e 	bne	r2,zero,5774 <__alt_data_end+0xf8005774>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
    57cc:	d0a72717 	ldw	r2,-25444(gp)
    57d0:	10c00a17 	ldw	r3,40(r2)
    57d4:	e0bffc17 	ldw	r2,-16(fp)
    57d8:	1885883a 	add	r2,r3,r2
    57dc:	108002c4 	addi	r2,r2,11
    57e0:	10800023 	ldbuio	r2,0(r2)
    57e4:	10803fcc 	andi	r2,r2,255
    57e8:	1007883a 	mov	r3,r2
    57ec:	e0bffd17 	ldw	r2,-12(fp)
    57f0:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
    57f4:	d0a72717 	ldw	r2,-25444(gp)
    57f8:	10c00a17 	ldw	r3,40(r2)
    57fc:	e0bffc17 	ldw	r2,-16(fp)
    5800:	1885883a 	add	r2,r3,r2
    5804:	10800384 	addi	r2,r2,14
    5808:	1080002b 	ldhuio	r2,0(r2)
    580c:	10bfffcc 	andi	r2,r2,65535
    5810:	1007883a 	mov	r3,r2
    5814:	e0bffd17 	ldw	r2,-12(fp)
    5818:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
    581c:	d0a72717 	ldw	r2,-25444(gp)
    5820:	10c00a17 	ldw	r3,40(r2)
    5824:	e0bffc17 	ldw	r2,-16(fp)
    5828:	1885883a 	add	r2,r3,r2
    582c:	10800404 	addi	r2,r2,16
    5830:	1080002b 	ldhuio	r2,0(r2)
    5834:	10bfffcc 	andi	r2,r2,65535
    5838:	1007883a 	mov	r3,r2
    583c:	e0bffd17 	ldw	r2,-12(fp)
    5840:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
    5844:	d0a72717 	ldw	r2,-25444(gp)
    5848:	10c00a17 	ldw	r3,40(r2)
    584c:	e0bffc17 	ldw	r2,-16(fp)
    5850:	1885883a 	add	r2,r3,r2
    5854:	10800484 	addi	r2,r2,18
    5858:	1080002b 	ldhuio	r2,0(r2)
    585c:	10bfffcc 	andi	r2,r2,65535
    5860:	1007883a 	mov	r3,r2
    5864:	e0bffd17 	ldw	r2,-12(fp)
    5868:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
    586c:	d0a72717 	ldw	r2,-25444(gp)
    5870:	10c00a17 	ldw	r3,40(r2)
    5874:	e0bffc17 	ldw	r2,-16(fp)
    5878:	1885883a 	add	r2,r3,r2
    587c:	10800584 	addi	r2,r2,22
    5880:	1080002b 	ldhuio	r2,0(r2)
    5884:	10bfffcc 	andi	r2,r2,65535
    5888:	1007883a 	mov	r3,r2
    588c:	e0bffd17 	ldw	r2,-12(fp)
    5890:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
    5894:	d0a72717 	ldw	r2,-25444(gp)
    5898:	10c00a17 	ldw	r3,40(r2)
    589c:	e0bffc17 	ldw	r2,-16(fp)
    58a0:	1885883a 	add	r2,r3,r2
    58a4:	10800604 	addi	r2,r2,24
    58a8:	1080002b 	ldhuio	r2,0(r2)
    58ac:	10bfffcc 	andi	r2,r2,65535
    58b0:	1007883a 	mov	r3,r2
    58b4:	e0bffd17 	ldw	r2,-12(fp)
    58b8:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
    58bc:	d0a72717 	ldw	r2,-25444(gp)
    58c0:	10c00a17 	ldw	r3,40(r2)
    58c4:	e0bffc17 	ldw	r2,-16(fp)
    58c8:	1885883a 	add	r2,r3,r2
    58cc:	10800684 	addi	r2,r2,26
    58d0:	1080002b 	ldhuio	r2,0(r2)
    58d4:	10bfffcc 	andi	r2,r2,65535
    58d8:	1007883a 	mov	r3,r2
    58dc:	e0bffd17 	ldw	r2,-12(fp)
    58e0:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
    58e4:	d0a72717 	ldw	r2,-25444(gp)
    58e8:	10c00a17 	ldw	r3,40(r2)
    58ec:	e0bffc17 	ldw	r2,-16(fp)
    58f0:	1885883a 	add	r2,r3,r2
    58f4:	10800704 	addi	r2,r2,28
    58f8:	10800037 	ldwio	r2,0(r2)
    58fc:	1007883a 	mov	r3,r2
    5900:	e0bffd17 	ldw	r2,-12(fp)
    5904:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
    5908:	e0bffd17 	ldw	r2,-12(fp)
    590c:	e0fffe17 	ldw	r3,-8(fp)
    5910:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
    5914:	e0bffd17 	ldw	r2,-12(fp)
    5918:	e0ffff17 	ldw	r3,-4(fp)
    591c:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
    5920:	e0bffc17 	ldw	r2,-16(fp)
    5924:	1007883a 	mov	r3,r2
    5928:	e0bffd17 	ldw	r2,-12(fp)
    592c:	10c00c0d 	sth	r3,48(r2)
		result = true;
    5930:	00800044 	movi	r2,1
    5934:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
    5938:	e0bffa17 	ldw	r2,-24(fp)
}
    593c:	e037883a 	mov	sp,fp
    5940:	dfc00117 	ldw	ra,4(sp)
    5944:	df000017 	ldw	fp,0(sp)
    5948:	dec00204 	addi	sp,sp,8
    594c:	f800283a 	ret

00005950 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    5950:	defff904 	addi	sp,sp,-28
    5954:	dfc00615 	stw	ra,24(sp)
    5958:	df000515 	stw	fp,20(sp)
    595c:	df000504 	addi	fp,sp,20
    5960:	e13ffe15 	stw	r4,-8(fp)
    5964:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    5968:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    596c:	e0bffe17 	ldw	r2,-8(fp)
    5970:	108007cc 	andi	r2,r2,31
    5974:	1000931e 	bne	r2,zero,5bc4 <Write_File_Record_At_Offset+0x274>
    5978:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    597c:	10009126 	beq	r2,zero,5bc4 <Write_File_Record_At_Offset+0x274>
    5980:	d0a71e17 	ldw	r2,-25480(gp)
    5984:	10008f26 	beq	r2,zero,5bc4 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    5988:	e03ffc15 	stw	zero,-16(fp)
    598c:	00001f06 	br	5a0c <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
    5990:	e0bffc17 	ldw	r2,-16(fp)
    5994:	10800044 	addi	r2,r2,1
    5998:	e0ffff17 	ldw	r3,-4(fp)
    599c:	1885883a 	add	r2,r3,r2
    59a0:	10800003 	ldbu	r2,0(r2)
    59a4:	10803fcc 	andi	r2,r2,255
    59a8:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
    59ac:	e0bffd0f 	ldh	r2,-12(fp)
    59b0:	1004923a 	slli	r2,r2,8
    59b4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
    59b8:	e0ffff17 	ldw	r3,-4(fp)
    59bc:	e0bffc17 	ldw	r2,-16(fp)
    59c0:	1885883a 	add	r2,r3,r2
    59c4:	10800003 	ldbu	r2,0(r2)
    59c8:	10c03fcc 	andi	r3,r2,255
    59cc:	e0bffd0b 	ldhu	r2,-12(fp)
    59d0:	1884b03a 	or	r2,r3,r2
    59d4:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
    59d8:	e0fffe17 	ldw	r3,-8(fp)
    59dc:	e0bffc17 	ldw	r2,-16(fp)
    59e0:	1885883a 	add	r2,r3,r2
    59e4:	1007883a 	mov	r3,r2
    59e8:	d0a72717 	ldw	r2,-25444(gp)
    59ec:	10800a17 	ldw	r2,40(r2)
    59f0:	1885883a 	add	r2,r3,r2
    59f4:	1007883a 	mov	r3,r2
    59f8:	e0bffd0f 	ldh	r2,-12(fp)
    59fc:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    5a00:	e0bffc17 	ldw	r2,-16(fp)
    5a04:	10800084 	addi	r2,r2,2
    5a08:	e0bffc15 	stw	r2,-16(fp)
    5a0c:	e0bffc17 	ldw	r2,-16(fp)
    5a10:	10800210 	cmplti	r2,r2,8
    5a14:	103fde1e 	bne	r2,zero,5990 <__alt_data_end+0xf8005990>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    5a18:	e03ffc15 	stw	zero,-16(fp)
    5a1c:	00001306 	br	5a6c <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
    5a20:	e0fffe17 	ldw	r3,-8(fp)
    5a24:	e0bffc17 	ldw	r2,-16(fp)
    5a28:	1885883a 	add	r2,r3,r2
    5a2c:	1007883a 	mov	r3,r2
    5a30:	d0a72717 	ldw	r2,-25444(gp)
    5a34:	10800a17 	ldw	r2,40(r2)
    5a38:	1885883a 	add	r2,r3,r2
    5a3c:	10800204 	addi	r2,r2,8
    5a40:	1009883a 	mov	r4,r2
    5a44:	e0ffff17 	ldw	r3,-4(fp)
    5a48:	e0bffc17 	ldw	r2,-16(fp)
    5a4c:	1885883a 	add	r2,r3,r2
    5a50:	10800204 	addi	r2,r2,8
    5a54:	10800003 	ldbu	r2,0(r2)
    5a58:	10803fcc 	andi	r2,r2,255
    5a5c:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    5a60:	e0bffc17 	ldw	r2,-16(fp)
    5a64:	10800044 	addi	r2,r2,1
    5a68:	e0bffc15 	stw	r2,-16(fp)
    5a6c:	e0bffc17 	ldw	r2,-16(fp)
    5a70:	108000d0 	cmplti	r2,r2,3
    5a74:	103fea1e 	bne	r2,zero,5a20 <__alt_data_end+0xf8005a20>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
    5a78:	d0a72717 	ldw	r2,-25444(gp)
    5a7c:	10c00a17 	ldw	r3,40(r2)
    5a80:	e0bffe17 	ldw	r2,-8(fp)
    5a84:	1885883a 	add	r2,r3,r2
    5a88:	108002c4 	addi	r2,r2,11
    5a8c:	1007883a 	mov	r3,r2
    5a90:	e0bfff17 	ldw	r2,-4(fp)
    5a94:	108002c3 	ldbu	r2,11(r2)
    5a98:	10803fcc 	andi	r2,r2,255
    5a9c:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
    5aa0:	d0a72717 	ldw	r2,-25444(gp)
    5aa4:	10c00a17 	ldw	r3,40(r2)
    5aa8:	e0bffe17 	ldw	r2,-8(fp)
    5aac:	1885883a 	add	r2,r3,r2
    5ab0:	10800384 	addi	r2,r2,14
    5ab4:	1007883a 	mov	r3,r2
    5ab8:	e0bfff17 	ldw	r2,-4(fp)
    5abc:	1080030b 	ldhu	r2,12(r2)
    5ac0:	10bfffcc 	andi	r2,r2,65535
    5ac4:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
    5ac8:	d0a72717 	ldw	r2,-25444(gp)
    5acc:	10c00a17 	ldw	r3,40(r2)
    5ad0:	e0bffe17 	ldw	r2,-8(fp)
    5ad4:	1885883a 	add	r2,r3,r2
    5ad8:	10800404 	addi	r2,r2,16
    5adc:	1007883a 	mov	r3,r2
    5ae0:	e0bfff17 	ldw	r2,-4(fp)
    5ae4:	1080038b 	ldhu	r2,14(r2)
    5ae8:	10bfffcc 	andi	r2,r2,65535
    5aec:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
    5af0:	d0a72717 	ldw	r2,-25444(gp)
    5af4:	10c00a17 	ldw	r3,40(r2)
    5af8:	e0bffe17 	ldw	r2,-8(fp)
    5afc:	1885883a 	add	r2,r3,r2
    5b00:	10800484 	addi	r2,r2,18
    5b04:	1007883a 	mov	r3,r2
    5b08:	e0bfff17 	ldw	r2,-4(fp)
    5b0c:	1080040b 	ldhu	r2,16(r2)
    5b10:	10bfffcc 	andi	r2,r2,65535
    5b14:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
    5b18:	d0a72717 	ldw	r2,-25444(gp)
    5b1c:	10c00a17 	ldw	r3,40(r2)
    5b20:	e0bffe17 	ldw	r2,-8(fp)
    5b24:	1885883a 	add	r2,r3,r2
    5b28:	10800584 	addi	r2,r2,22
    5b2c:	1007883a 	mov	r3,r2
    5b30:	e0bfff17 	ldw	r2,-4(fp)
    5b34:	1080048b 	ldhu	r2,18(r2)
    5b38:	10bfffcc 	andi	r2,r2,65535
    5b3c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
    5b40:	d0a72717 	ldw	r2,-25444(gp)
    5b44:	10c00a17 	ldw	r3,40(r2)
    5b48:	e0bffe17 	ldw	r2,-8(fp)
    5b4c:	1885883a 	add	r2,r3,r2
    5b50:	10800604 	addi	r2,r2,24
    5b54:	1007883a 	mov	r3,r2
    5b58:	e0bfff17 	ldw	r2,-4(fp)
    5b5c:	1080050b 	ldhu	r2,20(r2)
    5b60:	10bfffcc 	andi	r2,r2,65535
    5b64:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
    5b68:	d0a72717 	ldw	r2,-25444(gp)
    5b6c:	10c00a17 	ldw	r3,40(r2)
    5b70:	e0bffe17 	ldw	r2,-8(fp)
    5b74:	1885883a 	add	r2,r3,r2
    5b78:	10800684 	addi	r2,r2,26
    5b7c:	1007883a 	mov	r3,r2
    5b80:	e0bfff17 	ldw	r2,-4(fp)
    5b84:	1080058b 	ldhu	r2,22(r2)
    5b88:	10bfffcc 	andi	r2,r2,65535
    5b8c:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
    5b90:	d0a72717 	ldw	r2,-25444(gp)
    5b94:	10c00a17 	ldw	r3,40(r2)
    5b98:	e0bffe17 	ldw	r2,-8(fp)
    5b9c:	1885883a 	add	r2,r3,r2
    5ba0:	10800704 	addi	r2,r2,28
    5ba4:	1007883a 	mov	r3,r2
    5ba8:	e0bfff17 	ldw	r2,-4(fp)
    5bac:	10800617 	ldw	r2,24(r2)
    5bb0:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
    5bb4:	00800044 	movi	r2,1
    5bb8:	d0a72815 	stw	r2,-25440(gp)
        result = true;
    5bbc:	00800044 	movi	r2,1
    5bc0:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
    5bc4:	e0bffb17 	ldw	r2,-20(fp)
}
    5bc8:	e037883a 	mov	sp,fp
    5bcc:	dfc00117 	ldw	ra,4(sp)
    5bd0:	df000017 	ldw	fp,0(sp)
    5bd4:	dec00204 	addi	sp,sp,8
    5bd8:	f800283a 	ret

00005bdc <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
    5bdc:	defff904 	addi	sp,sp,-28
    5be0:	dfc00615 	stw	ra,24(sp)
    5be4:	df000515 	stw	fp,20(sp)
    5be8:	df000504 	addi	fp,sp,20
    5bec:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
    5bf0:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
    5bf4:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
    5bf8:	e17fff17 	ldw	r5,-4(fp)
    5bfc:	0009883a 	mov	r4,zero
    5c00:	00052c40 	call	52c4 <Read_Sector_Data>
    5c04:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
    5c08:	d0a72717 	ldw	r2,-25444(gp)
    5c0c:	10800a17 	ldw	r2,40(r2)
    5c10:	10807f84 	addi	r2,r2,510
    5c14:	1080002b 	ldhuio	r2,0(r2)
    5c18:	10bfffcc 	andi	r2,r2,65535
    5c1c:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
    5c20:	e0bffe0f 	ldh	r2,-8(fp)
    5c24:	10ffffcc 	andi	r3,r2,65535
    5c28:	00aa9554 	movui	r2,43605
    5c2c:	1881841e 	bne	r3,r2,6240 <Check_for_DOS_FAT+0x664>
    5c30:	e0bffb17 	ldw	r2,-20(fp)
    5c34:	10018226 	beq	r2,zero,6240 <Check_for_DOS_FAT+0x664>
	{
		int num_clusters = 0;
    5c38:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
    5c3c:	d0a72717 	ldw	r2,-25444(gp)
    5c40:	10800a17 	ldw	r2,40(r2)
    5c44:	10800023 	ldbuio	r2,0(r2)
    5c48:	10803fcc 	andi	r2,r2,255
    5c4c:	1007883a 	mov	r3,r2
    5c50:	00800074 	movhi	r2,1
    5c54:	10828104 	addi	r2,r2,2564
    5c58:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
    5c5c:	d0a72717 	ldw	r2,-25444(gp)
    5c60:	10800a17 	ldw	r2,40(r2)
    5c64:	10800044 	addi	r2,r2,1
    5c68:	10800023 	ldbuio	r2,0(r2)
    5c6c:	10803fcc 	andi	r2,r2,255
    5c70:	1007883a 	mov	r3,r2
    5c74:	00800074 	movhi	r2,1
    5c78:	10828104 	addi	r2,r2,2564
    5c7c:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
    5c80:	d0a72717 	ldw	r2,-25444(gp)
    5c84:	10800a17 	ldw	r2,40(r2)
    5c88:	10800084 	addi	r2,r2,2
    5c8c:	10800023 	ldbuio	r2,0(r2)
    5c90:	10803fcc 	andi	r2,r2,255
    5c94:	1007883a 	mov	r3,r2
    5c98:	00800074 	movhi	r2,1
    5c9c:	10828104 	addi	r2,r2,2564
    5ca0:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
    5ca4:	e03ffc15 	stw	zero,-16(fp)
    5ca8:	00001106 	br	5cf0 <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
    5cac:	d0a72717 	ldw	r2,-25444(gp)
    5cb0:	10c00a17 	ldw	r3,40(r2)
    5cb4:	e0bffc17 	ldw	r2,-16(fp)
    5cb8:	1885883a 	add	r2,r3,r2
    5cbc:	108000c4 	addi	r2,r2,3
    5cc0:	10800023 	ldbuio	r2,0(r2)
    5cc4:	10803fcc 	andi	r2,r2,255
    5cc8:	1009883a 	mov	r4,r2
    5ccc:	00800074 	movhi	r2,1
    5cd0:	10828104 	addi	r2,r2,2564
    5cd4:	e0fffc17 	ldw	r3,-16(fp)
    5cd8:	10c5883a 	add	r2,r2,r3
    5cdc:	108000c4 	addi	r2,r2,3
    5ce0:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
    5ce4:	e0bffc17 	ldw	r2,-16(fp)
    5ce8:	10800044 	addi	r2,r2,1
    5cec:	e0bffc15 	stw	r2,-16(fp)
    5cf0:	e0bffc17 	ldw	r2,-16(fp)
    5cf4:	10800210 	cmplti	r2,r2,8
    5cf8:	103fec1e 	bne	r2,zero,5cac <__alt_data_end+0xf8005cac>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
    5cfc:	d0a72717 	ldw	r2,-25444(gp)
    5d00:	10800a17 	ldw	r2,40(r2)
    5d04:	10800304 	addi	r2,r2,12
    5d08:	10800023 	ldbuio	r2,0(r2)
    5d0c:	10803fcc 	andi	r2,r2,255
    5d10:	1004923a 	slli	r2,r2,8
    5d14:	1007883a 	mov	r3,r2
    5d18:	d0a72717 	ldw	r2,-25444(gp)
    5d1c:	10800a17 	ldw	r2,40(r2)
    5d20:	108002c4 	addi	r2,r2,11
    5d24:	10800023 	ldbuio	r2,0(r2)
    5d28:	10803fcc 	andi	r2,r2,255
    5d2c:	10803fcc 	andi	r2,r2,255
    5d30:	1080201c 	xori	r2,r2,128
    5d34:	10bfe004 	addi	r2,r2,-128
    5d38:	1884b03a 	or	r2,r3,r2
    5d3c:	1007883a 	mov	r3,r2
    5d40:	00800074 	movhi	r2,1
    5d44:	10828104 	addi	r2,r2,2564
    5d48:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
    5d4c:	d0a72717 	ldw	r2,-25444(gp)
    5d50:	10800a17 	ldw	r2,40(r2)
    5d54:	10800344 	addi	r2,r2,13
    5d58:	10800023 	ldbuio	r2,0(r2)
    5d5c:	10803fcc 	andi	r2,r2,255
    5d60:	1007883a 	mov	r3,r2
    5d64:	00800074 	movhi	r2,1
    5d68:	10828104 	addi	r2,r2,2564
    5d6c:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
    5d70:	d0a72717 	ldw	r2,-25444(gp)
    5d74:	10800a17 	ldw	r2,40(r2)
    5d78:	10800384 	addi	r2,r2,14
    5d7c:	1080002b 	ldhuio	r2,0(r2)
    5d80:	10bfffcc 	andi	r2,r2,65535
    5d84:	1007883a 	mov	r3,r2
    5d88:	00800074 	movhi	r2,1
    5d8c:	10828104 	addi	r2,r2,2564
    5d90:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
    5d94:	d0a72717 	ldw	r2,-25444(gp)
    5d98:	10800a17 	ldw	r2,40(r2)
    5d9c:	10800404 	addi	r2,r2,16
    5da0:	10800023 	ldbuio	r2,0(r2)
    5da4:	10803fcc 	andi	r2,r2,255
    5da8:	1007883a 	mov	r3,r2
    5dac:	00800074 	movhi	r2,1
    5db0:	10828104 	addi	r2,r2,2564
    5db4:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
    5db8:	d0a72717 	ldw	r2,-25444(gp)
    5dbc:	10800a17 	ldw	r2,40(r2)
    5dc0:	10800484 	addi	r2,r2,18
    5dc4:	10800023 	ldbuio	r2,0(r2)
    5dc8:	10803fcc 	andi	r2,r2,255
    5dcc:	1004923a 	slli	r2,r2,8
    5dd0:	1007883a 	mov	r3,r2
    5dd4:	d0a72717 	ldw	r2,-25444(gp)
    5dd8:	10800a17 	ldw	r2,40(r2)
    5ddc:	10800444 	addi	r2,r2,17
    5de0:	10800023 	ldbuio	r2,0(r2)
    5de4:	10803fcc 	andi	r2,r2,255
    5de8:	10803fcc 	andi	r2,r2,255
    5dec:	1884b03a 	or	r2,r3,r2
    5df0:	1007883a 	mov	r3,r2
    5df4:	00800074 	movhi	r2,1
    5df8:	10828104 	addi	r2,r2,2564
    5dfc:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
    5e00:	d0a72717 	ldw	r2,-25444(gp)
    5e04:	10800a17 	ldw	r2,40(r2)
    5e08:	10800504 	addi	r2,r2,20
    5e0c:	10800023 	ldbuio	r2,0(r2)
    5e10:	10803fcc 	andi	r2,r2,255
    5e14:	1004923a 	slli	r2,r2,8
    5e18:	1007883a 	mov	r3,r2
    5e1c:	d0a72717 	ldw	r2,-25444(gp)
    5e20:	10800a17 	ldw	r2,40(r2)
    5e24:	108004c4 	addi	r2,r2,19
    5e28:	10800023 	ldbuio	r2,0(r2)
    5e2c:	10803fcc 	andi	r2,r2,255
    5e30:	10803fcc 	andi	r2,r2,255
    5e34:	1884b03a 	or	r2,r3,r2
    5e38:	1007883a 	mov	r3,r2
    5e3c:	00800074 	movhi	r2,1
    5e40:	10828104 	addi	r2,r2,2564
    5e44:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
    5e48:	d0a72717 	ldw	r2,-25444(gp)
    5e4c:	10800a17 	ldw	r2,40(r2)
    5e50:	10800544 	addi	r2,r2,21
    5e54:	10800023 	ldbuio	r2,0(r2)
    5e58:	10803fcc 	andi	r2,r2,255
    5e5c:	1007883a 	mov	r3,r2
    5e60:	00800074 	movhi	r2,1
    5e64:	10828104 	addi	r2,r2,2564
    5e68:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
    5e6c:	d0a72717 	ldw	r2,-25444(gp)
    5e70:	10800a17 	ldw	r2,40(r2)
    5e74:	10800584 	addi	r2,r2,22
    5e78:	1080002b 	ldhuio	r2,0(r2)
    5e7c:	10bfffcc 	andi	r2,r2,65535
    5e80:	1007883a 	mov	r3,r2
    5e84:	00800074 	movhi	r2,1
    5e88:	10828104 	addi	r2,r2,2564
    5e8c:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
    5e90:	d0a72717 	ldw	r2,-25444(gp)
    5e94:	10800a17 	ldw	r2,40(r2)
    5e98:	10800604 	addi	r2,r2,24
    5e9c:	1080002b 	ldhuio	r2,0(r2)
    5ea0:	10bfffcc 	andi	r2,r2,65535
    5ea4:	1007883a 	mov	r3,r2
    5ea8:	00800074 	movhi	r2,1
    5eac:	10828104 	addi	r2,r2,2564
    5eb0:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
    5eb4:	d0a72717 	ldw	r2,-25444(gp)
    5eb8:	10800a17 	ldw	r2,40(r2)
    5ebc:	10800684 	addi	r2,r2,26
    5ec0:	1080002b 	ldhuio	r2,0(r2)
    5ec4:	10bfffcc 	andi	r2,r2,65535
    5ec8:	1007883a 	mov	r3,r2
    5ecc:	00800074 	movhi	r2,1
    5ed0:	10828104 	addi	r2,r2,2564
    5ed4:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
    5ed8:	d0a72717 	ldw	r2,-25444(gp)
    5edc:	10800a17 	ldw	r2,40(r2)
    5ee0:	10800704 	addi	r2,r2,28
    5ee4:	10800037 	ldwio	r2,0(r2)
    5ee8:	1007883a 	mov	r3,r2
    5eec:	00800074 	movhi	r2,1
    5ef0:	10828104 	addi	r2,r2,2564
    5ef4:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
    5ef8:	d0a72717 	ldw	r2,-25444(gp)
    5efc:	10800a17 	ldw	r2,40(r2)
    5f00:	10800804 	addi	r2,r2,32
    5f04:	10800037 	ldwio	r2,0(r2)
    5f08:	1007883a 	mov	r3,r2
    5f0c:	00800074 	movhi	r2,1
    5f10:	10828104 	addi	r2,r2,2564
    5f14:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
    5f18:	d0a72717 	ldw	r2,-25444(gp)
    5f1c:	10800a17 	ldw	r2,40(r2)
    5f20:	10800904 	addi	r2,r2,36
    5f24:	10800023 	ldbuio	r2,0(r2)
    5f28:	10803fcc 	andi	r2,r2,255
    5f2c:	1007883a 	mov	r3,r2
    5f30:	00800074 	movhi	r2,1
    5f34:	10828104 	addi	r2,r2,2564
    5f38:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
    5f3c:	d0a72717 	ldw	r2,-25444(gp)
    5f40:	10800a17 	ldw	r2,40(r2)
    5f44:	10800944 	addi	r2,r2,37
    5f48:	10800023 	ldbuio	r2,0(r2)
    5f4c:	10803fcc 	andi	r2,r2,255
    5f50:	1007883a 	mov	r3,r2
    5f54:	00800074 	movhi	r2,1
    5f58:	10828104 	addi	r2,r2,2564
    5f5c:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
    5f60:	d0a72717 	ldw	r2,-25444(gp)
    5f64:	10800a17 	ldw	r2,40(r2)
    5f68:	10800984 	addi	r2,r2,38
    5f6c:	10800023 	ldbuio	r2,0(r2)
    5f70:	10803fcc 	andi	r2,r2,255
    5f74:	1007883a 	mov	r3,r2
    5f78:	00800074 	movhi	r2,1
    5f7c:	10828104 	addi	r2,r2,2564
    5f80:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
    5f84:	00800074 	movhi	r2,1
    5f88:	10828104 	addi	r2,r2,2564
    5f8c:	1080040b 	ldhu	r2,16(r2)
    5f90:	10ffffcc 	andi	r3,r2,65535
    5f94:	00800074 	movhi	r2,1
    5f98:	10828104 	addi	r2,r2,2564
    5f9c:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
    5fa0:	00800074 	movhi	r2,1
    5fa4:	10828104 	addi	r2,r2,2564
    5fa8:	10c01117 	ldw	r3,68(r2)
    5fac:	00800074 	movhi	r2,1
    5fb0:	10828104 	addi	r2,r2,2564
    5fb4:	1080068b 	ldhu	r2,26(r2)
    5fb8:	10bfffcc 	andi	r2,r2,65535
    5fbc:	1887883a 	add	r3,r3,r2
    5fc0:	00800074 	movhi	r2,1
    5fc4:	10828104 	addi	r2,r2,2564
    5fc8:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
    5fcc:	00800074 	movhi	r2,1
    5fd0:	10828104 	addi	r2,r2,2564
    5fd4:	10c01217 	ldw	r3,72(r2)
    5fd8:	00800074 	movhi	r2,1
    5fdc:	10828104 	addi	r2,r2,2564
    5fe0:	1080068b 	ldhu	r2,26(r2)
    5fe4:	10bfffcc 	andi	r2,r2,65535
    5fe8:	1887883a 	add	r3,r3,r2
    5fec:	00800074 	movhi	r2,1
    5ff0:	10828104 	addi	r2,r2,2564
    5ff4:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
    5ff8:	00800074 	movhi	r2,1
    5ffc:	10828104 	addi	r2,r2,2564
    6000:	10c01317 	ldw	r3,76(r2)
    6004:	00800074 	movhi	r2,1
    6008:	10828104 	addi	r2,r2,2564
    600c:	1080050b 	ldhu	r2,20(r2)
    6010:	10bfffcc 	andi	r2,r2,65535
    6014:	1008917a 	slli	r4,r2,5
    6018:	00800074 	movhi	r2,1
    601c:	10828104 	addi	r2,r2,2564
    6020:	1080030b 	ldhu	r2,12(r2)
    6024:	10bfffcc 	andi	r2,r2,65535
    6028:	2085283a 	div	r2,r4,r2
    602c:	1887883a 	add	r3,r3,r2
    6030:	00800074 	movhi	r2,1
    6034:	10828104 	addi	r2,r2,2564
    6038:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
    603c:	00800074 	movhi	r2,1
    6040:	10828104 	addi	r2,r2,2564
    6044:	1080058b 	ldhu	r2,22(r2)
    6048:	10bfffcc 	andi	r2,r2,65535
    604c:	10000b26 	beq	r2,zero,607c <Check_for_DOS_FAT+0x4a0>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
    6050:	00800074 	movhi	r2,1
    6054:	10828104 	addi	r2,r2,2564
    6058:	1080058b 	ldhu	r2,22(r2)
    605c:	10ffffcc 	andi	r3,r2,65535
    6060:	00800074 	movhi	r2,1
    6064:	10828104 	addi	r2,r2,2564
    6068:	10800383 	ldbu	r2,14(r2)
    606c:	10803fcc 	andi	r2,r2,255
    6070:	1885283a 	div	r2,r3,r2
    6074:	e0bffd15 	stw	r2,-12(fp)
    6078:	00000906 	br	60a0 <Check_for_DOS_FAT+0x4c4>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
    607c:	00800074 	movhi	r2,1
    6080:	10828104 	addi	r2,r2,2564
    6084:	10c00917 	ldw	r3,36(r2)
    6088:	00800074 	movhi	r2,1
    608c:	10828104 	addi	r2,r2,2564
    6090:	10800383 	ldbu	r2,14(r2)
    6094:	10803fcc 	andi	r2,r2,255
    6098:	1885203a 	divu	r2,r3,r2
    609c:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
    60a0:	e0bffd17 	ldw	r2,-12(fp)
    60a4:	1083fdc8 	cmpgei	r2,r2,4087
    60a8:	1000051e 	bne	r2,zero,60c0 <Check_for_DOS_FAT+0x4e4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
    60ac:	00800074 	movhi	r2,1
    60b0:	10828104 	addi	r2,r2,2564
    60b4:	00c00304 	movi	r3,12
    60b8:	10c01085 	stb	r3,66(r2)
    60bc:	00000c06 	br	60f0 <Check_for_DOS_FAT+0x514>
		}
		else if (num_clusters <= 65517)
    60c0:	e0bffd17 	ldw	r2,-12(fp)
    60c4:	00fffb54 	movui	r3,65517
    60c8:	18800516 	blt	r3,r2,60e0 <Check_for_DOS_FAT+0x504>
		{
			boot_sector_data.bits_for_cluster_index = 16;
    60cc:	00800074 	movhi	r2,1
    60d0:	10828104 	addi	r2,r2,2564
    60d4:	00c00404 	movi	r3,16
    60d8:	10c01085 	stb	r3,66(r2)
    60dc:	00000406 	br	60f0 <Check_for_DOS_FAT+0x514>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
    60e0:	00800074 	movhi	r2,1
    60e4:	10828104 	addi	r2,r2,2564
    60e8:	00c00804 	movi	r3,32
    60ec:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
    60f0:	e03ffc15 	stw	zero,-16(fp)
    60f4:	00001106 	br	613c <Check_for_DOS_FAT+0x560>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
    60f8:	d0a72717 	ldw	r2,-25444(gp)
    60fc:	10c00a17 	ldw	r3,40(r2)
    6100:	e0bffc17 	ldw	r2,-16(fp)
    6104:	1885883a 	add	r2,r3,r2
    6108:	108009c4 	addi	r2,r2,39
    610c:	10800023 	ldbuio	r2,0(r2)
    6110:	10803fcc 	andi	r2,r2,255
    6114:	1009883a 	mov	r4,r2
    6118:	00800074 	movhi	r2,1
    611c:	10828104 	addi	r2,r2,2564
    6120:	e0fffc17 	ldw	r3,-16(fp)
    6124:	10c5883a 	add	r2,r2,r3
    6128:	10800ac4 	addi	r2,r2,43
    612c:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
    6130:	e0bffc17 	ldw	r2,-16(fp)
    6134:	10800044 	addi	r2,r2,1
    6138:	e0bffc15 	stw	r2,-16(fp)
    613c:	e0bffc17 	ldw	r2,-16(fp)
    6140:	10800110 	cmplti	r2,r2,4
    6144:	103fec1e 	bne	r2,zero,60f8 <__alt_data_end+0xf80060f8>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    6148:	e03ffc15 	stw	zero,-16(fp)
    614c:	00001106 	br	6194 <Check_for_DOS_FAT+0x5b8>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
    6150:	d0a72717 	ldw	r2,-25444(gp)
    6154:	10c00a17 	ldw	r3,40(r2)
    6158:	e0bffc17 	ldw	r2,-16(fp)
    615c:	1885883a 	add	r2,r3,r2
    6160:	10800ac4 	addi	r2,r2,43
    6164:	10800023 	ldbuio	r2,0(r2)
    6168:	10803fcc 	andi	r2,r2,255
    616c:	1009883a 	mov	r4,r2
    6170:	00800074 	movhi	r2,1
    6174:	10828104 	addi	r2,r2,2564
    6178:	e0fffc17 	ldw	r3,-16(fp)
    617c:	10c5883a 	add	r2,r2,r3
    6180:	10800bc4 	addi	r2,r2,47
    6184:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    6188:	e0bffc17 	ldw	r2,-16(fp)
    618c:	10800044 	addi	r2,r2,1
    6190:	e0bffc15 	stw	r2,-16(fp)
    6194:	e0bffc17 	ldw	r2,-16(fp)
    6198:	108002d0 	cmplti	r2,r2,11
    619c:	103fec1e 	bne	r2,zero,6150 <__alt_data_end+0xf8006150>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    61a0:	e03ffc15 	stw	zero,-16(fp)
    61a4:	00001106 	br	61ec <Check_for_DOS_FAT+0x610>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
    61a8:	d0a72717 	ldw	r2,-25444(gp)
    61ac:	10c00a17 	ldw	r3,40(r2)
    61b0:	e0bffc17 	ldw	r2,-16(fp)
    61b4:	1885883a 	add	r2,r3,r2
    61b8:	10800d84 	addi	r2,r2,54
    61bc:	10800023 	ldbuio	r2,0(r2)
    61c0:	10803fcc 	andi	r2,r2,255
    61c4:	1009883a 	mov	r4,r2
    61c8:	00800074 	movhi	r2,1
    61cc:	10828104 	addi	r2,r2,2564
    61d0:	e0fffc17 	ldw	r3,-16(fp)
    61d4:	10c5883a 	add	r2,r2,r3
    61d8:	10800e84 	addi	r2,r2,58
    61dc:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    61e0:	e0bffc17 	ldw	r2,-16(fp)
    61e4:	10800044 	addi	r2,r2,1
    61e8:	e0bffc15 	stw	r2,-16(fp)
    61ec:	e0bffc17 	ldw	r2,-16(fp)
    61f0:	10800210 	cmplti	r2,r2,8
    61f4:	103fec1e 	bne	r2,zero,61a8 <__alt_data_end+0xf80061a8>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    61f8:	e03ffc15 	stw	zero,-16(fp)
    61fc:	00000a06 	br	6228 <Check_for_DOS_FAT+0x64c>
		{
			active_files[counter].in_use = false;
    6200:	00800074 	movhi	r2,1
    6204:	10829604 	addi	r2,r2,2648
    6208:	e0fffc17 	ldw	r3,-16(fp)
    620c:	180691ba 	slli	r3,r3,6
    6210:	10c5883a 	add	r2,r2,r3
    6214:	10800f04 	addi	r2,r2,60
    6218:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    621c:	e0bffc17 	ldw	r2,-16(fp)
    6220:	10800044 	addi	r2,r2,1
    6224:	e0bffc15 	stw	r2,-16(fp)
    6228:	e0bffc17 	ldw	r2,-16(fp)
    622c:	10800510 	cmplti	r2,r2,20
    6230:	103ff31e 	bne	r2,zero,6200 <__alt_data_end+0xf8006200>
		{
			active_files[counter].in_use = false;
		}
		result = true;
    6234:	00800044 	movi	r2,1
    6238:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
    623c:	00000106 	br	6244 <Check_for_DOS_FAT+0x668>
		}
		result = true;
	}
    else
    {
        result = false;
    6240:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
    6244:	e0bffb17 	ldw	r2,-20(fp)
}
    6248:	e037883a 	mov	sp,fp
    624c:	dfc00117 	ldw	ra,4(sp)
    6250:	df000017 	ldw	fp,0(sp)
    6254:	dec00204 	addi	sp,sp,8
    6258:	f800283a 	ret

0000625c <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
    625c:	defffc04 	addi	sp,sp,-16
    6260:	dfc00315 	stw	ra,12(sp)
    6264:	df000215 	stw	fp,8(sp)
    6268:	df000204 	addi	fp,sp,8
	bool result = false;
    626c:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
    6270:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    6274:	10002e26 	beq	r2,zero,6330 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
    6278:	d0a72117 	ldw	r2,-25468(gp)
    627c:	1080000b 	ldhu	r2,0(r2)
    6280:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
    6284:	d0272515 	stw	zero,-25452(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
    6288:	d0272615 	stw	zero,-25448(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
    628c:	e0bfff0f 	ldh	r2,-4(fp)
    6290:	10002716 	blt	r2,zero,6330 <Look_for_FAT16+0xd4>
    6294:	e0bfff0b 	ldhu	r2,-4(fp)
    6298:	10bfffcc 	andi	r2,r2,65535
    629c:	1083000c 	andi	r2,r2,3072
    62a0:	10830020 	cmpeqi	r2,r2,3072
    62a4:	1000221e 	bne	r2,zero,6330 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
    62a8:	e0bfff0b 	ldhu	r2,-4(fp)
    62ac:	10bfffcc 	andi	r2,r2,65535
    62b0:	1083000c 	andi	r2,r2,3072
    62b4:	10810018 	cmpnei	r2,r2,1024
    62b8:	1000031e 	bne	r2,zero,62c8 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
    62bc:	0009883a 	mov	r4,zero
    62c0:	0005bdc0 	call	5bdc <Check_for_DOS_FAT>
    62c4:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
    62c8:	e0bfff0b 	ldhu	r2,-4(fp)
    62cc:	10bfffcc 	andi	r2,r2,65535
    62d0:	1083000c 	andi	r2,r2,3072
    62d4:	1000061e 	bne	r2,zero,62f0 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
    62d8:	00055300 	call	5530 <Check_for_Master_Boot_Record>
    62dc:	10000426 	beq	r2,zero,62f0 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
    62e0:	d0a72517 	ldw	r2,-25452(gp)
    62e4:	1009883a 	mov	r4,r2
    62e8:	0005bdc0 	call	5bdc <Check_for_DOS_FAT>
    62ec:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
    62f0:	e0bffe17 	ldw	r2,-8(fp)
    62f4:	10800058 	cmpnei	r2,r2,1
    62f8:	10000d1e 	bne	r2,zero,6330 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
    62fc:	00800074 	movhi	r2,1
    6300:	10828104 	addi	r2,r2,2564
    6304:	10801083 	ldbu	r2,66(r2)
    6308:	10803fcc 	andi	r2,r2,255
    630c:	10800420 	cmpeqi	r2,r2,16
    6310:	1000021e 	bne	r2,zero,631c <Look_for_FAT16+0xc0>
				{
					result = false;
    6314:	e03ffe15 	stw	zero,-8(fp)
    6318:	00000506 	br	6330 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
    631c:	00800074 	movhi	r2,1
    6320:	10828104 	addi	r2,r2,2564
    6324:	1080058b 	ldhu	r2,22(r2)
    6328:	10bfffcc 	andi	r2,r2,65535
    632c:	d0a72615 	stw	r2,-25448(gp)
				}
			}
		}
	}
	return result;
    6330:	e0bffe17 	ldw	r2,-8(fp)
}
    6334:	e037883a 	mov	sp,fp
    6338:	dfc00117 	ldw	ra,4(sp)
    633c:	df000017 	ldw	fp,0(sp)
    6340:	dec00204 	addi	sp,sp,8
    6344:	f800283a 	ret

00006348 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    6348:	defffb04 	addi	sp,sp,-20
    634c:	dfc00415 	stw	ra,16(sp)
    6350:	df000315 	stw	fp,12(sp)
    6354:	df000304 	addi	fp,sp,12
    6358:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
    635c:	e13fff17 	ldw	r4,-4(fp)
    6360:	000c4ec0 	call	c4ec <strlen>
    6364:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
    6368:	e03ffd15 	stw	zero,-12(fp)
    636c:	00001e06 	br	63e8 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
    6370:	e0bffd17 	ldw	r2,-12(fp)
    6374:	e0ffff17 	ldw	r3,-4(fp)
    6378:	1885883a 	add	r2,r3,r2
    637c:	10800003 	ldbu	r2,0(r2)
    6380:	10803fcc 	andi	r2,r2,255
    6384:	1080201c 	xori	r2,r2,128
    6388:	10bfe004 	addi	r2,r2,-128
    638c:	10801850 	cmplti	r2,r2,97
    6390:	1000121e 	bne	r2,zero,63dc <filename_to_upper_case+0x94>
    6394:	e0bffd17 	ldw	r2,-12(fp)
    6398:	e0ffff17 	ldw	r3,-4(fp)
    639c:	1885883a 	add	r2,r3,r2
    63a0:	10800003 	ldbu	r2,0(r2)
    63a4:	10803fcc 	andi	r2,r2,255
    63a8:	1080201c 	xori	r2,r2,128
    63ac:	10bfe004 	addi	r2,r2,-128
    63b0:	10801ec8 	cmpgei	r2,r2,123
    63b4:	1000091e 	bne	r2,zero,63dc <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
    63b8:	e0bffd17 	ldw	r2,-12(fp)
    63bc:	e0ffff17 	ldw	r3,-4(fp)
    63c0:	1885883a 	add	r2,r3,r2
    63c4:	e0fffd17 	ldw	r3,-12(fp)
    63c8:	e13fff17 	ldw	r4,-4(fp)
    63cc:	20c7883a 	add	r3,r4,r3
    63d0:	18c00003 	ldbu	r3,0(r3)
    63d4:	18fff804 	addi	r3,r3,-32
    63d8:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    63dc:	e0bffd17 	ldw	r2,-12(fp)
    63e0:	10800044 	addi	r2,r2,1
    63e4:	e0bffd15 	stw	r2,-12(fp)
    63e8:	e0fffd17 	ldw	r3,-12(fp)
    63ec:	e0bffe17 	ldw	r2,-8(fp)
    63f0:	18bfdf16 	blt	r3,r2,6370 <__alt_data_end+0xf8006370>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
    63f4:	0001883a 	nop
    63f8:	e037883a 	mov	sp,fp
    63fc:	dfc00117 	ldw	ra,4(sp)
    6400:	df000017 	ldw	fp,0(sp)
    6404:	dec00204 	addi	sp,sp,8
    6408:	f800283a 	ret

0000640c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
    640c:	defff804 	addi	sp,sp,-32
    6410:	dfc00715 	stw	ra,28(sp)
    6414:	df000615 	stw	fp,24(sp)
    6418:	df000604 	addi	fp,sp,24
    641c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
    6420:	e13fff17 	ldw	r4,-4(fp)
    6424:	000c4ec0 	call	c4ec <strlen>
    6428:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
    642c:	00bfffc4 	movi	r2,-1
    6430:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
    6434:	00bfffc4 	movi	r2,-1
    6438:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
    643c:	00800044 	movi	r2,1
    6440:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
    6444:	e03ffa15 	stw	zero,-24(fp)
    6448:	00006d06 	br	6600 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
    644c:	e0bffa17 	ldw	r2,-24(fp)
    6450:	e0ffff17 	ldw	r3,-4(fp)
    6454:	1885883a 	add	r2,r3,r2
    6458:	10800003 	ldbu	r2,0(r2)
    645c:	10803fcc 	andi	r2,r2,255
    6460:	1080201c 	xori	r2,r2,128
    6464:	10bfe004 	addi	r2,r2,-128
    6468:	10800820 	cmpeqi	r2,r2,32
    646c:	10003e1e 	bne	r2,zero,6568 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    6470:	e0bffa17 	ldw	r2,-24(fp)
    6474:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
    6478:	e0bffb17 	ldw	r2,-20(fp)
    647c:	1880121e 	bne	r3,r2,64c8 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    6480:	e0bffa17 	ldw	r2,-24(fp)
    6484:	e0ffff17 	ldw	r3,-4(fp)
    6488:	1885883a 	add	r2,r3,r2
    648c:	10800003 	ldbu	r2,0(r2)
    6490:	10803fcc 	andi	r2,r2,255
    6494:	1080201c 	xori	r2,r2,128
    6498:	10bfe004 	addi	r2,r2,-128
    649c:	10801720 	cmpeqi	r2,r2,92
    64a0:	1000311e 	bne	r2,zero,6568 <check_file_name_for_FAT16_compliance+0x15c>
    64a4:	e0bffa17 	ldw	r2,-24(fp)
    64a8:	e0ffff17 	ldw	r3,-4(fp)
    64ac:	1885883a 	add	r2,r3,r2
    64b0:	10800003 	ldbu	r2,0(r2)
    64b4:	10803fcc 	andi	r2,r2,255
    64b8:	1080201c 	xori	r2,r2,128
    64bc:	10bfe004 	addi	r2,r2,-128
    64c0:	10800be0 	cmpeqi	r2,r2,47
    64c4:	1000281e 	bne	r2,zero,6568 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
    64c8:	e0fffa17 	ldw	r3,-24(fp)
    64cc:	e0bffc17 	ldw	r2,-16(fp)
    64d0:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    64d4:	10800258 	cmpnei	r2,r2,9
    64d8:	1000091e 	bne	r2,zero,6500 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
    64dc:	e0bffa17 	ldw	r2,-24(fp)
    64e0:	e0ffff17 	ldw	r3,-4(fp)
    64e4:	1885883a 	add	r2,r3,r2
    64e8:	10800003 	ldbu	r2,0(r2)
    64ec:	10803fcc 	andi	r2,r2,255
    64f0:	1080201c 	xori	r2,r2,128
    64f4:	10bfe004 	addi	r2,r2,-128
    64f8:	10800b98 	cmpnei	r2,r2,46
    64fc:	10001a1e 	bne	r2,zero,6568 <check_file_name_for_FAT16_compliance+0x15c>
    6500:	e0fffb17 	ldw	r3,-20(fp)
    6504:	e0bffc17 	ldw	r2,-16(fp)
    6508:	18801926 	beq	r3,r2,6570 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
    650c:	e0fffa17 	ldw	r3,-24(fp)
    6510:	e0bffc17 	ldw	r2,-16(fp)
    6514:	1885c83a 	sub	r2,r3,r2
    6518:	10800110 	cmplti	r2,r2,4
    651c:	1000141e 	bne	r2,zero,6570 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
    6520:	e0bffa17 	ldw	r2,-24(fp)
    6524:	e0ffff17 	ldw	r3,-4(fp)
    6528:	1885883a 	add	r2,r3,r2
    652c:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
    6530:	10803fcc 	andi	r2,r2,255
    6534:	1080201c 	xori	r2,r2,128
    6538:	10bfe004 	addi	r2,r2,-128
    653c:	10801720 	cmpeqi	r2,r2,92
    6540:	10000b1e 	bne	r2,zero,6570 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
    6544:	e0bffa17 	ldw	r2,-24(fp)
    6548:	e0ffff17 	ldw	r3,-4(fp)
    654c:	1885883a 	add	r2,r3,r2
    6550:	10800003 	ldbu	r2,0(r2)
    6554:	10803fcc 	andi	r2,r2,255
    6558:	1080201c 	xori	r2,r2,128
    655c:	10bfe004 	addi	r2,r2,-128
    6560:	10800be0 	cmpeqi	r2,r2,47
    6564:	1000021e 	bne	r2,zero,6570 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
    6568:	e03ffd15 	stw	zero,-12(fp)
            break;
    656c:	00002706 	br	660c <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
    6570:	e0bffa17 	ldw	r2,-24(fp)
    6574:	e0ffff17 	ldw	r3,-4(fp)
    6578:	1885883a 	add	r2,r3,r2
    657c:	10800003 	ldbu	r2,0(r2)
    6580:	10803fcc 	andi	r2,r2,255
    6584:	1080201c 	xori	r2,r2,128
    6588:	10bfe004 	addi	r2,r2,-128
    658c:	10801720 	cmpeqi	r2,r2,92
    6590:	1000091e 	bne	r2,zero,65b8 <check_file_name_for_FAT16_compliance+0x1ac>
    6594:	e0bffa17 	ldw	r2,-24(fp)
    6598:	e0ffff17 	ldw	r3,-4(fp)
    659c:	1885883a 	add	r2,r3,r2
    65a0:	10800003 	ldbu	r2,0(r2)
    65a4:	10803fcc 	andi	r2,r2,255
    65a8:	1080201c 	xori	r2,r2,128
    65ac:	10bfe004 	addi	r2,r2,-128
    65b0:	10800bd8 	cmpnei	r2,r2,47
    65b4:	1000041e 	bne	r2,zero,65c8 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
    65b8:	e0bffa17 	ldw	r2,-24(fp)
    65bc:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
    65c0:	e0bffa17 	ldw	r2,-24(fp)
    65c4:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
    65c8:	e0bffa17 	ldw	r2,-24(fp)
    65cc:	e0ffff17 	ldw	r3,-4(fp)
    65d0:	1885883a 	add	r2,r3,r2
    65d4:	10800003 	ldbu	r2,0(r2)
    65d8:	10803fcc 	andi	r2,r2,255
    65dc:	1080201c 	xori	r2,r2,128
    65e0:	10bfe004 	addi	r2,r2,-128
    65e4:	10800b98 	cmpnei	r2,r2,46
    65e8:	1000021e 	bne	r2,zero,65f4 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
    65ec:	e0bffa17 	ldw	r2,-24(fp)
    65f0:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    65f4:	e0bffa17 	ldw	r2,-24(fp)
    65f8:	10800044 	addi	r2,r2,1
    65fc:	e0bffa15 	stw	r2,-24(fp)
    6600:	e0fffa17 	ldw	r3,-24(fp)
    6604:	e0bffe17 	ldw	r2,-8(fp)
    6608:	18bf9016 	blt	r3,r2,644c <__alt_data_end+0xf800644c>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
    660c:	e0bffe17 	ldw	r2,-8(fp)
    6610:	10bfffc4 	addi	r2,r2,-1
    6614:	e0ffff17 	ldw	r3,-4(fp)
    6618:	1885883a 	add	r2,r3,r2
    661c:	10800003 	ldbu	r2,0(r2)
    6620:	10803fcc 	andi	r2,r2,255
    6624:	1080201c 	xori	r2,r2,128
    6628:	10bfe004 	addi	r2,r2,-128
    662c:	10801720 	cmpeqi	r2,r2,92
    6630:	10000a1e 	bne	r2,zero,665c <check_file_name_for_FAT16_compliance+0x250>
    6634:	e0bffe17 	ldw	r2,-8(fp)
    6638:	10bfffc4 	addi	r2,r2,-1
    663c:	e0ffff17 	ldw	r3,-4(fp)
    6640:	1885883a 	add	r2,r3,r2
    6644:	10800003 	ldbu	r2,0(r2)
    6648:	10803fcc 	andi	r2,r2,255
    664c:	1080201c 	xori	r2,r2,128
    6650:	10bfe004 	addi	r2,r2,-128
    6654:	10800bd8 	cmpnei	r2,r2,47
    6658:	1000011e 	bne	r2,zero,6660 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
    665c:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
    6660:	e0bffd17 	ldw	r2,-12(fp)
}
    6664:	e037883a 	mov	sp,fp
    6668:	dfc00117 	ldw	ra,4(sp)
    666c:	df000017 	ldw	fp,0(sp)
    6670:	dec00204 	addi	sp,sp,8
    6674:	f800283a 	ret

00006678 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    6678:	defffb04 	addi	sp,sp,-20
    667c:	dfc00415 	stw	ra,16(sp)
    6680:	df000315 	stw	fp,12(sp)
    6684:	df000304 	addi	fp,sp,12
    6688:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
    668c:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
    6690:	e13fff17 	ldw	r4,-4(fp)
    6694:	000c4ec0 	call	c4ec <strlen>
    6698:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
    669c:	e03ffd15 	stw	zero,-12(fp)
    66a0:	00001506 	br	66f8 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
    66a4:	e0bffd17 	ldw	r2,-12(fp)
    66a8:	e0ffff17 	ldw	r3,-4(fp)
    66ac:	1885883a 	add	r2,r3,r2
    66b0:	10800003 	ldbu	r2,0(r2)
    66b4:	10803fcc 	andi	r2,r2,255
    66b8:	1080201c 	xori	r2,r2,128
    66bc:	10bfe004 	addi	r2,r2,-128
    66c0:	10801720 	cmpeqi	r2,r2,92
    66c4:	10000f1e 	bne	r2,zero,6704 <get_dir_divider_location+0x8c>
    66c8:	e0bffd17 	ldw	r2,-12(fp)
    66cc:	e0ffff17 	ldw	r3,-4(fp)
    66d0:	1885883a 	add	r2,r3,r2
    66d4:	10800003 	ldbu	r2,0(r2)
    66d8:	10803fcc 	andi	r2,r2,255
    66dc:	1080201c 	xori	r2,r2,128
    66e0:	10bfe004 	addi	r2,r2,-128
    66e4:	10800be0 	cmpeqi	r2,r2,47
    66e8:	1000061e 	bne	r2,zero,6704 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
    66ec:	e0bffd17 	ldw	r2,-12(fp)
    66f0:	10800044 	addi	r2,r2,1
    66f4:	e0bffd15 	stw	r2,-12(fp)
    66f8:	e0fffd17 	ldw	r3,-12(fp)
    66fc:	e0bffe17 	ldw	r2,-8(fp)
    6700:	18bfe816 	blt	r3,r2,66a4 <__alt_data_end+0xf80066a4>
        {
            break;
        }
    }
    
    if (index == length)
    6704:	e0fffd17 	ldw	r3,-12(fp)
    6708:	e0bffe17 	ldw	r2,-8(fp)
    670c:	1880021e 	bne	r3,r2,6718 <get_dir_divider_location+0xa0>
    {
        index = -1;
    6710:	00bfffc4 	movi	r2,-1
    6714:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
    6718:	e0bffd17 	ldw	r2,-12(fp)
}
    671c:	e037883a 	mov	sp,fp
    6720:	dfc00117 	ldw	ra,4(sp)
    6724:	df000017 	ldw	fp,0(sp)
    6728:	dec00204 	addi	sp,sp,8
    672c:	f800283a 	ret

00006730 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    6730:	defffa04 	addi	sp,sp,-24
    6734:	df000515 	stw	fp,20(sp)
    6738:	df000504 	addi	fp,sp,20
    673c:	e13ffd15 	stw	r4,-12(fp)
    6740:	e17ffe15 	stw	r5,-8(fp)
    6744:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
    6748:	00800044 	movi	r2,1
    674c:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
    6750:	e03ffc15 	stw	zero,-16(fp)
    6754:	00004606 	br	6870 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
    6758:	e0fffd17 	ldw	r3,-12(fp)
    675c:	e0bffc17 	ldw	r2,-16(fp)
    6760:	1885883a 	add	r2,r3,r2
    6764:	10800003 	ldbu	r2,0(r2)
    6768:	10803fcc 	andi	r2,r2,255
    676c:	10801870 	cmpltui	r2,r2,97
    6770:	1000101e 	bne	r2,zero,67b4 <match_file_record_to_name_ext+0x84>
    6774:	e0fffd17 	ldw	r3,-12(fp)
    6778:	e0bffc17 	ldw	r2,-16(fp)
    677c:	1885883a 	add	r2,r3,r2
    6780:	10800003 	ldbu	r2,0(r2)
    6784:	10803fcc 	andi	r2,r2,255
    6788:	10801ee8 	cmpgeui	r2,r2,123
    678c:	1000091e 	bne	r2,zero,67b4 <match_file_record_to_name_ext+0x84>
    6790:	e0fffd17 	ldw	r3,-12(fp)
    6794:	e0bffc17 	ldw	r2,-16(fp)
    6798:	1885883a 	add	r2,r3,r2
    679c:	10800003 	ldbu	r2,0(r2)
    67a0:	10bff804 	addi	r2,r2,-32
    67a4:	10c03fcc 	andi	r3,r2,255
    67a8:	18c0201c 	xori	r3,r3,128
    67ac:	18ffe004 	addi	r3,r3,-128
    67b0:	00000706 	br	67d0 <match_file_record_to_name_ext+0xa0>
    67b4:	e0fffd17 	ldw	r3,-12(fp)
    67b8:	e0bffc17 	ldw	r2,-16(fp)
    67bc:	1885883a 	add	r2,r3,r2
    67c0:	10800003 	ldbu	r2,0(r2)
    67c4:	10c03fcc 	andi	r3,r2,255
    67c8:	18c0201c 	xori	r3,r3,128
    67cc:	18ffe004 	addi	r3,r3,-128
    67d0:	e0bffc17 	ldw	r2,-16(fp)
    67d4:	e13ffe17 	ldw	r4,-8(fp)
    67d8:	2085883a 	add	r2,r4,r2
    67dc:	10800003 	ldbu	r2,0(r2)
    67e0:	10803fcc 	andi	r2,r2,255
    67e4:	1080201c 	xori	r2,r2,128
    67e8:	10bfe004 	addi	r2,r2,-128
    67ec:	10801850 	cmplti	r2,r2,97
    67f0:	1000121e 	bne	r2,zero,683c <match_file_record_to_name_ext+0x10c>
    67f4:	e0bffc17 	ldw	r2,-16(fp)
    67f8:	e13ffe17 	ldw	r4,-8(fp)
    67fc:	2085883a 	add	r2,r4,r2
    6800:	10800003 	ldbu	r2,0(r2)
    6804:	10803fcc 	andi	r2,r2,255
    6808:	1080201c 	xori	r2,r2,128
    680c:	10bfe004 	addi	r2,r2,-128
    6810:	10801ec8 	cmpgei	r2,r2,123
    6814:	1000091e 	bne	r2,zero,683c <match_file_record_to_name_ext+0x10c>
    6818:	e0bffc17 	ldw	r2,-16(fp)
    681c:	e13ffe17 	ldw	r4,-8(fp)
    6820:	2085883a 	add	r2,r4,r2
    6824:	10800003 	ldbu	r2,0(r2)
    6828:	10bff804 	addi	r2,r2,-32
    682c:	10803fcc 	andi	r2,r2,255
    6830:	1080201c 	xori	r2,r2,128
    6834:	10bfe004 	addi	r2,r2,-128
    6838:	00000706 	br	6858 <match_file_record_to_name_ext+0x128>
    683c:	e0bffc17 	ldw	r2,-16(fp)
    6840:	e13ffe17 	ldw	r4,-8(fp)
    6844:	2085883a 	add	r2,r4,r2
    6848:	10800003 	ldbu	r2,0(r2)
    684c:	10803fcc 	andi	r2,r2,255
    6850:	1080201c 	xori	r2,r2,128
    6854:	10bfe004 	addi	r2,r2,-128
    6858:	18800226 	beq	r3,r2,6864 <match_file_record_to_name_ext+0x134>
        {
            match = false;
    685c:	e03ffb15 	stw	zero,-20(fp)
			break;
    6860:	00000606 	br	687c <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    6864:	e0bffc17 	ldw	r2,-16(fp)
    6868:	10800044 	addi	r2,r2,1
    686c:	e0bffc15 	stw	r2,-16(fp)
    6870:	e0bffc17 	ldw	r2,-16(fp)
    6874:	10800210 	cmplti	r2,r2,8
    6878:	103fb71e 	bne	r2,zero,6758 <__alt_data_end+0xf8006758>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
    687c:	e03ffc15 	stw	zero,-16(fp)
    6880:	00004a06 	br	69ac <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
    6884:	e0fffd17 	ldw	r3,-12(fp)
    6888:	e0bffc17 	ldw	r2,-16(fp)
    688c:	1885883a 	add	r2,r3,r2
    6890:	10800204 	addi	r2,r2,8
    6894:	10800003 	ldbu	r2,0(r2)
    6898:	10803fcc 	andi	r2,r2,255
    689c:	10801870 	cmpltui	r2,r2,97
    68a0:	1000121e 	bne	r2,zero,68ec <match_file_record_to_name_ext+0x1bc>
    68a4:	e0fffd17 	ldw	r3,-12(fp)
    68a8:	e0bffc17 	ldw	r2,-16(fp)
    68ac:	1885883a 	add	r2,r3,r2
    68b0:	10800204 	addi	r2,r2,8
    68b4:	10800003 	ldbu	r2,0(r2)
    68b8:	10803fcc 	andi	r2,r2,255
    68bc:	10801ee8 	cmpgeui	r2,r2,123
    68c0:	10000a1e 	bne	r2,zero,68ec <match_file_record_to_name_ext+0x1bc>
    68c4:	e0fffd17 	ldw	r3,-12(fp)
    68c8:	e0bffc17 	ldw	r2,-16(fp)
    68cc:	1885883a 	add	r2,r3,r2
    68d0:	10800204 	addi	r2,r2,8
    68d4:	10800003 	ldbu	r2,0(r2)
    68d8:	10bff804 	addi	r2,r2,-32
    68dc:	10c03fcc 	andi	r3,r2,255
    68e0:	18c0201c 	xori	r3,r3,128
    68e4:	18ffe004 	addi	r3,r3,-128
    68e8:	00000806 	br	690c <match_file_record_to_name_ext+0x1dc>
    68ec:	e0fffd17 	ldw	r3,-12(fp)
    68f0:	e0bffc17 	ldw	r2,-16(fp)
    68f4:	1885883a 	add	r2,r3,r2
    68f8:	10800204 	addi	r2,r2,8
    68fc:	10800003 	ldbu	r2,0(r2)
    6900:	10c03fcc 	andi	r3,r2,255
    6904:	18c0201c 	xori	r3,r3,128
    6908:	18ffe004 	addi	r3,r3,-128
    690c:	e0bffc17 	ldw	r2,-16(fp)
    6910:	e13fff17 	ldw	r4,-4(fp)
    6914:	2085883a 	add	r2,r4,r2
    6918:	10800003 	ldbu	r2,0(r2)
    691c:	10803fcc 	andi	r2,r2,255
    6920:	1080201c 	xori	r2,r2,128
    6924:	10bfe004 	addi	r2,r2,-128
    6928:	10801850 	cmplti	r2,r2,97
    692c:	1000121e 	bne	r2,zero,6978 <match_file_record_to_name_ext+0x248>
    6930:	e0bffc17 	ldw	r2,-16(fp)
    6934:	e13fff17 	ldw	r4,-4(fp)
    6938:	2085883a 	add	r2,r4,r2
    693c:	10800003 	ldbu	r2,0(r2)
    6940:	10803fcc 	andi	r2,r2,255
    6944:	1080201c 	xori	r2,r2,128
    6948:	10bfe004 	addi	r2,r2,-128
    694c:	10801ec8 	cmpgei	r2,r2,123
    6950:	1000091e 	bne	r2,zero,6978 <match_file_record_to_name_ext+0x248>
    6954:	e0bffc17 	ldw	r2,-16(fp)
    6958:	e13fff17 	ldw	r4,-4(fp)
    695c:	2085883a 	add	r2,r4,r2
    6960:	10800003 	ldbu	r2,0(r2)
    6964:	10bff804 	addi	r2,r2,-32
    6968:	10803fcc 	andi	r2,r2,255
    696c:	1080201c 	xori	r2,r2,128
    6970:	10bfe004 	addi	r2,r2,-128
    6974:	00000706 	br	6994 <match_file_record_to_name_ext+0x264>
    6978:	e0bffc17 	ldw	r2,-16(fp)
    697c:	e13fff17 	ldw	r4,-4(fp)
    6980:	2085883a 	add	r2,r4,r2
    6984:	10800003 	ldbu	r2,0(r2)
    6988:	10803fcc 	andi	r2,r2,255
    698c:	1080201c 	xori	r2,r2,128
    6990:	10bfe004 	addi	r2,r2,-128
    6994:	18800226 	beq	r3,r2,69a0 <match_file_record_to_name_ext+0x270>
        {
            match = false;
    6998:	e03ffb15 	stw	zero,-20(fp)
			break;
    699c:	00000606 	br	69b8 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
    69a0:	e0bffc17 	ldw	r2,-16(fp)
    69a4:	10800044 	addi	r2,r2,1
    69a8:	e0bffc15 	stw	r2,-16(fp)
    69ac:	e0bffc17 	ldw	r2,-16(fp)
    69b0:	108000d0 	cmplti	r2,r2,3
    69b4:	103fb31e 	bne	r2,zero,6884 <__alt_data_end+0xf8006884>
        {
            match = false;
			break;
        }
    }
	return match;
    69b8:	e0bffb17 	ldw	r2,-20(fp)
}
    69bc:	e037883a 	mov	sp,fp
    69c0:	df000017 	ldw	fp,0(sp)
    69c4:	dec00104 	addi	sp,sp,4
    69c8:	f800283a 	ret

000069cc <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
    69cc:	deffe704 	addi	sp,sp,-100
    69d0:	dfc01815 	stw	ra,96(sp)
    69d4:	df001715 	stw	fp,92(sp)
    69d8:	df001704 	addi	fp,sp,92
    69dc:	e13ffd15 	stw	r4,-12(fp)
    69e0:	e17ffe15 	stw	r5,-8(fp)
    69e4:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
    69e8:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
    69ec:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
    69f0:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    69f4:	e13ffd17 	ldw	r4,-12(fp)
    69f8:	00066780 	call	6678 <get_dir_divider_location>
    69fc:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
    6a00:	00012f06 	br	6ec0 <get_home_directory_cluster_for_file+0x4f4>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    6a04:	00800804 	movi	r2,32
    6a08:	e0bff905 	stb	r2,-28(fp)
    6a0c:	00800804 	movi	r2,32
    6a10:	e0bff945 	stb	r2,-27(fp)
    6a14:	00800804 	movi	r2,32
    6a18:	e0bff985 	stb	r2,-26(fp)
    6a1c:	00800804 	movi	r2,32
    6a20:	e0bff9c5 	stb	r2,-25(fp)
    6a24:	00800804 	movi	r2,32
    6a28:	e0bffa05 	stb	r2,-24(fp)
    6a2c:	00800804 	movi	r2,32
    6a30:	e0bffa45 	stb	r2,-23(fp)
    6a34:	00800804 	movi	r2,32
    6a38:	e0bffa85 	stb	r2,-22(fp)
    6a3c:	00800804 	movi	r2,32
    6a40:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
    6a44:	00800804 	movi	r2,32
    6a48:	e0bffb05 	stb	r2,-20(fp)
    6a4c:	00800804 	movi	r2,32
    6a50:	e0bffb45 	stb	r2,-19(fp)
    6a54:	00800804 	movi	r2,32
    6a58:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
    6a5c:	00bfffc4 	movi	r2,-1
    6a60:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
    6a64:	e0bfea17 	ldw	r2,-88(fp)
    6a68:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
    6a6c:	e03fec15 	stw	zero,-80(fp)
    6a70:	00002d06 	br	6b28 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
    6a74:	e0ffec17 	ldw	r3,-80(fp)
    6a78:	e0bfed17 	ldw	r2,-76(fp)
    6a7c:	1885883a 	add	r2,r3,r2
    6a80:	1007883a 	mov	r3,r2
    6a84:	e0bffd17 	ldw	r2,-12(fp)
    6a88:	10c5883a 	add	r2,r2,r3
    6a8c:	10800003 	ldbu	r2,0(r2)
    6a90:	10803fcc 	andi	r2,r2,255
    6a94:	1080201c 	xori	r2,r2,128
    6a98:	10bfe004 	addi	r2,r2,-128
    6a9c:	10800b98 	cmpnei	r2,r2,46
    6aa0:	1000031e 	bne	r2,zero,6ab0 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
    6aa4:	e0bfec17 	ldw	r2,-80(fp)
    6aa8:	e0bfee15 	stw	r2,-72(fp)
    6aac:	00001b06 	br	6b1c <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
    6ab0:	e0bfee17 	ldw	r2,-72(fp)
    6ab4:	10000c0e 	bge	r2,zero,6ae8 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
    6ab8:	e0ffec17 	ldw	r3,-80(fp)
    6abc:	e0bfed17 	ldw	r2,-76(fp)
    6ac0:	1885883a 	add	r2,r3,r2
    6ac4:	1007883a 	mov	r3,r2
    6ac8:	e0bffd17 	ldw	r2,-12(fp)
    6acc:	10c5883a 	add	r2,r2,r3
    6ad0:	10c00003 	ldbu	r3,0(r2)
    6ad4:	e13ff904 	addi	r4,fp,-28
    6ad8:	e0bfec17 	ldw	r2,-80(fp)
    6adc:	2085883a 	add	r2,r4,r2
    6ae0:	10c00005 	stb	r3,0(r2)
    6ae4:	00000d06 	br	6b1c <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
    6ae8:	e0ffec17 	ldw	r3,-80(fp)
    6aec:	e0bfee17 	ldw	r2,-72(fp)
    6af0:	1885c83a 	sub	r2,r3,r2
    6af4:	e13fec17 	ldw	r4,-80(fp)
    6af8:	e0ffed17 	ldw	r3,-76(fp)
    6afc:	20c7883a 	add	r3,r4,r3
    6b00:	1809883a 	mov	r4,r3
    6b04:	e0fffd17 	ldw	r3,-12(fp)
    6b08:	1907883a 	add	r3,r3,r4
    6b0c:	18c00003 	ldbu	r3,0(r3)
    6b10:	e13ffb04 	addi	r4,fp,-20
    6b14:	2085883a 	add	r2,r4,r2
    6b18:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
    6b1c:	e0bfec17 	ldw	r2,-80(fp)
    6b20:	10800044 	addi	r2,r2,1
    6b24:	e0bfec15 	stw	r2,-80(fp)
    6b28:	e0ffec17 	ldw	r3,-80(fp)
    6b2c:	e0bfeb17 	ldw	r2,-84(fp)
    6b30:	18bfd016 	blt	r3,r2,6a74 <__alt_data_end+0xf8006a74>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
    6b34:	e0bfea17 	ldw	r2,-88(fp)
    6b38:	10005c1e 	bne	r2,zero,6cac <get_home_directory_cluster_for_file+0x2e0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    6b3c:	00800074 	movhi	r2,1
    6b40:	10828104 	addi	r2,r2,2564
    6b44:	1080050b 	ldhu	r2,20(r2)
    6b48:	10bfffcc 	andi	r2,r2,65535
    6b4c:	1006917a 	slli	r3,r2,5
    6b50:	00800074 	movhi	r2,1
    6b54:	10828104 	addi	r2,r2,2564
    6b58:	1080030b 	ldhu	r2,12(r2)
    6b5c:	10bfffcc 	andi	r2,r2,65535
    6b60:	1885283a 	div	r2,r3,r2
    6b64:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    6b68:	e03ff015 	stw	zero,-64(fp)
    6b6c:	00003b06 	br	6c5c <get_home_directory_cluster_for_file+0x290>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
    6b70:	00800074 	movhi	r2,1
    6b74:	10828104 	addi	r2,r2,2564
    6b78:	10c01317 	ldw	r3,76(r2)
    6b7c:	e0bff017 	ldw	r2,-64(fp)
    6b80:	1885883a 	add	r2,r3,r2
    6b84:	1007883a 	mov	r3,r2
    6b88:	d0a72517 	ldw	r2,-25452(gp)
    6b8c:	100b883a 	mov	r5,r2
    6b90:	1809883a 	mov	r4,r3
    6b94:	00052c40 	call	52c4 <Read_Sector_Data>
    6b98:	10003426 	beq	r2,zero,6c6c <get_home_directory_cluster_for_file+0x2a0>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    6b9c:	e03ff115 	stw	zero,-60(fp)
    6ba0:	00002506 	br	6c38 <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
    6ba4:	e0bff117 	ldw	r2,-60(fp)
    6ba8:	1004917a 	slli	r2,r2,5
    6bac:	e0fff017 	ldw	r3,-64(fp)
    6bb0:	180f883a 	mov	r7,r3
    6bb4:	000d883a 	mov	r6,zero
    6bb8:	e17fff17 	ldw	r5,-4(fp)
    6bbc:	1009883a 	mov	r4,r2
    6bc0:	00056d40 	call	56d4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    6bc4:	e0bfff17 	ldw	r2,-4(fp)
    6bc8:	10800003 	ldbu	r2,0(r2)
    6bcc:	10803fcc 	andi	r2,r2,255
    6bd0:	10803960 	cmpeqi	r2,r2,229
    6bd4:	1000151e 	bne	r2,zero,6c2c <get_home_directory_cluster_for_file+0x260>
    6bd8:	e0bfff17 	ldw	r2,-4(fp)
    6bdc:	10800003 	ldbu	r2,0(r2)
    6be0:	10803fcc 	andi	r2,r2,255
    6be4:	10001126 	beq	r2,zero,6c2c <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
    6be8:	e0fffb04 	addi	r3,fp,-20
    6bec:	e0bff904 	addi	r2,fp,-28
    6bf0:	180d883a 	mov	r6,r3
    6bf4:	100b883a 	mov	r5,r2
    6bf8:	e13fff17 	ldw	r4,-4(fp)
    6bfc:	00067300 	call	6730 <match_file_record_to_name_ext>
    6c00:	e0bff815 	stw	r2,-32(fp)
                            if (match)
    6c04:	e0bff817 	ldw	r2,-32(fp)
    6c08:	10000826 	beq	r2,zero,6c2c <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
    6c0c:	e0bfff17 	ldw	r2,-4(fp)
    6c10:	1080058b 	ldhu	r2,22(r2)
    6c14:	10bfffcc 	andi	r2,r2,65535
    6c18:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
    6c1c:	e0bfff17 	ldw	r2,-4(fp)
    6c20:	00c00044 	movi	r3,1
    6c24:	10c00a15 	stw	r3,40(r2)
                                break;
    6c28:	00000606 	br	6c44 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    6c2c:	e0bff117 	ldw	r2,-60(fp)
    6c30:	10800044 	addi	r2,r2,1
    6c34:	e0bff115 	stw	r2,-60(fp)
    6c38:	e0bff117 	ldw	r2,-60(fp)
    6c3c:	10800410 	cmplti	r2,r2,16
    6c40:	103fd81e 	bne	r2,zero,6ba4 <__alt_data_end+0xf8006ba4>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
    6c44:	e0ffef17 	ldw	r3,-68(fp)
    6c48:	e0bfea17 	ldw	r2,-88(fp)
    6c4c:	1880091e 	bne	r3,r2,6c74 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    6c50:	e0bff017 	ldw	r2,-64(fp)
    6c54:	10800044 	addi	r2,r2,1
    6c58:	e0bff015 	stw	r2,-64(fp)
    6c5c:	e0fff017 	ldw	r3,-64(fp)
    6c60:	e0bff717 	ldw	r2,-36(fp)
    6c64:	18bfc216 	blt	r3,r2,6b70 <__alt_data_end+0xf8006b70>
    6c68:	00000306 	br	6c78 <get_home_directory_cluster_for_file+0x2ac>
                        }
                    }
                }
                else
                {
                    break;
    6c6c:	0001883a 	nop
    6c70:	00000106 	br	6c78 <get_home_directory_cluster_for_file+0x2ac>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
    6c74:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
    6c78:	e0ffef17 	ldw	r3,-68(fp)
    6c7c:	e0bfea17 	ldw	r2,-88(fp)
    6c80:	18800826 	beq	r3,r2,6ca4 <get_home_directory_cluster_for_file+0x2d8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
    6c84:	e0bfef17 	ldw	r2,-68(fp)
    6c88:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
    6c8c:	e0ffed17 	ldw	r3,-76(fp)
    6c90:	e0bfeb17 	ldw	r2,-84(fp)
    6c94:	1885883a 	add	r2,r3,r2
    6c98:	10800044 	addi	r2,r2,1
    6c9c:	e0bfed15 	stw	r2,-76(fp)
    6ca0:	00007d06 	br	6e98 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
    6ca4:	0005883a 	mov	r2,zero
    6ca8:	00009106 	br	6ef0 <get_home_directory_cluster_for_file+0x524>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
    6cac:	e0bfea17 	ldw	r2,-88(fp)
    6cb0:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    6cb4:	e0bff417 	ldw	r2,-48(fp)
    6cb8:	10ffff84 	addi	r3,r2,-2
    6cbc:	00800074 	movhi	r2,1
    6cc0:	10828104 	addi	r2,r2,2564
    6cc4:	10800383 	ldbu	r2,14(r2)
    6cc8:	10803fcc 	andi	r2,r2,255
    6ccc:	1885383a 	mul	r2,r3,r2
    6cd0:	1007883a 	mov	r3,r2
    6cd4:	00800074 	movhi	r2,1
    6cd8:	10828104 	addi	r2,r2,2564
    6cdc:	10801417 	ldw	r2,80(r2)
    6ce0:	1885883a 	add	r2,r3,r2
    6ce4:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    6ce8:	e03ff215 	stw	zero,-56(fp)
    6cec:	00003606 	br	6dc8 <get_home_directory_cluster_for_file+0x3fc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    6cf0:	e0fff217 	ldw	r3,-56(fp)
    6cf4:	e0bff517 	ldw	r2,-44(fp)
    6cf8:	1885883a 	add	r2,r3,r2
    6cfc:	d0e72517 	ldw	r3,-25452(gp)
    6d00:	180b883a 	mov	r5,r3
    6d04:	1009883a 	mov	r4,r2
    6d08:	00052c40 	call	52c4 <Read_Sector_Data>
    6d0c:	10003526 	beq	r2,zero,6de4 <get_home_directory_cluster_for_file+0x418>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
    6d10:	e03ff315 	stw	zero,-52(fp)
    6d14:	00002306 	br	6da4 <get_home_directory_cluster_for_file+0x3d8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
    6d18:	e0bff317 	ldw	r2,-52(fp)
    6d1c:	1004917a 	slli	r2,r2,5
    6d20:	e0fff417 	ldw	r3,-48(fp)
    6d24:	e13ff217 	ldw	r4,-56(fp)
    6d28:	200f883a 	mov	r7,r4
    6d2c:	180d883a 	mov	r6,r3
    6d30:	e17fff17 	ldw	r5,-4(fp)
    6d34:	1009883a 	mov	r4,r2
    6d38:	00056d40 	call	56d4 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    6d3c:	e0bfff17 	ldw	r2,-4(fp)
    6d40:	10800003 	ldbu	r2,0(r2)
    6d44:	10803fcc 	andi	r2,r2,255
    6d48:	10803960 	cmpeqi	r2,r2,229
    6d4c:	1000121e 	bne	r2,zero,6d98 <get_home_directory_cluster_for_file+0x3cc>
    6d50:	e0bfff17 	ldw	r2,-4(fp)
    6d54:	10800003 	ldbu	r2,0(r2)
    6d58:	10803fcc 	andi	r2,r2,255
    6d5c:	10000e26 	beq	r2,zero,6d98 <get_home_directory_cluster_for_file+0x3cc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
    6d60:	e0fffb04 	addi	r3,fp,-20
    6d64:	e0bff904 	addi	r2,fp,-28
    6d68:	180d883a 	mov	r6,r3
    6d6c:	100b883a 	mov	r5,r2
    6d70:	e13fff17 	ldw	r4,-4(fp)
    6d74:	00067300 	call	6730 <match_file_record_to_name_ext>
    6d78:	e0bff615 	stw	r2,-40(fp)
                                if (match)
    6d7c:	e0bff617 	ldw	r2,-40(fp)
    6d80:	10000526 	beq	r2,zero,6d98 <get_home_directory_cluster_for_file+0x3cc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
    6d84:	e0bfff17 	ldw	r2,-4(fp)
    6d88:	1080058b 	ldhu	r2,22(r2)
    6d8c:	10bfffcc 	andi	r2,r2,65535
    6d90:	e0bfef15 	stw	r2,-68(fp)
                                    break;
    6d94:	00000606 	br	6db0 <get_home_directory_cluster_for_file+0x3e4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
    6d98:	e0bff317 	ldw	r2,-52(fp)
    6d9c:	10800044 	addi	r2,r2,1
    6da0:	e0bff315 	stw	r2,-52(fp)
    6da4:	e0bff317 	ldw	r2,-52(fp)
    6da8:	10800410 	cmplti	r2,r2,16
    6dac:	103fda1e 	bne	r2,zero,6d18 <__alt_data_end+0xf8006d18>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
    6db0:	e0ffef17 	ldw	r3,-68(fp)
    6db4:	e0bfea17 	ldw	r2,-88(fp)
    6db8:	18800c1e 	bne	r3,r2,6dec <get_home_directory_cluster_for_file+0x420>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    6dbc:	e0bff217 	ldw	r2,-56(fp)
    6dc0:	10800044 	addi	r2,r2,1
    6dc4:	e0bff215 	stw	r2,-56(fp)
    6dc8:	00800074 	movhi	r2,1
    6dcc:	10828104 	addi	r2,r2,2564
    6dd0:	10800383 	ldbu	r2,14(r2)
    6dd4:	10803fcc 	andi	r2,r2,255
    6dd8:	e0fff217 	ldw	r3,-56(fp)
    6ddc:	18bfc416 	blt	r3,r2,6cf0 <__alt_data_end+0xf8006cf0>
    6de0:	00000306 	br	6df0 <get_home_directory_cluster_for_file+0x424>
                            }
                        }
                    }
                    else
                    {
                        break;
    6de4:	0001883a 	nop
    6de8:	00000106 	br	6df0 <get_home_directory_cluster_for_file+0x424>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
    6dec:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
    6df0:	e0ffef17 	ldw	r3,-68(fp)
    6df4:	e0bfea17 	ldw	r2,-88(fp)
    6df8:	1880141e 	bne	r3,r2,6e4c <get_home_directory_cluster_for_file+0x480>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
    6dfc:	e0bfef17 	ldw	r2,-68(fp)
    6e00:	e0fffc04 	addi	r3,fp,-16
    6e04:	180b883a 	mov	r5,r3
    6e08:	1009883a 	mov	r4,r2
    6e0c:	000539c0 	call	539c <get_cluster_flag>
    6e10:	10000c26 	beq	r2,zero,6e44 <get_home_directory_cluster_for_file+0x478>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
    6e14:	e0bffc0b 	ldhu	r2,-16(fp)
    6e18:	10bfffcc 	andi	r2,r2,65535
    6e1c:	10fffe0c 	andi	r3,r2,65528
    6e20:	00bffe14 	movui	r2,65528
    6e24:	1880021e 	bne	r3,r2,6e30 <get_home_directory_cluster_for_file+0x464>
						{
							return false;
    6e28:	0005883a 	mov	r2,zero
    6e2c:	00003006 	br	6ef0 <get_home_directory_cluster_for_file+0x524>
						}
						new_cluster = (next_cluster & 0x0000fff8);
    6e30:	e0bffc0b 	ldhu	r2,-16(fp)
    6e34:	10bfffcc 	andi	r2,r2,65535
    6e38:	10bffe0c 	andi	r2,r2,65528
    6e3c:	e0bfef15 	stw	r2,-68(fp)
    6e40:	00000206 	br	6e4c <get_home_directory_cluster_for_file+0x480>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
    6e44:	0005883a 	mov	r2,zero
    6e48:	00002906 	br	6ef0 <get_home_directory_cluster_for_file+0x524>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
    6e4c:	e0bff417 	ldw	r2,-48(fp)
    6e50:	00fffdd4 	movui	r3,65527
    6e54:	18800316 	blt	r3,r2,6e64 <get_home_directory_cluster_for_file+0x498>
    6e58:	e0ffef17 	ldw	r3,-68(fp)
    6e5c:	e0bfea17 	ldw	r2,-88(fp)
    6e60:	18bf9426 	beq	r3,r2,6cb4 <__alt_data_end+0xf8006cb4>
            if (new_cluster != home_dir_cluster)
    6e64:	e0ffef17 	ldw	r3,-68(fp)
    6e68:	e0bfea17 	ldw	r2,-88(fp)
    6e6c:	18800826 	beq	r3,r2,6e90 <get_home_directory_cluster_for_file+0x4c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
    6e70:	e0bfef17 	ldw	r2,-68(fp)
    6e74:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
    6e78:	e0ffed17 	ldw	r3,-76(fp)
    6e7c:	e0bfeb17 	ldw	r2,-84(fp)
    6e80:	1885883a 	add	r2,r3,r2
    6e84:	10800044 	addi	r2,r2,1
    6e88:	e0bfed15 	stw	r2,-76(fp)
    6e8c:	00000206 	br	6e98 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
    6e90:	0005883a 	mov	r2,zero
    6e94:	00001606 	br	6ef0 <get_home_directory_cluster_for_file+0x524>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
    6e98:	e0bfed17 	ldw	r2,-76(fp)
    6e9c:	e0fffd17 	ldw	r3,-12(fp)
    6ea0:	1885883a 	add	r2,r3,r2
    6ea4:	1009883a 	mov	r4,r2
    6ea8:	00066780 	call	6678 <get_dir_divider_location>
    6eac:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
    6eb0:	e0bfeb17 	ldw	r2,-84(fp)
    6eb4:	1000020e 	bge	r2,zero,6ec0 <get_home_directory_cluster_for_file+0x4f4>
        {
            // Directory has been located.
            result = true;
    6eb8:	00800044 	movi	r2,1
    6ebc:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    6ec0:	e0bfeb17 	ldw	r2,-84(fp)
    6ec4:	00becf16 	blt	zero,r2,6a04 <__alt_data_end+0xf8006a04>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
    6ec8:	e0bffe17 	ldw	r2,-8(fp)
    6ecc:	e0ffea17 	ldw	r3,-88(fp)
    6ed0:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
    6ed4:	e0bfea17 	ldw	r2,-88(fp)
    6ed8:	1000041e 	bne	r2,zero,6eec <get_home_directory_cluster_for_file+0x520>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
    6edc:	e0bfff17 	ldw	r2,-4(fp)
    6ee0:	10000a15 	stw	zero,40(r2)
		result = true;
    6ee4:	00800044 	movi	r2,1
    6ee8:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
    6eec:	e0bfe917 	ldw	r2,-92(fp)
}
    6ef0:	e037883a 	mov	sp,fp
    6ef4:	dfc00117 	ldw	ra,4(sp)
    6ef8:	df000017 	ldw	fp,0(sp)
    6efc:	dec00204 	addi	sp,sp,8
    6f00:	f800283a 	ret

00006f04 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    6f04:	deffe804 	addi	sp,sp,-96
    6f08:	dfc01715 	stw	ra,92(sp)
    6f0c:	df001615 	stw	fp,88(sp)
    6f10:	df001604 	addi	fp,sp,88
    6f14:	e13ffd15 	stw	r4,-12(fp)
    6f18:	e17ffe15 	stw	r5,-8(fp)
    6f1c:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
    6f20:	e13ffe17 	ldw	r4,-8(fp)
    6f24:	00066780 	call	6678 <get_dir_divider_location>
    6f28:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
    6f2c:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    6f30:	00800804 	movi	r2,32
    6f34:	e0bff905 	stb	r2,-28(fp)
    6f38:	00800804 	movi	r2,32
    6f3c:	e0bff945 	stb	r2,-27(fp)
    6f40:	00800804 	movi	r2,32
    6f44:	e0bff985 	stb	r2,-26(fp)
    6f48:	00800804 	movi	r2,32
    6f4c:	e0bff9c5 	stb	r2,-25(fp)
    6f50:	00800804 	movi	r2,32
    6f54:	e0bffa05 	stb	r2,-24(fp)
    6f58:	00800804 	movi	r2,32
    6f5c:	e0bffa45 	stb	r2,-23(fp)
    6f60:	00800804 	movi	r2,32
    6f64:	e0bffa85 	stb	r2,-22(fp)
    6f68:	00800804 	movi	r2,32
    6f6c:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
    6f70:	00800804 	movi	r2,32
    6f74:	e0bffb05 	stb	r2,-20(fp)
    6f78:	00800804 	movi	r2,32
    6f7c:	e0bffb45 	stb	r2,-19(fp)
    6f80:	00800804 	movi	r2,32
    6f84:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
    6f88:	00bfffc4 	movi	r2,-1
    6f8c:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
    6f90:	e0bffd17 	ldw	r2,-12(fp)
    6f94:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
    6f98:	e13ffe17 	ldw	r4,-8(fp)
    6f9c:	000c4ec0 	call	c4ec <strlen>
    6fa0:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
    6fa4:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
    6fa8:	00000b06 	br	6fd8 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
    6fac:	e0ffeb17 	ldw	r3,-84(fp)
    6fb0:	e0bfea17 	ldw	r2,-88(fp)
    6fb4:	1885883a 	add	r2,r3,r2
    6fb8:	10800044 	addi	r2,r2,1
    6fbc:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    6fc0:	e0bfeb17 	ldw	r2,-84(fp)
    6fc4:	e0fffe17 	ldw	r3,-8(fp)
    6fc8:	1885883a 	add	r2,r3,r2
    6fcc:	1009883a 	mov	r4,r2
    6fd0:	00066780 	call	6678 <get_dir_divider_location>
    6fd4:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
    6fd8:	e0bfea17 	ldw	r2,-88(fp)
    6fdc:	00bff316 	blt	zero,r2,6fac <__alt_data_end+0xf8006fac>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
    6fe0:	e0bfeb17 	ldw	r2,-84(fp)
    6fe4:	e0bfee15 	stw	r2,-72(fp)
    6fe8:	00002706 	br	7088 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
    6fec:	e0bfee17 	ldw	r2,-72(fp)
    6ff0:	e0fffe17 	ldw	r3,-8(fp)
    6ff4:	1885883a 	add	r2,r3,r2
    6ff8:	10800003 	ldbu	r2,0(r2)
    6ffc:	10803fcc 	andi	r2,r2,255
    7000:	1080201c 	xori	r2,r2,128
    7004:	10bfe004 	addi	r2,r2,-128
    7008:	10800b98 	cmpnei	r2,r2,46
    700c:	1000031e 	bne	r2,zero,701c <find_file_in_directory+0x118>
        {
            ext_index = index;
    7010:	e0bfee17 	ldw	r2,-72(fp)
    7014:	e0bfec15 	stw	r2,-80(fp)
    7018:	00001806 	br	707c <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
    701c:	e0bfec17 	ldw	r2,-80(fp)
    7020:	10000b0e 	bge	r2,zero,7050 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
    7024:	e0ffee17 	ldw	r3,-72(fp)
    7028:	e0bfeb17 	ldw	r2,-84(fp)
    702c:	1885c83a 	sub	r2,r3,r2
    7030:	e0ffee17 	ldw	r3,-72(fp)
    7034:	e13ffe17 	ldw	r4,-8(fp)
    7038:	20c7883a 	add	r3,r4,r3
    703c:	18c00003 	ldbu	r3,0(r3)
    7040:	e13ff904 	addi	r4,fp,-28
    7044:	2085883a 	add	r2,r4,r2
    7048:	10c00005 	stb	r3,0(r2)
    704c:	00000b06 	br	707c <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
    7050:	e0ffee17 	ldw	r3,-72(fp)
    7054:	e0bfec17 	ldw	r2,-80(fp)
    7058:	1885c83a 	sub	r2,r3,r2
    705c:	10bfffc4 	addi	r2,r2,-1
    7060:	e0ffee17 	ldw	r3,-72(fp)
    7064:	e13ffe17 	ldw	r4,-8(fp)
    7068:	20c7883a 	add	r3,r4,r3
    706c:	18c00003 	ldbu	r3,0(r3)
    7070:	e13ffb04 	addi	r4,fp,-20
    7074:	2085883a 	add	r2,r4,r2
    7078:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
    707c:	e0bfee17 	ldw	r2,-72(fp)
    7080:	10800044 	addi	r2,r2,1
    7084:	e0bfee15 	stw	r2,-72(fp)
    7088:	e0ffee17 	ldw	r3,-72(fp)
    708c:	e0bff417 	ldw	r2,-48(fp)
    7090:	18bfd616 	blt	r3,r2,6fec <__alt_data_end+0xf8006fec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
    7094:	e0bffd17 	ldw	r2,-12(fp)
    7098:	1000461e 	bne	r2,zero,71b4 <find_file_in_directory+0x2b0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    709c:	00800074 	movhi	r2,1
    70a0:	10828104 	addi	r2,r2,2564
    70a4:	1080050b 	ldhu	r2,20(r2)
    70a8:	10bfffcc 	andi	r2,r2,65535
    70ac:	1006917a 	slli	r3,r2,5
    70b0:	00800074 	movhi	r2,1
    70b4:	10828104 	addi	r2,r2,2564
    70b8:	1080030b 	ldhu	r2,12(r2)
    70bc:	10bfffcc 	andi	r2,r2,65535
    70c0:	1885283a 	div	r2,r3,r2
    70c4:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    70c8:	e03ff015 	stw	zero,-64(fp)
    70cc:	00003506 	br	71a4 <find_file_in_directory+0x2a0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
    70d0:	00800074 	movhi	r2,1
    70d4:	10828104 	addi	r2,r2,2564
    70d8:	10c01317 	ldw	r3,76(r2)
    70dc:	e0bff017 	ldw	r2,-64(fp)
    70e0:	1885883a 	add	r2,r3,r2
    70e4:	1007883a 	mov	r3,r2
    70e8:	d0a72517 	ldw	r2,-25452(gp)
    70ec:	100b883a 	mov	r5,r2
    70f0:	1809883a 	mov	r4,r3
    70f4:	00052c40 	call	52c4 <Read_Sector_Data>
    70f8:	10009626 	beq	r2,zero,7354 <find_file_in_directory+0x450>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    70fc:	e03ff115 	stw	zero,-60(fp)
    7100:	00002006 	br	7184 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
    7104:	e0bff117 	ldw	r2,-60(fp)
    7108:	1004917a 	slli	r2,r2,5
    710c:	e0fff017 	ldw	r3,-64(fp)
    7110:	180f883a 	mov	r7,r3
    7114:	000d883a 	mov	r6,zero
    7118:	e17fff17 	ldw	r5,-4(fp)
    711c:	1009883a 	mov	r4,r2
    7120:	00056d40 	call	56d4 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    7124:	e0bfff17 	ldw	r2,-4(fp)
    7128:	10800003 	ldbu	r2,0(r2)
    712c:	10803fcc 	andi	r2,r2,255
    7130:	10803960 	cmpeqi	r2,r2,229
    7134:	1000101e 	bne	r2,zero,7178 <find_file_in_directory+0x274>
    7138:	e0bfff17 	ldw	r2,-4(fp)
    713c:	10800003 	ldbu	r2,0(r2)
    7140:	10803fcc 	andi	r2,r2,255
    7144:	10000c26 	beq	r2,zero,7178 <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
    7148:	e0fffb04 	addi	r3,fp,-20
    714c:	e0bff904 	addi	r2,fp,-28
    7150:	180d883a 	mov	r6,r3
    7154:	100b883a 	mov	r5,r2
    7158:	e13fff17 	ldw	r4,-4(fp)
    715c:	00067300 	call	6730 <match_file_record_to_name_ext>
    7160:	e0bff815 	stw	r2,-32(fp)

                        if (match)
    7164:	e0bff817 	ldw	r2,-32(fp)
    7168:	10000326 	beq	r2,zero,7178 <find_file_in_directory+0x274>
                        {
                            result = true;
    716c:	00800044 	movi	r2,1
    7170:	e0bfef15 	stw	r2,-68(fp)
                            break;
    7174:	00000606 	br	7190 <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    7178:	e0bff117 	ldw	r2,-60(fp)
    717c:	10800044 	addi	r2,r2,1
    7180:	e0bff115 	stw	r2,-60(fp)
    7184:	e0bff117 	ldw	r2,-60(fp)
    7188:	10800410 	cmplti	r2,r2,16
    718c:	103fdd1e 	bne	r2,zero,7104 <__alt_data_end+0xf8007104>
            }
            else
            {
                break;
            }
            if (result)
    7190:	e0bfef17 	ldw	r2,-68(fp)
    7194:	1000711e 	bne	r2,zero,735c <find_file_in_directory+0x458>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    7198:	e0bff017 	ldw	r2,-64(fp)
    719c:	10800044 	addi	r2,r2,1
    71a0:	e0bff015 	stw	r2,-64(fp)
    71a4:	e0fff017 	ldw	r3,-64(fp)
    71a8:	e0bff717 	ldw	r2,-36(fp)
    71ac:	18bfc816 	blt	r3,r2,70d0 <__alt_data_end+0xf80070d0>
    71b0:	00006b06 	br	7360 <find_file_in_directory+0x45c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    71b4:	e0bfed17 	ldw	r2,-76(fp)
    71b8:	10ffff84 	addi	r3,r2,-2
    71bc:	00800074 	movhi	r2,1
    71c0:	10828104 	addi	r2,r2,2564
    71c4:	10800383 	ldbu	r2,14(r2)
    71c8:	10803fcc 	andi	r2,r2,255
    71cc:	1885383a 	mul	r2,r3,r2
    71d0:	1007883a 	mov	r3,r2
    71d4:	00800074 	movhi	r2,1
    71d8:	10828104 	addi	r2,r2,2564
    71dc:	10801417 	ldw	r2,80(r2)
    71e0:	1885883a 	add	r2,r3,r2
    71e4:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    71e8:	e03ff215 	stw	zero,-56(fp)
    71ec:	00003306 	br	72bc <find_file_in_directory+0x3b8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    71f0:	e0fff217 	ldw	r3,-56(fp)
    71f4:	e0bff517 	ldw	r2,-44(fp)
    71f8:	1885883a 	add	r2,r3,r2
    71fc:	d0e72517 	ldw	r3,-25452(gp)
    7200:	180b883a 	mov	r5,r3
    7204:	1009883a 	mov	r4,r2
    7208:	00052c40 	call	52c4 <Read_Sector_Data>
    720c:	10003226 	beq	r2,zero,72d8 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    7210:	e03ff315 	stw	zero,-52(fp)
    7214:	00002106 	br	729c <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
    7218:	e0bff317 	ldw	r2,-52(fp)
    721c:	1004917a 	slli	r2,r2,5
    7220:	e0ffed17 	ldw	r3,-76(fp)
    7224:	e13ff217 	ldw	r4,-56(fp)
    7228:	200f883a 	mov	r7,r4
    722c:	180d883a 	mov	r6,r3
    7230:	e17fff17 	ldw	r5,-4(fp)
    7234:	1009883a 	mov	r4,r2
    7238:	00056d40 	call	56d4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    723c:	e0bfff17 	ldw	r2,-4(fp)
    7240:	10800003 	ldbu	r2,0(r2)
    7244:	10803fcc 	andi	r2,r2,255
    7248:	10803960 	cmpeqi	r2,r2,229
    724c:	1000101e 	bne	r2,zero,7290 <find_file_in_directory+0x38c>
    7250:	e0bfff17 	ldw	r2,-4(fp)
    7254:	10800003 	ldbu	r2,0(r2)
    7258:	10803fcc 	andi	r2,r2,255
    725c:	10000c26 	beq	r2,zero,7290 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
    7260:	e0fffb04 	addi	r3,fp,-20
    7264:	e0bff904 	addi	r2,fp,-28
    7268:	180d883a 	mov	r6,r3
    726c:	100b883a 	mov	r5,r2
    7270:	e13fff17 	ldw	r4,-4(fp)
    7274:	00067300 	call	6730 <match_file_record_to_name_ext>
    7278:	e0bff615 	stw	r2,-40(fp)

                            if (match)
    727c:	e0bff617 	ldw	r2,-40(fp)
    7280:	10000326 	beq	r2,zero,7290 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
    7284:	00800044 	movi	r2,1
    7288:	e0bfef15 	stw	r2,-68(fp)
                                break;
    728c:	00000606 	br	72a8 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    7290:	e0bff317 	ldw	r2,-52(fp)
    7294:	10800044 	addi	r2,r2,1
    7298:	e0bff315 	stw	r2,-52(fp)
    729c:	e0bff317 	ldw	r2,-52(fp)
    72a0:	10800410 	cmplti	r2,r2,16
    72a4:	103fdc1e 	bne	r2,zero,7218 <__alt_data_end+0xf8007218>
                }
                else
                {
                    break;
                }
                if (result)
    72a8:	e0bfef17 	ldw	r2,-68(fp)
    72ac:	10000c1e 	bne	r2,zero,72e0 <find_file_in_directory+0x3dc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    72b0:	e0bff217 	ldw	r2,-56(fp)
    72b4:	10800044 	addi	r2,r2,1
    72b8:	e0bff215 	stw	r2,-56(fp)
    72bc:	00800074 	movhi	r2,1
    72c0:	10828104 	addi	r2,r2,2564
    72c4:	10800383 	ldbu	r2,14(r2)
    72c8:	10803fcc 	andi	r2,r2,255
    72cc:	e0fff217 	ldw	r3,-56(fp)
    72d0:	18bfc716 	blt	r3,r2,71f0 <__alt_data_end+0xf80071f0>
    72d4:	00000306 	br	72e4 <find_file_in_directory+0x3e0>
                        }
                    }
                }
                else
                {
                    break;
    72d8:	0001883a 	nop
    72dc:	00000106 	br	72e4 <find_file_in_directory+0x3e0>
                }
                if (result)
                {
                    break;
    72e0:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
    72e4:	e0bfef17 	ldw	r2,-68(fp)
    72e8:	1000141e 	bne	r2,zero,733c <find_file_in_directory+0x438>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
    72ec:	e0bfed17 	ldw	r2,-76(fp)
    72f0:	e0fffc04 	addi	r3,fp,-16
    72f4:	180b883a 	mov	r5,r3
    72f8:	1009883a 	mov	r4,r2
    72fc:	000539c0 	call	539c <get_cluster_flag>
    7300:	10000c26 	beq	r2,zero,7334 <find_file_in_directory+0x430>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
    7304:	e0bffc0b 	ldhu	r2,-16(fp)
    7308:	10bfffcc 	andi	r2,r2,65535
    730c:	10fffe0c 	andi	r3,r2,65528
    7310:	00bffe14 	movui	r2,65528
    7314:	1880021e 	bne	r3,r2,7320 <find_file_in_directory+0x41c>
					{
						return false;
    7318:	0005883a 	mov	r2,zero
    731c:	00001106 	br	7364 <find_file_in_directory+0x460>
					}
					cluster = (new_cluster & 0x0000fff8);
    7320:	e0bffc0b 	ldhu	r2,-16(fp)
    7324:	10bfffcc 	andi	r2,r2,65535
    7328:	10bffe0c 	andi	r2,r2,65528
    732c:	e0bfed15 	stw	r2,-76(fp)
    7330:	00000206 	br	733c <find_file_in_directory+0x438>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
    7334:	0005883a 	mov	r2,zero
    7338:	00000a06 	br	7364 <find_file_in_directory+0x460>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    733c:	e0bfed17 	ldw	r2,-76(fp)
    7340:	00fffdd4 	movui	r3,65527
    7344:	18800616 	blt	r3,r2,7360 <find_file_in_directory+0x45c>
    7348:	e0bfef17 	ldw	r2,-68(fp)
    734c:	103f9926 	beq	r2,zero,71b4 <__alt_data_end+0xf80071b4>
    7350:	00000306 	br	7360 <find_file_in_directory+0x45c>
                    }
                }
            }
            else
            {
                break;
    7354:	0001883a 	nop
    7358:	00000106 	br	7360 <find_file_in_directory+0x45c>
            }
            if (result)
            {
                break;
    735c:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
    7360:	e0bfef17 	ldw	r2,-68(fp)
}
    7364:	e037883a 	mov	sp,fp
    7368:	dfc00117 	ldw	ra,4(sp)
    736c:	df000017 	ldw	fp,0(sp)
    7370:	dec00204 	addi	sp,sp,8
    7374:	f800283a 	ret

00007378 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    7378:	defff504 	addi	sp,sp,-44
    737c:	dfc00a15 	stw	ra,40(sp)
    7380:	df000915 	stw	fp,36(sp)
    7384:	df000904 	addi	fp,sp,36
    7388:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
    738c:	00800074 	movhi	r2,1
    7390:	10828104 	addi	r2,r2,2564
    7394:	10801117 	ldw	r2,68(r2)
    7398:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
    739c:	00800084 	movi	r2,2
    73a0:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
    73a4:	00bfffc4 	movi	r2,-1
    73a8:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
    73ac:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
    73b0:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
    73b4:	00800074 	movhi	r2,1
    73b8:	10828104 	addi	r2,r2,2564
    73bc:	10801417 	ldw	r2,80(r2)
    73c0:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
    73c4:	00800074 	movhi	r2,1
    73c8:	10828104 	addi	r2,r2,2564
    73cc:	1080058b 	ldhu	r2,22(r2)
    73d0:	10bfffcc 	andi	r2,r2,65535
    73d4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
    73d8:	00800074 	movhi	r2,1
    73dc:	10828104 	addi	r2,r2,2564
    73e0:	10800917 	ldw	r2,36(r2)
    73e4:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
    73e8:	e0bffd17 	ldw	r2,-12(fp)
    73ec:	e0fffe17 	ldw	r3,-8(fp)
    73f0:	18800b2e 	bgeu	r3,r2,7420 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
    73f4:	e0fffd17 	ldw	r3,-12(fp)
    73f8:	e0bffc17 	ldw	r2,-16(fp)
    73fc:	1887c83a 	sub	r3,r3,r2
    7400:	00800074 	movhi	r2,1
    7404:	10828104 	addi	r2,r2,2564
    7408:	10800383 	ldbu	r2,14(r2)
    740c:	10803fcc 	andi	r2,r2,255
    7410:	1885203a 	divu	r2,r3,r2
    7414:	10800044 	addi	r2,r2,1
    7418:	e0bffb15 	stw	r2,-20(fp)
    741c:	00002a06 	br	74c8 <find_first_empty_cluster+0x150>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
    7420:	e0fffe17 	ldw	r3,-8(fp)
    7424:	e0bffc17 	ldw	r2,-16(fp)
    7428:	1887c83a 	sub	r3,r3,r2
    742c:	00800074 	movhi	r2,1
    7430:	10828104 	addi	r2,r2,2564
    7434:	10800383 	ldbu	r2,14(r2)
    7438:	10803fcc 	andi	r2,r2,255
    743c:	1885203a 	divu	r2,r3,r2
    7440:	10800044 	addi	r2,r2,1
    7444:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
    7448:	00001f06 	br	74c8 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
    744c:	e0bff717 	ldw	r2,-36(fp)
    7450:	d0e72517 	ldw	r3,-25452(gp)
    7454:	180b883a 	mov	r5,r3
    7458:	1009883a 	mov	r4,r2
    745c:	00052c40 	call	52c4 <Read_Sector_Data>
    7460:	10001426 	beq	r2,zero,74b4 <find_first_empty_cluster+0x13c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
    7464:	e0bff817 	ldw	r2,-32(fp)
    7468:	10803fcc 	andi	r2,r2,255
    746c:	1085883a 	add	r2,r2,r2
    7470:	1007883a 	mov	r3,r2
    7474:	d0a72717 	ldw	r2,-25444(gp)
    7478:	10800a17 	ldw	r2,40(r2)
    747c:	1885883a 	add	r2,r3,r2
    7480:	1080002b 	ldhuio	r2,0(r2)
    7484:	10bfffcc 	andi	r2,r2,65535
    7488:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
    748c:	e0bff90f 	ldh	r2,-28(fp)
    7490:	10000726 	beq	r2,zero,74b0 <find_first_empty_cluster+0x138>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
    7494:	e0bff817 	ldw	r2,-32(fp)
    7498:	10800044 	addi	r2,r2,1
    749c:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
    74a0:	e0bff817 	ldw	r2,-32(fp)
    74a4:	10803fcc 	andi	r2,r2,255
    74a8:	103fee1e 	bne	r2,zero,7464 <__alt_data_end+0xf8007464>
    74ac:	00000106 	br	74b4 <find_first_empty_cluster+0x13c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
    74b0:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
    74b4:	e0bff90f 	ldh	r2,-28(fp)
    74b8:	10000926 	beq	r2,zero,74e0 <find_first_empty_cluster+0x168>
        {
            break;
        }
        sector++;
    74bc:	e0bff717 	ldw	r2,-36(fp)
    74c0:	10800044 	addi	r2,r2,1
    74c4:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
    74c8:	00800074 	movhi	r2,1
    74cc:	10828104 	addi	r2,r2,2564
    74d0:	10c01217 	ldw	r3,72(r2)
    74d4:	e0bff717 	ldw	r2,-36(fp)
    74d8:	18bfdc1e 	bne	r3,r2,744c <__alt_data_end+0xf800744c>
    74dc:	00000106 	br	74e4 <find_first_empty_cluster+0x16c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
    74e0:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    74e4:	e0bff90f 	ldh	r2,-28(fp)
    74e8:	1000081e 	bne	r2,zero,750c <find_first_empty_cluster+0x194>
    74ec:	e0bff90f 	ldh	r2,-28(fp)
    74f0:	e0fffb17 	ldw	r3,-20(fp)
    74f4:	18800536 	bltu	r3,r2,750c <find_first_empty_cluster+0x194>
    {
        *cluster_number = cluster_index;
    74f8:	e0bfff17 	ldw	r2,-4(fp)
    74fc:	e0fff817 	ldw	r3,-32(fp)
    7500:	10c00015 	stw	r3,0(r2)
		result = true;
    7504:	00800044 	movi	r2,1
    7508:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
    750c:	e0bffa17 	ldw	r2,-24(fp)
}
    7510:	e037883a 	mov	sp,fp
    7514:	dfc00117 	ldw	ra,4(sp)
    7518:	df000017 	ldw	fp,0(sp)
    751c:	dec00204 	addi	sp,sp,8
    7520:	f800283a 	ret

00007524 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
    7524:	defff604 	addi	sp,sp,-40
    7528:	dfc00915 	stw	ra,36(sp)
    752c:	df000815 	stw	fp,32(sp)
    7530:	df000804 	addi	fp,sp,32
    7534:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
    7538:	00bfffc4 	movi	r2,-1
    753c:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
    7540:	e0bfff17 	ldw	r2,-4(fp)
    7544:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    7548:	e0bff917 	ldw	r2,-28(fp)
    754c:	10ffff84 	addi	r3,r2,-2
    7550:	00800074 	movhi	r2,1
    7554:	10828104 	addi	r2,r2,2564
    7558:	10800383 	ldbu	r2,14(r2)
    755c:	10803fcc 	andi	r2,r2,255
    7560:	1885383a 	mul	r2,r3,r2
    7564:	1007883a 	mov	r3,r2
    7568:	00800074 	movhi	r2,1
    756c:	10828104 	addi	r2,r2,2564
    7570:	10801417 	ldw	r2,80(r2)
    7574:	1885883a 	add	r2,r3,r2
    7578:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    757c:	e03ffa15 	stw	zero,-24(fp)
    7580:	00002c06 	br	7634 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    7584:	e0fffa17 	ldw	r3,-24(fp)
    7588:	e0bffc17 	ldw	r2,-16(fp)
    758c:	1885883a 	add	r2,r3,r2
    7590:	d0e72517 	ldw	r3,-25452(gp)
    7594:	180b883a 	mov	r5,r3
    7598:	1009883a 	mov	r4,r2
    759c:	00052c40 	call	52c4 <Read_Sector_Data>
    75a0:	10002b26 	beq	r2,zero,7650 <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    75a4:	e03ffb15 	stw	zero,-20(fp)
    75a8:	00001c06 	br	761c <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
    75ac:	e0bffb17 	ldw	r2,-20(fp)
    75b0:	1004917a 	slli	r2,r2,5
    75b4:	1007883a 	mov	r3,r2
    75b8:	d0a72717 	ldw	r2,-25444(gp)
    75bc:	10800a17 	ldw	r2,40(r2)
    75c0:	1885883a 	add	r2,r3,r2
    75c4:	10800023 	ldbuio	r2,0(r2)
    75c8:	10803fcc 	andi	r2,r2,255
    75cc:	10803fcc 	andi	r2,r2,255
    75d0:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
    75d4:	e0bffd0b 	ldhu	r2,-12(fp)
    75d8:	10803960 	cmpeqi	r2,r2,229
    75dc:	1000021e 	bne	r2,zero,75e8 <find_first_empty_record_in_a_subdirectory+0xc4>
    75e0:	e0bffd0b 	ldhu	r2,-12(fp)
    75e4:	10000a1e 	bne	r2,zero,7610 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
    75e8:	e0bffa17 	ldw	r2,-24(fp)
    75ec:	1006913a 	slli	r3,r2,4
    75f0:	e0bffb17 	ldw	r2,-20(fp)
    75f4:	1885883a 	add	r2,r3,r2
    75f8:	1006943a 	slli	r3,r2,16
    75fc:	e0bff917 	ldw	r2,-28(fp)
    7600:	1884b03a 	or	r2,r3,r2
    7604:	e0bff815 	stw	r2,-32(fp)
                        return result;
    7608:	e0bff817 	ldw	r2,-32(fp)
    760c:	00005306 	br	775c <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    7610:	e0bffb17 	ldw	r2,-20(fp)
    7614:	10800044 	addi	r2,r2,1
    7618:	e0bffb15 	stw	r2,-20(fp)
    761c:	e0bffb17 	ldw	r2,-20(fp)
    7620:	10800410 	cmplti	r2,r2,16
    7624:	103fe11e 	bne	r2,zero,75ac <__alt_data_end+0xf80075ac>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    7628:	e0bffa17 	ldw	r2,-24(fp)
    762c:	10800044 	addi	r2,r2,1
    7630:	e0bffa15 	stw	r2,-24(fp)
    7634:	00800074 	movhi	r2,1
    7638:	10828104 	addi	r2,r2,2564
    763c:	10800383 	ldbu	r2,14(r2)
    7640:	10803fcc 	andi	r2,r2,255
    7644:	e0fffa17 	ldw	r3,-24(fp)
    7648:	18bfce16 	blt	r3,r2,7584 <__alt_data_end+0xf8007584>
    764c:	00000106 	br	7654 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
    7650:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
    7654:	e0bff817 	ldw	r2,-32(fp)
    7658:	1000390e 	bge	r2,zero,7740 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
    765c:	e0bff917 	ldw	r2,-28(fp)
    7660:	e0fffd84 	addi	r3,fp,-10
    7664:	180b883a 	mov	r5,r3
    7668:	1009883a 	mov	r4,r2
    766c:	000539c0 	call	539c <get_cluster_flag>
    7670:	10003126 	beq	r2,zero,7738 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
    7674:	e0bffd8b 	ldhu	r2,-10(fp)
    7678:	10bfffcc 	andi	r2,r2,65535
    767c:	10fffe0c 	andi	r3,r2,65528
    7680:	00bffe14 	movui	r2,65528
    7684:	18802e1e 	bne	r3,r2,7740 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
    7688:	e0bffe04 	addi	r2,fp,-8
    768c:	1009883a 	mov	r4,r2
    7690:	00073780 	call	7378 <find_first_empty_cluster>
    7694:	10002326 	beq	r2,zero,7724 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
    7698:	e0bff917 	ldw	r2,-28(fp)
    769c:	e0fffe17 	ldw	r3,-8(fp)
    76a0:	18ffffcc 	andi	r3,r3,65535
    76a4:	18e0001c 	xori	r3,r3,32768
    76a8:	18e00004 	addi	r3,r3,-32768
    76ac:	01800044 	movi	r6,1
    76b0:	180b883a 	mov	r5,r3
    76b4:	1009883a 	mov	r4,r2
    76b8:	00054500 	call	5450 <mark_cluster>
    76bc:	10001926 	beq	r2,zero,7724 <find_first_empty_record_in_a_subdirectory+0x200>
    76c0:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
    76c4:	01800044 	movi	r6,1
    76c8:	017fffc4 	movi	r5,-1
    76cc:	1009883a 	mov	r4,r2
    76d0:	00054500 	call	5450 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
    76d4:	10001326 	beq	r2,zero,7724 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
    76d8:	e0bff917 	ldw	r2,-28(fp)
    76dc:	e0fffe17 	ldw	r3,-8(fp)
    76e0:	18ffffcc 	andi	r3,r3,65535
    76e4:	18e0001c 	xori	r3,r3,32768
    76e8:	18e00004 	addi	r3,r3,-32768
    76ec:	000d883a 	mov	r6,zero
    76f0:	180b883a 	mov	r5,r3
    76f4:	1009883a 	mov	r4,r2
    76f8:	00054500 	call	5450 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
    76fc:	10000926 	beq	r2,zero,7724 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
    7700:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
    7704:	000d883a 	mov	r6,zero
    7708:	017fffc4 	movi	r5,-1
    770c:	1009883a 	mov	r4,r2
    7710:	00054500 	call	5450 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
    7714:	10000326 	beq	r2,zero,7724 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
    7718:	00052780 	call	5278 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
    771c:	e0bffe17 	ldw	r2,-8(fp)
    7720:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
    7724:	e0bffd8b 	ldhu	r2,-10(fp)
    7728:	10bfffcc 	andi	r2,r2,65535
    772c:	10bffe0c 	andi	r2,r2,65528
    7730:	e0bff915 	stw	r2,-28(fp)
    7734:	00000206 	br	7740 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
    7738:	00bfffc4 	movi	r2,-1
    773c:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
    7740:	e0bff917 	ldw	r2,-28(fp)
    7744:	00fffdd4 	movui	r3,65527
    7748:	18800316 	blt	r3,r2,7758 <find_first_empty_record_in_a_subdirectory+0x234>
    774c:	e0bff817 	ldw	r2,-32(fp)
    7750:	10bfffe0 	cmpeqi	r2,r2,-1
    7754:	103f7c1e 	bne	r2,zero,7548 <__alt_data_end+0xf8007548>
    return result; 
    7758:	e0bff817 	ldw	r2,-32(fp)
}
    775c:	e037883a 	mov	sp,fp
    7760:	dfc00117 	ldw	ra,4(sp)
    7764:	df000017 	ldw	fp,0(sp)
    7768:	dec00204 	addi	sp,sp,8
    776c:	f800283a 	ret

00007770 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
    7770:	defff904 	addi	sp,sp,-28
    7774:	dfc00615 	stw	ra,24(sp)
    7778:	df000515 	stw	fp,20(sp)
    777c:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    7780:	00800074 	movhi	r2,1
    7784:	10828104 	addi	r2,r2,2564
    7788:	1080050b 	ldhu	r2,20(r2)
    778c:	10bfffcc 	andi	r2,r2,65535
    7790:	1006917a 	slli	r3,r2,5
    7794:	00800074 	movhi	r2,1
    7798:	10828104 	addi	r2,r2,2564
    779c:	1080030b 	ldhu	r2,12(r2)
    77a0:	10bfffcc 	andi	r2,r2,65535
    77a4:	1885283a 	div	r2,r3,r2
    77a8:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
    77ac:	00bfffc4 	movi	r2,-1
    77b0:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    77b4:	e03ffb15 	stw	zero,-20(fp)
    77b8:	00002d06 	br	7870 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
    77bc:	00800074 	movhi	r2,1
    77c0:	10828104 	addi	r2,r2,2564
    77c4:	10c01317 	ldw	r3,76(r2)
    77c8:	e0bffb17 	ldw	r2,-20(fp)
    77cc:	1885883a 	add	r2,r3,r2
    77d0:	1007883a 	mov	r3,r2
    77d4:	d0a72517 	ldw	r2,-25452(gp)
    77d8:	100b883a 	mov	r5,r2
    77dc:	1809883a 	mov	r4,r3
    77e0:	00052c40 	call	52c4 <Read_Sector_Data>
    77e4:	10002626 	beq	r2,zero,7880 <find_first_empty_record_in_root_directory+0x110>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
    77e8:	e03ffc15 	stw	zero,-16(fp)
    77ec:	00001a06 	br	7858 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
    77f0:	e0bffc17 	ldw	r2,-16(fp)
    77f4:	1004917a 	slli	r2,r2,5
    77f8:	1007883a 	mov	r3,r2
    77fc:	d0a72717 	ldw	r2,-25444(gp)
    7800:	10800a17 	ldw	r2,40(r2)
    7804:	1885883a 	add	r2,r3,r2
    7808:	10800023 	ldbuio	r2,0(r2)
    780c:	10803fcc 	andi	r2,r2,255
    7810:	10803fcc 	andi	r2,r2,255
    7814:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
    7818:	e0bfff0b 	ldhu	r2,-4(fp)
    781c:	10803960 	cmpeqi	r2,r2,229
    7820:	1000021e 	bne	r2,zero,782c <find_first_empty_record_in_root_directory+0xbc>
    7824:	e0bfff0b 	ldhu	r2,-4(fp)
    7828:	1000081e 	bne	r2,zero,784c <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
    782c:	e0bffb17 	ldw	r2,-20(fp)
    7830:	1006913a 	slli	r3,r2,4
    7834:	e0bffc17 	ldw	r2,-16(fp)
    7838:	1885883a 	add	r2,r3,r2
    783c:	1004943a 	slli	r2,r2,16
    7840:	e0bffe15 	stw	r2,-8(fp)
                    return result;
    7844:	e0bffe17 	ldw	r2,-8(fp)
    7848:	00000f06 	br	7888 <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
    784c:	e0bffc17 	ldw	r2,-16(fp)
    7850:	10800044 	addi	r2,r2,1
    7854:	e0bffc15 	stw	r2,-16(fp)
    7858:	e0bffc17 	ldw	r2,-16(fp)
    785c:	10800410 	cmplti	r2,r2,16
    7860:	103fe31e 	bne	r2,zero,77f0 <__alt_data_end+0xf80077f0>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    7864:	e0bffb17 	ldw	r2,-20(fp)
    7868:	10800044 	addi	r2,r2,1
    786c:	e0bffb15 	stw	r2,-20(fp)
    7870:	e0fffb17 	ldw	r3,-20(fp)
    7874:	e0bffd17 	ldw	r2,-12(fp)
    7878:	18bfd016 	blt	r3,r2,77bc <__alt_data_end+0xf80077bc>
    787c:	00000106 	br	7884 <find_first_empty_record_in_root_directory+0x114>
                }
            }
        }
        else
        {
            break;
    7880:	0001883a 	nop
        }
    }
    return result;
    7884:	e0bffe17 	ldw	r2,-8(fp)
}
    7888:	e037883a 	mov	sp,fp
    788c:	dfc00117 	ldw	ra,4(sp)
    7890:	df000017 	ldw	fp,0(sp)
    7894:	dec00204 	addi	sp,sp,8
    7898:	f800283a 	ret

0000789c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
    789c:	defffa04 	addi	sp,sp,-24
    78a0:	df000515 	stw	fp,20(sp)
    78a4:	df000504 	addi	fp,sp,20
    78a8:	e13ffd15 	stw	r4,-12(fp)
    78ac:	e17ffe15 	stw	r5,-8(fp)
    78b0:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
    78b4:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
    78b8:	e03ffb15 	stw	zero,-20(fp)
    78bc:	00002506 	br	7954 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
    78c0:	e0bffc17 	ldw	r2,-16(fp)
    78c4:	e0fffd17 	ldw	r3,-12(fp)
    78c8:	1885883a 	add	r2,r3,r2
    78cc:	10800003 	ldbu	r2,0(r2)
    78d0:	10803fcc 	andi	r2,r2,255
    78d4:	1080201c 	xori	r2,r2,128
    78d8:	10bfe004 	addi	r2,r2,-128
    78dc:	10800ba0 	cmpeqi	r2,r2,46
    78e0:	1000141e 	bne	r2,zero,7934 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
    78e4:	e0bffb17 	ldw	r2,-20(fp)
    78e8:	e0fffe17 	ldw	r3,-8(fp)
    78ec:	1885883a 	add	r2,r3,r2
    78f0:	e0fffc17 	ldw	r3,-16(fp)
    78f4:	e13ffd17 	ldw	r4,-12(fp)
    78f8:	20c7883a 	add	r3,r4,r3
    78fc:	18c00003 	ldbu	r3,0(r3)
    7900:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
    7904:	e0bffc17 	ldw	r2,-16(fp)
    7908:	e0fffd17 	ldw	r3,-12(fp)
    790c:	1885883a 	add	r2,r3,r2
    7910:	10800003 	ldbu	r2,0(r2)
    7914:	10803fcc 	andi	r2,r2,255
    7918:	1080201c 	xori	r2,r2,128
    791c:	10bfe004 	addi	r2,r2,-128
    7920:	10000926 	beq	r2,zero,7948 <convert_filename_to_name_extension+0xac>
    7924:	e0bffc17 	ldw	r2,-16(fp)
    7928:	10800044 	addi	r2,r2,1
    792c:	e0bffc15 	stw	r2,-16(fp)
    7930:	00000506 	br	7948 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
    7934:	e0bffb17 	ldw	r2,-20(fp)
    7938:	e0fffe17 	ldw	r3,-8(fp)
    793c:	1885883a 	add	r2,r3,r2
    7940:	00c00804 	movi	r3,32
    7944:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
    7948:	e0bffb17 	ldw	r2,-20(fp)
    794c:	10800044 	addi	r2,r2,1
    7950:	e0bffb15 	stw	r2,-20(fp)
    7954:	e0bffb17 	ldw	r2,-20(fp)
    7958:	10800210 	cmplti	r2,r2,8
    795c:	103fd81e 	bne	r2,zero,78c0 <__alt_data_end+0xf80078c0>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    7960:	e0bffc17 	ldw	r2,-16(fp)
    7964:	e0fffd17 	ldw	r3,-12(fp)
    7968:	1885883a 	add	r2,r3,r2
    796c:	10800003 	ldbu	r2,0(r2)
    7970:	10803fcc 	andi	r2,r2,255
    7974:	1080201c 	xori	r2,r2,128
    7978:	10bfe004 	addi	r2,r2,-128
    797c:	10800b98 	cmpnei	r2,r2,46
    7980:	1000031e 	bne	r2,zero,7990 <convert_filename_to_name_extension+0xf4>
    7984:	e0bffc17 	ldw	r2,-16(fp)
    7988:	10800044 	addi	r2,r2,1
    798c:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
    7990:	e03ffb15 	stw	zero,-20(fp)
    7994:	00001c06 	br	7a08 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
    7998:	e0bffc17 	ldw	r2,-16(fp)
    799c:	e0fffd17 	ldw	r3,-12(fp)
    79a0:	1885883a 	add	r2,r3,r2
    79a4:	10800003 	ldbu	r2,0(r2)
    79a8:	10803fcc 	andi	r2,r2,255
    79ac:	1080201c 	xori	r2,r2,128
    79b0:	10bfe004 	addi	r2,r2,-128
    79b4:	10000c26 	beq	r2,zero,79e8 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
    79b8:	e0bffb17 	ldw	r2,-20(fp)
    79bc:	e0ffff17 	ldw	r3,-4(fp)
    79c0:	1885883a 	add	r2,r3,r2
    79c4:	e0fffc17 	ldw	r3,-16(fp)
    79c8:	e13ffd17 	ldw	r4,-12(fp)
    79cc:	20c7883a 	add	r3,r4,r3
    79d0:	18c00003 	ldbu	r3,0(r3)
    79d4:	10c00005 	stb	r3,0(r2)
            local++;
    79d8:	e0bffc17 	ldw	r2,-16(fp)
    79dc:	10800044 	addi	r2,r2,1
    79e0:	e0bffc15 	stw	r2,-16(fp)
    79e4:	00000506 	br	79fc <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
    79e8:	e0bffb17 	ldw	r2,-20(fp)
    79ec:	e0ffff17 	ldw	r3,-4(fp)
    79f0:	1885883a 	add	r2,r3,r2
    79f4:	00c00804 	movi	r3,32
    79f8:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
    79fc:	e0bffb17 	ldw	r2,-20(fp)
    7a00:	10800044 	addi	r2,r2,1
    7a04:	e0bffb15 	stw	r2,-20(fp)
    7a08:	e0bffb17 	ldw	r2,-20(fp)
    7a0c:	108000d0 	cmplti	r2,r2,3
    7a10:	103fe11e 	bne	r2,zero,7998 <__alt_data_end+0xf8007998>
        {
            extension[counter] = ' ';
        }
    }

}
    7a14:	0001883a 	nop
    7a18:	e037883a 	mov	sp,fp
    7a1c:	df000017 	ldw	fp,0(sp)
    7a20:	dec00104 	addi	sp,sp,4
    7a24:	f800283a 	ret

00007a28 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
    7a28:	defff504 	addi	sp,sp,-44
    7a2c:	dfc00a15 	stw	ra,40(sp)
    7a30:	df000915 	stw	fp,36(sp)
    7a34:	df000904 	addi	fp,sp,36
    7a38:	e13ffd15 	stw	r4,-12(fp)
    7a3c:	e17ffe15 	stw	r5,-8(fp)
    7a40:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
    7a44:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
    7a48:	e0bffc04 	addi	r2,fp,-16
    7a4c:	1009883a 	mov	r4,r2
    7a50:	00073780 	call	7378 <find_first_empty_cluster>
    7a54:	1000a026 	beq	r2,zero,7cd8 <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
    7a58:	e0bfff17 	ldw	r2,-4(fp)
    7a5c:	10800a17 	ldw	r2,40(r2)
    7a60:	1000031e 	bne	r2,zero,7a70 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
    7a64:	00077700 	call	7770 <find_first_empty_record_in_root_directory>
    7a68:	e0bff815 	stw	r2,-32(fp)
    7a6c:	00000606 	br	7a88 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
    7a70:	e0bfff17 	ldw	r2,-4(fp)
    7a74:	1080058b 	ldhu	r2,22(r2)
    7a78:	10bfffcc 	andi	r2,r2,65535
    7a7c:	1009883a 	mov	r4,r2
    7a80:	00075240 	call	7524 <find_first_empty_record_in_a_subdirectory>
    7a84:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
    7a88:	e0bff817 	ldw	r2,-32(fp)
    7a8c:	10009216 	blt	r2,zero,7cd8 <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
    7a90:	e13ffd17 	ldw	r4,-12(fp)
    7a94:	00066780 	call	6678 <get_dir_divider_location>
    7a98:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
    7a9c:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
    7aa0:	00000b06 	br	7ad0 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
    7aa4:	e0fffa17 	ldw	r3,-24(fp)
    7aa8:	e0bff917 	ldw	r2,-28(fp)
    7aac:	1885883a 	add	r2,r3,r2
    7ab0:	10800044 	addi	r2,r2,1
    7ab4:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
    7ab8:	e0bffa17 	ldw	r2,-24(fp)
    7abc:	e0fffd17 	ldw	r3,-12(fp)
    7ac0:	1885883a 	add	r2,r3,r2
    7ac4:	1009883a 	mov	r4,r2
    7ac8:	00066780 	call	6678 <get_dir_divider_location>
    7acc:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
    7ad0:	e0bff917 	ldw	r2,-28(fp)
    7ad4:	00bff316 	blt	zero,r2,7aa4 <__alt_data_end+0xf8007aa4>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
    7ad8:	e0bffa17 	ldw	r2,-24(fp)
    7adc:	e0fffd17 	ldw	r3,-12(fp)
    7ae0:	1887883a 	add	r3,r3,r2
    7ae4:	e13ffe17 	ldw	r4,-8(fp)
    7ae8:	e0bffe17 	ldw	r2,-8(fp)
    7aec:	10800204 	addi	r2,r2,8
    7af0:	100d883a 	mov	r6,r2
    7af4:	200b883a 	mov	r5,r4
    7af8:	1809883a 	mov	r4,r3
    7afc:	000789c0 	call	789c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
    7b00:	e0bffe17 	ldw	r2,-8(fp)
    7b04:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
    7b08:	e0bffe17 	ldw	r2,-8(fp)
    7b0c:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
    7b10:	e0bffe17 	ldw	r2,-8(fp)
    7b14:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
    7b18:	e0bffe17 	ldw	r2,-8(fp)
    7b1c:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
    7b20:	e0bffe17 	ldw	r2,-8(fp)
    7b24:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
    7b28:	e0bffe17 	ldw	r2,-8(fp)
    7b2c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
    7b30:	e0bffc17 	ldw	r2,-16(fp)
    7b34:	1007883a 	mov	r3,r2
    7b38:	e0bffe17 	ldw	r2,-8(fp)
    7b3c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
    7b40:	e0bffe17 	ldw	r2,-8(fp)
    7b44:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
    7b48:	e0fffc17 	ldw	r3,-16(fp)
    7b4c:	e0bffe17 	ldw	r2,-8(fp)
    7b50:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
    7b54:	e0bffe17 	ldw	r2,-8(fp)
    7b58:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
    7b5c:	e0bffe17 	ldw	r2,-8(fp)
    7b60:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
    7b64:	e0bff817 	ldw	r2,-32(fp)
    7b68:	10ffffcc 	andi	r3,r2,65535
    7b6c:	e0bffe17 	ldw	r2,-8(fp)
    7b70:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
    7b74:	e0bff817 	ldw	r2,-32(fp)
    7b78:	1004d43a 	srli	r2,r2,16
    7b7c:	1000010e 	bge	r2,zero,7b84 <create_file+0x15c>
    7b80:	108003c4 	addi	r2,r2,15
    7b84:	1005d13a 	srai	r2,r2,4
    7b88:	1007883a 	mov	r3,r2
    7b8c:	e0bffe17 	ldw	r2,-8(fp)
    7b90:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
    7b94:	e0bff817 	ldw	r2,-32(fp)
    7b98:	1004d43a 	srli	r2,r2,16
    7b9c:	1007883a 	mov	r3,r2
    7ba0:	00a00034 	movhi	r2,32768
    7ba4:	108003c4 	addi	r2,r2,15
    7ba8:	1884703a 	and	r2,r3,r2
    7bac:	1000040e 	bge	r2,zero,7bc0 <create_file+0x198>
    7bb0:	10bfffc4 	addi	r2,r2,-1
    7bb4:	00fffc04 	movi	r3,-16
    7bb8:	10c4b03a 	or	r2,r2,r3
    7bbc:	10800044 	addi	r2,r2,1
    7bc0:	1004917a 	slli	r2,r2,5
    7bc4:	1007883a 	mov	r3,r2
    7bc8:	e0bffe17 	ldw	r2,-8(fp)
    7bcc:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
    7bd0:	e0bfff17 	ldw	r2,-4(fp)
    7bd4:	1080058b 	ldhu	r2,22(r2)
    7bd8:	10ffffcc 	andi	r3,r2,65535
    7bdc:	e0bffe17 	ldw	r2,-8(fp)
    7be0:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
    7be4:	e0bffe17 	ldw	r2,-8(fp)
    7be8:	00c00044 	movi	r3,1
    7bec:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
    7bf0:	e0bffe17 	ldw	r2,-8(fp)
    7bf4:	00c00044 	movi	r3,1
    7bf8:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
    7bfc:	e0bffe17 	ldw	r2,-8(fp)
    7c00:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
    7c04:	1000071e 	bne	r2,zero,7c24 <create_file+0x1fc>
    7c08:	00800074 	movhi	r2,1
    7c0c:	10828104 	addi	r2,r2,2564
    7c10:	10c01317 	ldw	r3,76(r2)
    7c14:	e0bffe17 	ldw	r2,-8(fp)
    7c18:	10800b17 	ldw	r2,44(r2)
    7c1c:	1885883a 	add	r2,r3,r2
    7c20:	00000f06 	br	7c60 <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
    7c24:	00800074 	movhi	r2,1
    7c28:	10828104 	addi	r2,r2,2564
    7c2c:	10c01417 	ldw	r3,80(r2)
    7c30:	e0bffe17 	ldw	r2,-8(fp)
    7c34:	10800a17 	ldw	r2,40(r2)
    7c38:	113fff84 	addi	r4,r2,-2
    7c3c:	00800074 	movhi	r2,1
    7c40:	10828104 	addi	r2,r2,2564
    7c44:	10800383 	ldbu	r2,14(r2)
    7c48:	10803fcc 	andi	r2,r2,255
    7c4c:	2085383a 	mul	r2,r4,r2
    7c50:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
    7c54:	e0bffe17 	ldw	r2,-8(fp)
    7c58:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
    7c5c:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
    7c60:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
    7c64:	e0bffb17 	ldw	r2,-20(fp)
    7c68:	d0e72517 	ldw	r3,-25452(gp)
    7c6c:	180b883a 	mov	r5,r3
    7c70:	1009883a 	mov	r4,r2
    7c74:	00052c40 	call	52c4 <Read_Sector_Data>
    7c78:	10001726 	beq	r2,zero,7cd8 <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
    7c7c:	e0bffe17 	ldw	r2,-8(fp)
    7c80:	10800c0b 	ldhu	r2,48(r2)
    7c84:	10bfffcc 	andi	r2,r2,65535
    7c88:	10a0001c 	xori	r2,r2,32768
    7c8c:	10a00004 	addi	r2,r2,-32768
    7c90:	e17ffe17 	ldw	r5,-8(fp)
    7c94:	1009883a 	mov	r4,r2
    7c98:	00059500 	call	5950 <Write_File_Record_At_Offset>
    7c9c:	10000e26 	beq	r2,zero,7cd8 <create_file+0x2b0>
                {
                    Save_Modified_Sector();
    7ca0:	00052780 	call	5278 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
    7ca4:	e0bffc17 	ldw	r2,-16(fp)
    7ca8:	01800044 	movi	r6,1
    7cac:	017fffc4 	movi	r5,-1
    7cb0:	1009883a 	mov	r4,r2
    7cb4:	00054500 	call	5450 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
    7cb8:	e0bffc17 	ldw	r2,-16(fp)
    7cbc:	000d883a 	mov	r6,zero
    7cc0:	017fffc4 	movi	r5,-1
    7cc4:	1009883a 	mov	r4,r2
    7cc8:	00054500 	call	5450 <mark_cluster>
    7ccc:	10000226 	beq	r2,zero,7cd8 <create_file+0x2b0>
                    {
                        result = true;
    7cd0:	00800044 	movi	r2,1
    7cd4:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
    7cd8:	e0bff717 	ldw	r2,-36(fp)
}
    7cdc:	e037883a 	mov	sp,fp
    7ce0:	dfc00117 	ldw	ra,4(sp)
    7ce4:	df000017 	ldw	fp,0(sp)
    7ce8:	dec00204 	addi	sp,sp,8
    7cec:	f800283a 	ret

00007cf0 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
    7cf0:	defffb04 	addi	sp,sp,-20
    7cf4:	df000415 	stw	fp,16(sp)
    7cf8:	df000404 	addi	fp,sp,16
    7cfc:	e13ffe15 	stw	r4,-8(fp)
    7d00:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
    7d04:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
    7d08:	e03ffc15 	stw	zero,-16(fp)
    7d0c:	00001506 	br	7d64 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
    7d10:	e0fffe17 	ldw	r3,-8(fp)
    7d14:	e0bffc17 	ldw	r2,-16(fp)
    7d18:	1885883a 	add	r2,r3,r2
    7d1c:	10800003 	ldbu	r2,0(r2)
    7d20:	10803fcc 	andi	r2,r2,255
    7d24:	10800820 	cmpeqi	r2,r2,32
    7d28:	10000b1e 	bne	r2,zero,7d58 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
    7d2c:	e0bffd17 	ldw	r2,-12(fp)
    7d30:	e0ffff17 	ldw	r3,-4(fp)
    7d34:	1885883a 	add	r2,r3,r2
    7d38:	e13ffe17 	ldw	r4,-8(fp)
    7d3c:	e0fffc17 	ldw	r3,-16(fp)
    7d40:	20c7883a 	add	r3,r4,r3
    7d44:	18c00003 	ldbu	r3,0(r3)
    7d48:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
    7d4c:	e0bffd17 	ldw	r2,-12(fp)
    7d50:	10800044 	addi	r2,r2,1
    7d54:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
    7d58:	e0bffc17 	ldw	r2,-16(fp)
    7d5c:	10800044 	addi	r2,r2,1
    7d60:	e0bffc15 	stw	r2,-16(fp)
    7d64:	e0bffc17 	ldw	r2,-16(fp)
    7d68:	10800210 	cmplti	r2,r2,8
    7d6c:	103fe81e 	bne	r2,zero,7d10 <__alt_data_end+0xf8007d10>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
    7d70:	e0bffe17 	ldw	r2,-8(fp)
    7d74:	10800203 	ldbu	r2,8(r2)
    7d78:	10803fcc 	andi	r2,r2,255
    7d7c:	10800820 	cmpeqi	r2,r2,32
    7d80:	1000241e 	bne	r2,zero,7e14 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
    7d84:	e0bffd17 	ldw	r2,-12(fp)
    7d88:	e0ffff17 	ldw	r3,-4(fp)
    7d8c:	1885883a 	add	r2,r3,r2
    7d90:	00c00b84 	movi	r3,46
    7d94:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
    7d98:	e0bffd17 	ldw	r2,-12(fp)
    7d9c:	10800044 	addi	r2,r2,1
    7da0:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
    7da4:	e03ffc15 	stw	zero,-16(fp)
    7da8:	00001706 	br	7e08 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
    7dac:	e0fffe17 	ldw	r3,-8(fp)
    7db0:	e0bffc17 	ldw	r2,-16(fp)
    7db4:	1885883a 	add	r2,r3,r2
    7db8:	10800204 	addi	r2,r2,8
    7dbc:	10800003 	ldbu	r2,0(r2)
    7dc0:	10803fcc 	andi	r2,r2,255
    7dc4:	10800820 	cmpeqi	r2,r2,32
    7dc8:	10000c1e 	bne	r2,zero,7dfc <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
    7dcc:	e0bffd17 	ldw	r2,-12(fp)
    7dd0:	e0ffff17 	ldw	r3,-4(fp)
    7dd4:	1885883a 	add	r2,r3,r2
    7dd8:	e13ffe17 	ldw	r4,-8(fp)
    7ddc:	e0fffc17 	ldw	r3,-16(fp)
    7de0:	20c7883a 	add	r3,r4,r3
    7de4:	18c00204 	addi	r3,r3,8
    7de8:	18c00003 	ldbu	r3,0(r3)
    7dec:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
    7df0:	e0bffd17 	ldw	r2,-12(fp)
    7df4:	10800044 	addi	r2,r2,1
    7df8:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
    7dfc:	e0bffc17 	ldw	r2,-16(fp)
    7e00:	10800044 	addi	r2,r2,1
    7e04:	e0bffc15 	stw	r2,-16(fp)
    7e08:	e0bffc17 	ldw	r2,-16(fp)
    7e0c:	108000d0 	cmplti	r2,r2,3
    7e10:	103fe61e 	bne	r2,zero,7dac <__alt_data_end+0xf8007dac>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
    7e14:	e0bffd17 	ldw	r2,-12(fp)
    7e18:	e0ffff17 	ldw	r3,-4(fp)
    7e1c:	1885883a 	add	r2,r3,r2
    7e20:	10000005 	stb	zero,0(r2)
}
    7e24:	0001883a 	nop
    7e28:	e037883a 	mov	sp,fp
    7e2c:	df000017 	ldw	fp,0(sp)
    7e30:	dec00104 	addi	sp,sp,4
    7e34:	f800283a 	ret

00007e38 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
    7e38:	defffc04 	addi	sp,sp,-16
    7e3c:	dfc00315 	stw	ra,12(sp)
    7e40:	df000215 	stw	fp,8(sp)
    7e44:	df000204 	addi	fp,sp,8
    7e48:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
    7e4c:	d1600d04 	addi	r5,gp,-32716
    7e50:	e13fff17 	ldw	r4,-4(fp)
    7e54:	000bbc00 	call	bbc0 <alt_find_dev>
    7e58:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
    7e5c:	e0bffe17 	ldw	r2,-8(fp)
    7e60:	10001e26 	beq	r2,zero,7edc <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
    7e64:	e0bffe17 	ldw	r2,-8(fp)
    7e68:	10800a17 	ldw	r2,40(r2)
    7e6c:	10808d04 	addi	r2,r2,564
    7e70:	d0a71f15 	stw	r2,-25476(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
    7e74:	e0bffe17 	ldw	r2,-8(fp)
    7e78:	10800a17 	ldw	r2,40(r2)
    7e7c:	10808904 	addi	r2,r2,548
    7e80:	d0a72015 	stw	r2,-25472(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
    7e84:	e0bffe17 	ldw	r2,-8(fp)
    7e88:	10800a17 	ldw	r2,40(r2)
    7e8c:	10808404 	addi	r2,r2,528
    7e90:	d0a72115 	stw	r2,-25468(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
    7e94:	e0bffe17 	ldw	r2,-8(fp)
    7e98:	10800a17 	ldw	r2,40(r2)
    7e9c:	10808c04 	addi	r2,r2,560
    7ea0:	d0a72215 	stw	r2,-25464(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
    7ea4:	e0bffe17 	ldw	r2,-8(fp)
    7ea8:	10800a17 	ldw	r2,40(r2)
    7eac:	10808b04 	addi	r2,r2,556
    7eb0:	d0a72315 	stw	r2,-25460(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
    7eb4:	e0bffe17 	ldw	r2,-8(fp)
    7eb8:	10800a17 	ldw	r2,40(r2)
    7ebc:	d0a72415 	stw	r2,-25456(gp)
		device_pointer = dev;
    7ec0:	e0bffe17 	ldw	r2,-8(fp)
    7ec4:	d0a72715 	stw	r2,-25444(gp)
		initialized = false;
    7ec8:	d0271d15 	stw	zero,-25484(gp)
		is_sd_card_formated_as_FAT16 = false;
    7ecc:	d0271e15 	stw	zero,-25480(gp)
		search_data.valid = false;
    7ed0:	00800074 	movhi	r2,1
    7ed4:	10827c04 	addi	r2,r2,2544
    7ed8:	10000415 	stw	zero,16(r2)
	}
	return dev;
    7edc:	e0bffe17 	ldw	r2,-8(fp)
}
    7ee0:	e037883a 	mov	sp,fp
    7ee4:	dfc00117 	ldw	ra,4(sp)
    7ee8:	df000017 	ldw	fp,0(sp)
    7eec:	dec00204 	addi	sp,sp,8
    7ef0:	f800283a 	ret

00007ef4 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    7ef4:	defffd04 	addi	sp,sp,-12
    7ef8:	df000215 	stw	fp,8(sp)
    7efc:	df000204 	addi	fp,sp,8
    bool result = false;
    7f00:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
    7f04:	d0a72717 	ldw	r2,-25444(gp)
    7f08:	10000826 	beq	r2,zero,7f2c <alt_up_sd_card_is_Present+0x38>
    7f0c:	d0a71f17 	ldw	r2,-25476(gp)
    7f10:	1080002b 	ldhuio	r2,0(r2)
    7f14:	10bfffcc 	andi	r2,r2,65535
    7f18:	1080008c 	andi	r2,r2,2
    7f1c:	10000326 	beq	r2,zero,7f2c <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
    7f20:	00800044 	movi	r2,1
    7f24:	e0bffe15 	stw	r2,-8(fp)
    7f28:	00001e06 	br	7fa4 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
    7f2c:	d0a71d17 	ldw	r2,-25484(gp)
    7f30:	10800058 	cmpnei	r2,r2,1
    7f34:	10001b1e 	bne	r2,zero,7fa4 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
    7f38:	d0271d15 	stw	zero,-25484(gp)
		search_data.valid = false;
    7f3c:	00800074 	movhi	r2,1
    7f40:	10827c04 	addi	r2,r2,2544
    7f44:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
    7f48:	d0271e15 	stw	zero,-25480(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
    7f4c:	e03fff15 	stw	zero,-4(fp)
    7f50:	00001106 	br	7f98 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
    7f54:	00800074 	movhi	r2,1
    7f58:	10829604 	addi	r2,r2,2648
    7f5c:	e0ffff17 	ldw	r3,-4(fp)
    7f60:	180691ba 	slli	r3,r3,6
    7f64:	10c5883a 	add	r2,r2,r3
    7f68:	10800f04 	addi	r2,r2,60
    7f6c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
    7f70:	00800074 	movhi	r2,1
    7f74:	10829604 	addi	r2,r2,2648
    7f78:	e0ffff17 	ldw	r3,-4(fp)
    7f7c:	180691ba 	slli	r3,r3,6
    7f80:	10c5883a 	add	r2,r2,r3
    7f84:	10800e04 	addi	r2,r2,56
    7f88:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
    7f8c:	e0bfff17 	ldw	r2,-4(fp)
    7f90:	10800044 	addi	r2,r2,1
    7f94:	e0bfff15 	stw	r2,-4(fp)
    7f98:	e0bfff17 	ldw	r2,-4(fp)
    7f9c:	10800510 	cmplti	r2,r2,20
    7fa0:	103fec1e 	bne	r2,zero,7f54 <__alt_data_end+0xf8007f54>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
    7fa4:	e0bffe17 	ldw	r2,-8(fp)
}
    7fa8:	e037883a 	mov	sp,fp
    7fac:	df000017 	ldw	fp,0(sp)
    7fb0:	dec00104 	addi	sp,sp,4
    7fb4:	f800283a 	ret

00007fb8 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
    7fb8:	defffd04 	addi	sp,sp,-12
    7fbc:	dfc00215 	stw	ra,8(sp)
    7fc0:	df000115 	stw	fp,4(sp)
    7fc4:	df000104 	addi	fp,sp,4
	bool result = false;
    7fc8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
    7fcc:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    7fd0:	10000c26 	beq	r2,zero,8004 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
    7fd4:	d0a71d17 	ldw	r2,-25484(gp)
    7fd8:	1000071e 	bne	r2,zero,7ff8 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
    7fdc:	000625c0 	call	625c <Look_for_FAT16>
    7fe0:	d0a71e15 	stw	r2,-25480(gp)
			initialized = is_sd_card_formated_as_FAT16;
    7fe4:	d0a71e17 	ldw	r2,-25480(gp)
    7fe8:	d0a71d15 	stw	r2,-25484(gp)
			search_data.valid = false;
    7fec:	00800074 	movhi	r2,1
    7ff0:	10827c04 	addi	r2,r2,2544
    7ff4:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
    7ff8:	d0a71e17 	ldw	r2,-25480(gp)
    7ffc:	e0bfff15 	stw	r2,-4(fp)
    8000:	00000206 	br	800c <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
    8004:	d0271d15 	stw	zero,-25484(gp)
		is_sd_card_formated_as_FAT16 = false;
    8008:	d0271e15 	stw	zero,-25480(gp)
	}

	return result;
    800c:	e0bfff17 	ldw	r2,-4(fp)
}
    8010:	e037883a 	mov	sp,fp
    8014:	dfc00117 	ldw	ra,4(sp)
    8018:	df000017 	ldw	fp,0(sp)
    801c:	dec00204 	addi	sp,sp,8
    8020:	f800283a 	ret

00008024 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
    8024:	deffea04 	addi	sp,sp,-88
    8028:	dfc01515 	stw	ra,84(sp)
    802c:	df001415 	stw	fp,80(sp)
    8030:	df001404 	addi	fp,sp,80
    8034:	e13ffe15 	stw	r4,-8(fp)
    8038:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
    803c:	00800084 	movi	r2,2
    8040:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    8044:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    8048:	10002426 	beq	r2,zero,80dc <alt_up_sd_card_find_first+0xb8>
    804c:	d0a71e17 	ldw	r2,-25480(gp)
    8050:	10002226 	beq	r2,zero,80dc <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
    8054:	e0ffee04 	addi	r3,fp,-72
    8058:	e0bfed04 	addi	r2,fp,-76
    805c:	180d883a 	mov	r6,r3
    8060:	100b883a 	mov	r5,r2
    8064:	e13ffe17 	ldw	r4,-8(fp)
    8068:	00069cc0 	call	69cc <get_home_directory_cluster_for_file>
    806c:	10001926 	beq	r2,zero,80d4 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
    8070:	e0bfed17 	ldw	r2,-76(fp)
    8074:	1007883a 	mov	r3,r2
    8078:	00800074 	movhi	r2,1
    807c:	10827c04 	addi	r2,r2,2544
    8080:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
    8084:	e0bfed17 	ldw	r2,-76(fp)
    8088:	1007883a 	mov	r3,r2
    808c:	00800074 	movhi	r2,1
    8090:	10827c04 	addi	r2,r2,2544
    8094:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
    8098:	00800074 	movhi	r2,1
    809c:	10827c04 	addi	r2,r2,2544
    80a0:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
    80a4:	00800074 	movhi	r2,1
    80a8:	10827c04 	addi	r2,r2,2544
    80ac:	00ffffc4 	movi	r3,-1
    80b0:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
    80b4:	00800074 	movhi	r2,1
    80b8:	10827c04 	addi	r2,r2,2544
    80bc:	00c00044 	movi	r3,1
    80c0:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
    80c4:	e13fff17 	ldw	r4,-4(fp)
    80c8:	00080f40 	call	80f4 <alt_up_sd_card_find_next>
    80cc:	e0bfec0d 	sth	r2,-80(fp)
    80d0:	00000206 	br	80dc <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
    80d4:	00800044 	movi	r2,1
    80d8:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
    80dc:	e0bfec0b 	ldhu	r2,-80(fp)
}
    80e0:	e037883a 	mov	sp,fp
    80e4:	dfc00117 	ldw	ra,4(sp)
    80e8:	df000017 	ldw	fp,0(sp)
    80ec:	dec00204 	addi	sp,sp,8
    80f0:	f800283a 	ret

000080f4 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
    80f4:	deffe404 	addi	sp,sp,-112
    80f8:	dfc01b15 	stw	ra,108(sp)
    80fc:	df001a15 	stw	fp,104(sp)
    8100:	df001a04 	addi	fp,sp,104
    8104:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
    8108:	00800084 	movi	r2,2
    810c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    8110:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    8114:	1000df26 	beq	r2,zero,8494 <alt_up_sd_card_find_next+0x3a0>
    8118:	d0a71e17 	ldw	r2,-25480(gp)
    811c:	1000dd26 	beq	r2,zero,8494 <alt_up_sd_card_find_next+0x3a0>
	{
		if (search_data.valid)
    8120:	00800074 	movhi	r2,1
    8124:	10827c04 	addi	r2,r2,2544
    8128:	10800417 	ldw	r2,16(r2)
    812c:	1000d726 	beq	r2,zero,848c <alt_up_sd_card_find_next+0x398>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
    8130:	00800074 	movhi	r2,1
    8134:	10827c04 	addi	r2,r2,2544
    8138:	10800117 	ldw	r2,4(r2)
    813c:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
    8140:	e0bfe717 	ldw	r2,-100(fp)
    8144:	1000561e 	bne	r2,zero,82a0 <alt_up_sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    8148:	00800074 	movhi	r2,1
    814c:	10828104 	addi	r2,r2,2564
    8150:	1080050b 	ldhu	r2,20(r2)
    8154:	10bfffcc 	andi	r2,r2,65535
    8158:	1006917a 	slli	r3,r2,5
    815c:	00800074 	movhi	r2,1
    8160:	10828104 	addi	r2,r2,2564
    8164:	1080030b 	ldhu	r2,12(r2)
    8168:	10bfffcc 	andi	r2,r2,65535
    816c:	1885283a 	div	r2,r3,r2
    8170:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
    8174:	00800074 	movhi	r2,1
    8178:	10827c04 	addi	r2,r2,2544
    817c:	10800217 	ldw	r2,8(r2)
    8180:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
    8184:	00800074 	movhi	r2,1
    8188:	10827c04 	addi	r2,r2,2544
    818c:	1080030b 	ldhu	r2,12(r2)
    8190:	10bfffcc 	andi	r2,r2,65535
    8194:	10a0001c 	xori	r2,r2,32768
    8198:	10a00004 	addi	r2,r2,-32768
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
    81a4:	00003606 	br	8280 <alt_up_sd_card_find_next+0x18c>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
    81a8:	00800074 	movhi	r2,1
    81ac:	10828104 	addi	r2,r2,2564
    81b0:	10c01317 	ldw	r3,76(r2)
    81b4:	e0bfe817 	ldw	r2,-96(fp)
    81b8:	1885883a 	add	r2,r3,r2
    81bc:	1007883a 	mov	r3,r2
    81c0:	d0a72517 	ldw	r2,-25452(gp)
    81c4:	100b883a 	mov	r5,r2
    81c8:	1809883a 	mov	r4,r3
    81cc:	00052c40 	call	52c4 <Read_Sector_Data>
    81d0:	10002f26 	beq	r2,zero,8290 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
    81d4:	00002306 	br	8264 <alt_up_sd_card_find_next+0x170>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
    81d8:	e0bfe917 	ldw	r2,-92(fp)
    81dc:	1004917a 	slli	r2,r2,5
    81e0:	e13fe817 	ldw	r4,-96(fp)
    81e4:	e0ffef04 	addi	r3,fp,-68
    81e8:	200f883a 	mov	r7,r4
    81ec:	000d883a 	mov	r6,zero
    81f0:	180b883a 	mov	r5,r3
    81f4:	1009883a 	mov	r4,r2
    81f8:	00056d40 	call	56d4 <Read_File_Record_At_Offset>
    81fc:	10001626 	beq	r2,zero,8258 <alt_up_sd_card_find_next+0x164>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
    8200:	e0bfef03 	ldbu	r2,-68(fp)
    8204:	10803fcc 	andi	r2,r2,255
    8208:	10001326 	beq	r2,zero,8258 <alt_up_sd_card_find_next+0x164>
    820c:	e0bfef03 	ldbu	r2,-68(fp)
    8210:	10803fcc 	andi	r2,r2,255
    8214:	10803960 	cmpeqi	r2,r2,229
    8218:	10000f1e 	bne	r2,zero,8258 <alt_up_sd_card_find_next+0x164>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
    821c:	e0bfe917 	ldw	r2,-92(fp)
    8220:	1007883a 	mov	r3,r2
    8224:	00800074 	movhi	r2,1
    8228:	10827c04 	addi	r2,r2,2544
    822c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
    8230:	e0ffe817 	ldw	r3,-96(fp)
    8234:	00800074 	movhi	r2,1
    8238:	10827c04 	addi	r2,r2,2544
    823c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
    8240:	e0bfef04 	addi	r2,fp,-68
    8244:	e17fff17 	ldw	r5,-4(fp)
    8248:	1009883a 	mov	r4,r2
    824c:	0007cf00 	call	7cf0 <copy_file_record_name_to_string>
									return 0;
    8250:	0005883a 	mov	r2,zero
    8254:	00009006 	br	8498 <alt_up_sd_card_find_next+0x3a4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
    8258:	e0bfe917 	ldw	r2,-92(fp)
    825c:	10800044 	addi	r2,r2,1
    8260:	e0bfe915 	stw	r2,-92(fp)
    8264:	e0bfe917 	ldw	r2,-92(fp)
    8268:	10800410 	cmplti	r2,r2,16
    826c:	103fda1e 	bne	r2,zero,81d8 <__alt_data_end+0xf80081d8>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
    8270:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
    8274:	e0bfe817 	ldw	r2,-96(fp)
    8278:	10800044 	addi	r2,r2,1
    827c:	e0bfe815 	stw	r2,-96(fp)
    8280:	e0ffe817 	ldw	r3,-96(fp)
    8284:	e0bfec17 	ldw	r2,-80(fp)
    8288:	18bfc716 	blt	r3,r2,81a8 <__alt_data_end+0xf80081a8>
    828c:	00000106 	br	8294 <alt_up_sd_card_find_next+0x1a0>
						}
						file_counter = 0;
					}
					else
					{
						break;
    8290:	0001883a 	nop
					}
				}
				result = -1;
    8294:	00bfffc4 	movi	r2,-1
    8298:	e0bfe60d 	sth	r2,-104(fp)
    829c:	00007d06 	br	8494 <alt_up_sd_card_find_next+0x3a0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
    82a0:	00800074 	movhi	r2,1
    82a4:	10827c04 	addi	r2,r2,2544
    82a8:	1080030b 	ldhu	r2,12(r2)
    82ac:	10bfffcc 	andi	r2,r2,65535
    82b0:	10a0001c 	xori	r2,r2,32768
    82b4:	10a00004 	addi	r2,r2,-32768
    82b8:	10800044 	addi	r2,r2,1
    82bc:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    82c0:	e0bfe717 	ldw	r2,-100(fp)
    82c4:	10ffff84 	addi	r3,r2,-2
    82c8:	00800074 	movhi	r2,1
    82cc:	10828104 	addi	r2,r2,2564
    82d0:	10800383 	ldbu	r2,14(r2)
    82d4:	10803fcc 	andi	r2,r2,255
    82d8:	1885383a 	mul	r2,r3,r2
    82dc:	1007883a 	mov	r3,r2
    82e0:	00800074 	movhi	r2,1
    82e4:	10828104 	addi	r2,r2,2564
    82e8:	10801417 	ldw	r2,80(r2)
    82ec:	1885883a 	add	r2,r3,r2
    82f0:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
    82f4:	00800074 	movhi	r2,1
    82f8:	10827c04 	addi	r2,r2,2544
    82fc:	10800217 	ldw	r2,8(r2)
    8300:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    8304:	00003806 	br	83e8 <alt_up_sd_card_find_next+0x2f4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    8308:	e0ffeb17 	ldw	r3,-84(fp)
    830c:	e0bfed17 	ldw	r2,-76(fp)
    8310:	1885883a 	add	r2,r3,r2
    8314:	d0e72517 	ldw	r3,-25452(gp)
    8318:	180b883a 	mov	r5,r3
    831c:	1009883a 	mov	r4,r2
    8320:	00052c40 	call	52c4 <Read_Sector_Data>
    8324:	10003726 	beq	r2,zero,8404 <alt_up_sd_card_find_next+0x310>
						{        
							for (; file_counter < 16; file_counter++)
    8328:	00002806 	br	83cc <alt_up_sd_card_find_next+0x2d8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
    832c:	e0bfea17 	ldw	r2,-88(fp)
    8330:	1004917a 	slli	r2,r2,5
    8334:	e13fe717 	ldw	r4,-100(fp)
    8338:	e17feb17 	ldw	r5,-84(fp)
    833c:	e0ffef04 	addi	r3,fp,-68
    8340:	280f883a 	mov	r7,r5
    8344:	200d883a 	mov	r6,r4
    8348:	180b883a 	mov	r5,r3
    834c:	1009883a 	mov	r4,r2
    8350:	00056d40 	call	56d4 <Read_File_Record_At_Offset>
    8354:	10001a26 	beq	r2,zero,83c0 <alt_up_sd_card_find_next+0x2cc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
    8358:	e0bfef03 	ldbu	r2,-68(fp)
    835c:	10803fcc 	andi	r2,r2,255
    8360:	10001726 	beq	r2,zero,83c0 <alt_up_sd_card_find_next+0x2cc>
    8364:	e0bfef03 	ldbu	r2,-68(fp)
    8368:	10803fcc 	andi	r2,r2,255
    836c:	10803960 	cmpeqi	r2,r2,229
    8370:	1000131e 	bne	r2,zero,83c0 <alt_up_sd_card_find_next+0x2cc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
    8374:	e0ffe717 	ldw	r3,-100(fp)
    8378:	00800074 	movhi	r2,1
    837c:	10827c04 	addi	r2,r2,2544
    8380:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
    8384:	e0bfea17 	ldw	r2,-88(fp)
    8388:	1007883a 	mov	r3,r2
    838c:	00800074 	movhi	r2,1
    8390:	10827c04 	addi	r2,r2,2544
    8394:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
    8398:	e0ffeb17 	ldw	r3,-84(fp)
    839c:	00800074 	movhi	r2,1
    83a0:	10827c04 	addi	r2,r2,2544
    83a4:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
    83a8:	e0bfef04 	addi	r2,fp,-68
    83ac:	e17fff17 	ldw	r5,-4(fp)
    83b0:	1009883a 	mov	r4,r2
    83b4:	0007cf00 	call	7cf0 <copy_file_record_name_to_string>
										return 0;
    83b8:	0005883a 	mov	r2,zero
    83bc:	00003606 	br	8498 <alt_up_sd_card_find_next+0x3a4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
    83c0:	e0bfea17 	ldw	r2,-88(fp)
    83c4:	10800044 	addi	r2,r2,1
    83c8:	e0bfea15 	stw	r2,-88(fp)
    83cc:	e0bfea17 	ldw	r2,-88(fp)
    83d0:	10800410 	cmplti	r2,r2,16
    83d4:	103fd51e 	bne	r2,zero,832c <__alt_data_end+0xf800832c>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
    83d8:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    83dc:	e0bfeb17 	ldw	r2,-84(fp)
    83e0:	10800044 	addi	r2,r2,1
    83e4:	e0bfeb15 	stw	r2,-84(fp)
    83e8:	00800074 	movhi	r2,1
    83ec:	10828104 	addi	r2,r2,2564
    83f0:	10800383 	ldbu	r2,14(r2)
    83f4:	10803fcc 	andi	r2,r2,255
    83f8:	e0ffeb17 	ldw	r3,-84(fp)
    83fc:	18bfc216 	blt	r3,r2,8308 <__alt_data_end+0xf8008308>
    8400:	00000106 	br	8408 <alt_up_sd_card_find_next+0x314>
							}
							file_counter = 0;
						}
						else
						{
							break;
    8404:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
    8408:	00800074 	movhi	r2,1
    840c:	10828104 	addi	r2,r2,2564
    8410:	10800383 	ldbu	r2,14(r2)
    8414:	10803fcc 	andi	r2,r2,255
    8418:	e0ffeb17 	ldw	r3,-84(fp)
    841c:	18801716 	blt	r3,r2,847c <alt_up_sd_card_find_next+0x388>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
    8420:	e0bfe717 	ldw	r2,-100(fp)
    8424:	e0ffee04 	addi	r3,fp,-72
    8428:	180b883a 	mov	r5,r3
    842c:	1009883a 	mov	r4,r2
    8430:	000539c0 	call	539c <get_cluster_flag>
    8434:	10000f26 	beq	r2,zero,8474 <alt_up_sd_card_find_next+0x380>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
    8438:	e0bfee0b 	ldhu	r2,-72(fp)
    843c:	10bfffcc 	andi	r2,r2,65535
    8440:	10fffe0c 	andi	r3,r2,65528
    8444:	00bffe14 	movui	r2,65528
    8448:	1880051e 	bne	r3,r2,8460 <alt_up_sd_card_find_next+0x36c>
							{
								result = -1;
    844c:	00bfffc4 	movi	r2,-1
    8450:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
    8454:	00800074 	movhi	r2,1
    8458:	10827c04 	addi	r2,r2,2544
    845c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
    8460:	e0bfee0b 	ldhu	r2,-72(fp)
    8464:	10bfffcc 	andi	r2,r2,65535
    8468:	10bffe0c 	andi	r2,r2,65528
    846c:	e0bfe715 	stw	r2,-100(fp)
    8470:	00000206 	br	847c <alt_up_sd_card_find_next+0x388>
						}
						else
						{
							// Error encountered.                 
							result = -1;
    8474:	00bfffc4 	movi	r2,-1
    8478:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
    847c:	e0bfe717 	ldw	r2,-100(fp)
    8480:	00fffdd4 	movui	r3,65527
    8484:	18bf8e0e 	bge	r3,r2,82c0 <__alt_data_end+0xf80082c0>
    8488:	00000206 	br	8494 <alt_up_sd_card_find_next+0x3a0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
    848c:	008000c4 	movi	r2,3
    8490:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
    8494:	e0bfe60b 	ldhu	r2,-104(fp)
}
    8498:	e037883a 	mov	sp,fp
    849c:	dfc00117 	ldw	ra,4(sp)
    84a0:	df000017 	ldw	fp,0(sp)
    84a4:	dec00204 	addi	sp,sp,8
    84a8:	f800283a 	ret

000084ac <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
    84ac:	deffe904 	addi	sp,sp,-92
    84b0:	dfc01615 	stw	ra,88(sp)
    84b4:	df001515 	stw	fp,84(sp)
    84b8:	df001504 	addi	fp,sp,84
    84bc:	e13ffe15 	stw	r4,-8(fp)
    84c0:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
    84c4:	00bfffc4 	movi	r2,-1
    84c8:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    84cc:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    84d0:	1000cf26 	beq	r2,zero,8810 <alt_up_sd_card_fopen+0x364>
    84d4:	d0a71e17 	ldw	r2,-25480(gp)
    84d8:	1000cd26 	beq	r2,zero,8810 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
    84dc:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
    84e0:	e13ffe17 	ldw	r4,-8(fp)
    84e4:	00063480 	call	6348 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
    84e8:	e13ffe17 	ldw	r4,-8(fp)
    84ec:	000640c0 	call	640c <check_file_name_for_FAT16_compliance>
    84f0:	1000c726 	beq	r2,zero,8810 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
    84f4:	e0ffee04 	addi	r3,fp,-72
    84f8:	e0bfed04 	addi	r2,fp,-76
    84fc:	180d883a 	mov	r6,r3
    8500:	100b883a 	mov	r5,r2
    8504:	e13ffe17 	ldw	r4,-8(fp)
    8508:	00069cc0 	call	69cc <get_home_directory_cluster_for_file>
    850c:	1000021e 	bne	r2,zero,8518 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
    8510:	e0bfeb0b 	ldhu	r2,-84(fp)
    8514:	0000bf06 	br	8814 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
    8518:	e03fec15 	stw	zero,-80(fp)
    851c:	00000e06 	br	8558 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
    8520:	00800074 	movhi	r2,1
    8524:	10829604 	addi	r2,r2,2648
    8528:	e0ffec17 	ldw	r3,-80(fp)
    852c:	180691ba 	slli	r3,r3,6
    8530:	10c5883a 	add	r2,r2,r3
    8534:	10800f04 	addi	r2,r2,60
    8538:	10800017 	ldw	r2,0(r2)
    853c:	1000031e 	bne	r2,zero,854c <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
    8540:	e0bfec17 	ldw	r2,-80(fp)
    8544:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
    8548:	00000606 	br	8564 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
    854c:	e0bfec17 	ldw	r2,-80(fp)
    8550:	10800044 	addi	r2,r2,1
    8554:	e0bfec15 	stw	r2,-80(fp)
    8558:	e0bfec17 	ldw	r2,-80(fp)
    855c:	10800510 	cmplti	r2,r2,20
    8560:	103fef1e 	bne	r2,zero,8520 <__alt_data_end+0xf8008520>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
    8564:	e0bfeb0f 	ldh	r2,-84(fp)
    8568:	1000a916 	blt	r2,zero,8810 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
    856c:	e0bfed17 	ldw	r2,-76(fp)
    8570:	1009883a 	mov	r4,r2
    8574:	e0bfeb0f 	ldh	r2,-84(fp)
    8578:	100691ba 	slli	r3,r2,6
    857c:	00800074 	movhi	r2,1
    8580:	10829604 	addi	r2,r2,2648
    8584:	1885883a 	add	r2,r3,r2
    8588:	100d883a 	mov	r6,r2
    858c:	e17ffe17 	ldw	r5,-8(fp)
    8590:	0006f040 	call	6f04 <find_file_in_directory>
    8594:	10007b26 	beq	r2,zero,8784 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
    8598:	e0bfff17 	ldw	r2,-4(fp)
    859c:	10000226 	beq	r2,zero,85a8 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
    85a0:	00bfffc4 	movi	r2,-1
    85a4:	00009b06 	br	8814 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
    85a8:	e13feb0f 	ldh	r4,-84(fp)
    85ac:	e0ffeb0f 	ldh	r3,-84(fp)
    85b0:	00800074 	movhi	r2,1
    85b4:	10829604 	addi	r2,r2,2648
    85b8:	180691ba 	slli	r3,r3,6
    85bc:	10c5883a 	add	r2,r2,r3
    85c0:	10800584 	addi	r2,r2,22
    85c4:	1080000b 	ldhu	r2,0(r2)
    85c8:	10ffffcc 	andi	r3,r2,65535
    85cc:	00800074 	movhi	r2,1
    85d0:	10829604 	addi	r2,r2,2648
    85d4:	200891ba 	slli	r4,r4,6
    85d8:	1105883a 	add	r2,r2,r4
    85dc:	10800704 	addi	r2,r2,28
    85e0:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
    85e4:	e0ffeb0f 	ldh	r3,-84(fp)
    85e8:	00800074 	movhi	r2,1
    85ec:	10829604 	addi	r2,r2,2648
    85f0:	180691ba 	slli	r3,r3,6
    85f4:	10c5883a 	add	r2,r2,r3
    85f8:	10800804 	addi	r2,r2,32
    85fc:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
    8600:	e0ffeb0f 	ldh	r3,-84(fp)
    8604:	00800074 	movhi	r2,1
    8608:	10829604 	addi	r2,r2,2648
    860c:	180691ba 	slli	r3,r3,6
    8610:	10c5883a 	add	r2,r2,r3
    8614:	10800904 	addi	r2,r2,36
    8618:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
    861c:	e0ffeb0f 	ldh	r3,-84(fp)
    8620:	00800074 	movhi	r2,1
    8624:	10829604 	addi	r2,r2,2648
    8628:	180691ba 	slli	r3,r3,6
    862c:	10c5883a 	add	r2,r2,r3
    8630:	10800f04 	addi	r2,r2,60
    8634:	00c00044 	movi	r3,1
    8638:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
    863c:	e0ffeb0f 	ldh	r3,-84(fp)
    8640:	00800074 	movhi	r2,1
    8644:	10829604 	addi	r2,r2,2648
    8648:	180691ba 	slli	r3,r3,6
    864c:	10c5883a 	add	r2,r2,r3
    8650:	10800e04 	addi	r2,r2,56
    8654:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
    8658:	e03fec15 	stw	zero,-80(fp)
    865c:	00004506 	br	8774 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
    8660:	e0ffeb0f 	ldh	r3,-84(fp)
    8664:	e0bfec17 	ldw	r2,-80(fp)
    8668:	18803f26 	beq	r3,r2,8768 <alt_up_sd_card_fopen+0x2bc>
    866c:	00800074 	movhi	r2,1
    8670:	10829604 	addi	r2,r2,2648
    8674:	e0ffec17 	ldw	r3,-80(fp)
    8678:	180691ba 	slli	r3,r3,6
    867c:	10c5883a 	add	r2,r2,r3
    8680:	10800f04 	addi	r2,r2,60
    8684:	10800017 	ldw	r2,0(r2)
    8688:	10800058 	cmpnei	r2,r2,1
    868c:	1000361e 	bne	r2,zero,8768 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
    8690:	e0ffeb0f 	ldh	r3,-84(fp)
    8694:	00800074 	movhi	r2,1
    8698:	10829604 	addi	r2,r2,2648
    869c:	180691ba 	slli	r3,r3,6
    86a0:	10c5883a 	add	r2,r2,r3
    86a4:	10800a04 	addi	r2,r2,40
    86a8:	10c00017 	ldw	r3,0(r2)
    86ac:	00800074 	movhi	r2,1
    86b0:	10829604 	addi	r2,r2,2648
    86b4:	e13fec17 	ldw	r4,-80(fp)
    86b8:	200891ba 	slli	r4,r4,6
    86bc:	1105883a 	add	r2,r2,r4
    86c0:	10800a04 	addi	r2,r2,40
    86c4:	10800017 	ldw	r2,0(r2)
    86c8:	1880271e 	bne	r3,r2,8768 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
    86cc:	e0ffeb0f 	ldh	r3,-84(fp)
    86d0:	00800074 	movhi	r2,1
    86d4:	10829604 	addi	r2,r2,2648
    86d8:	180691ba 	slli	r3,r3,6
    86dc:	10c5883a 	add	r2,r2,r3
    86e0:	10800b04 	addi	r2,r2,44
    86e4:	10c00017 	ldw	r3,0(r2)
    86e8:	00800074 	movhi	r2,1
    86ec:	10829604 	addi	r2,r2,2648
    86f0:	e13fec17 	ldw	r4,-80(fp)
    86f4:	200891ba 	slli	r4,r4,6
    86f8:	1105883a 	add	r2,r2,r4
    86fc:	10800b04 	addi	r2,r2,44
    8700:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
    8704:	1880181e 	bne	r3,r2,8768 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
    8708:	e0ffeb0f 	ldh	r3,-84(fp)
    870c:	00800074 	movhi	r2,1
    8710:	10829604 	addi	r2,r2,2648
    8714:	180691ba 	slli	r3,r3,6
    8718:	10c5883a 	add	r2,r2,r3
    871c:	10800c04 	addi	r2,r2,48
    8720:	1100000b 	ldhu	r4,0(r2)
    8724:	00800074 	movhi	r2,1
    8728:	10829604 	addi	r2,r2,2648
    872c:	e0ffec17 	ldw	r3,-80(fp)
    8730:	180691ba 	slli	r3,r3,6
    8734:	10c5883a 	add	r2,r2,r3
    8738:	10800c04 	addi	r2,r2,48
    873c:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
    8740:	20ffffcc 	andi	r3,r4,65535
    8744:	18e0001c 	xori	r3,r3,32768
    8748:	18e00004 	addi	r3,r3,-32768
    874c:	10bfffcc 	andi	r2,r2,65535
    8750:	10a0001c 	xori	r2,r2,32768
    8754:	10a00004 	addi	r2,r2,-32768
    8758:	1880031e 	bne	r3,r2,8768 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
    875c:	00bfff84 	movi	r2,-2
    8760:	e0bfeb0d 	sth	r2,-84(fp)
								break;
    8764:	00002a06 	br	8810 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
    8768:	e0bfec17 	ldw	r2,-80(fp)
    876c:	10800044 	addi	r2,r2,1
    8770:	e0bfec15 	stw	r2,-80(fp)
    8774:	e0bfec17 	ldw	r2,-80(fp)
    8778:	10800510 	cmplti	r2,r2,20
    877c:	103fb81e 	bne	r2,zero,8660 <__alt_data_end+0xf8008660>
    8780:	00002306 	br	8810 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
    8784:	e0bfff17 	ldw	r2,-4(fp)
    8788:	10001f26 	beq	r2,zero,8808 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
    878c:	e0bfeb0f 	ldh	r2,-84(fp)
    8790:	100691ba 	slli	r3,r2,6
    8794:	00800074 	movhi	r2,1
    8798:	10829604 	addi	r2,r2,2648
    879c:	1885883a 	add	r2,r3,r2
    87a0:	e0ffee04 	addi	r3,fp,-72
    87a4:	180d883a 	mov	r6,r3
    87a8:	100b883a 	mov	r5,r2
    87ac:	e13ffe17 	ldw	r4,-8(fp)
    87b0:	0007a280 	call	7a28 <create_file>
    87b4:	10001126 	beq	r2,zero,87fc <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
    87b8:	e0ffeb0f 	ldh	r3,-84(fp)
    87bc:	00800074 	movhi	r2,1
    87c0:	10829604 	addi	r2,r2,2648
    87c4:	180691ba 	slli	r3,r3,6
    87c8:	10c5883a 	add	r2,r2,r3
    87cc:	10800f04 	addi	r2,r2,60
    87d0:	00c00044 	movi	r3,1
    87d4:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
    87d8:	e0ffeb0f 	ldh	r3,-84(fp)
    87dc:	00800074 	movhi	r2,1
    87e0:	10829604 	addi	r2,r2,2648
    87e4:	180691ba 	slli	r3,r3,6
    87e8:	10c5883a 	add	r2,r2,r3
    87ec:	10800e04 	addi	r2,r2,56
    87f0:	00c00044 	movi	r3,1
    87f4:	10c00015 	stw	r3,0(r2)
    87f8:	00000506 	br	8810 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
    87fc:	00bfffc4 	movi	r2,-1
    8800:	e0bfeb0d 	sth	r2,-84(fp)
    8804:	00000206 	br	8810 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
    8808:	00bfffc4 	movi	r2,-1
    880c:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
    8810:	e0bfeb0b 	ldhu	r2,-84(fp)
}
    8814:	e037883a 	mov	sp,fp
    8818:	dfc00117 	ldw	ra,4(sp)
    881c:	df000017 	ldw	fp,0(sp)
    8820:	dec00204 	addi	sp,sp,8
    8824:	f800283a 	ret

00008828 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    8828:	defffd04 	addi	sp,sp,-12
    882c:	df000215 	stw	fp,8(sp)
    8830:	df000204 	addi	fp,sp,8
    8834:	2007883a 	mov	r3,r4
    8838:	2805883a 	mov	r2,r5
    883c:	e0fffe0d 	sth	r3,-8(fp)
    8840:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    8844:	e0bffe0f 	ldh	r2,-8(fp)
    8848:	10001416 	blt	r2,zero,889c <alt_up_sd_card_set_attributes+0x74>
    884c:	e0bffe0f 	ldh	r2,-8(fp)
    8850:	10800508 	cmpgei	r2,r2,20
    8854:	1000111e 	bne	r2,zero,889c <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
    8858:	e0fffe0f 	ldh	r3,-8(fp)
    885c:	00800074 	movhi	r2,1
    8860:	10829604 	addi	r2,r2,2648
    8864:	180691ba 	slli	r3,r3,6
    8868:	10c5883a 	add	r2,r2,r3
    886c:	10800f04 	addi	r2,r2,60
    8870:	10800017 	ldw	r2,0(r2)
    8874:	10000926 	beq	r2,zero,889c <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
    8878:	e0fffe0f 	ldh	r3,-8(fp)
    887c:	e0bfff0b 	ldhu	r2,-4(fp)
    8880:	1009883a 	mov	r4,r2
    8884:	00800074 	movhi	r2,1
    8888:	10829604 	addi	r2,r2,2648
    888c:	180691ba 	slli	r3,r3,6
    8890:	10c5883a 	add	r2,r2,r3
    8894:	108002c4 	addi	r2,r2,11
    8898:	11000005 	stb	r4,0(r2)
        }
    }
}
    889c:	0001883a 	nop
    88a0:	e037883a 	mov	sp,fp
    88a4:	df000017 	ldw	fp,0(sp)
    88a8:	dec00104 	addi	sp,sp,4
    88ac:	f800283a 	ret

000088b0 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
    88b0:	defffd04 	addi	sp,sp,-12
    88b4:	df000215 	stw	fp,8(sp)
    88b8:	df000204 	addi	fp,sp,8
    88bc:	2005883a 	mov	r2,r4
    88c0:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
    88c4:	00bfffc4 	movi	r2,-1
    88c8:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    88cc:	e0bfff0f 	ldh	r2,-4(fp)
    88d0:	10001416 	blt	r2,zero,8924 <alt_up_sd_card_get_attributes+0x74>
    88d4:	e0bfff0f 	ldh	r2,-4(fp)
    88d8:	10800508 	cmpgei	r2,r2,20
    88dc:	1000111e 	bne	r2,zero,8924 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
    88e0:	e0ffff0f 	ldh	r3,-4(fp)
    88e4:	00800074 	movhi	r2,1
    88e8:	10829604 	addi	r2,r2,2648
    88ec:	180691ba 	slli	r3,r3,6
    88f0:	10c5883a 	add	r2,r2,r3
    88f4:	10800f04 	addi	r2,r2,60
    88f8:	10800017 	ldw	r2,0(r2)
    88fc:	10000926 	beq	r2,zero,8924 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
    8900:	e0ffff0f 	ldh	r3,-4(fp)
    8904:	00800074 	movhi	r2,1
    8908:	10829604 	addi	r2,r2,2648
    890c:	180691ba 	slli	r3,r3,6
    8910:	10c5883a 	add	r2,r2,r3
    8914:	108002c4 	addi	r2,r2,11
    8918:	10800003 	ldbu	r2,0(r2)
    891c:	10803fcc 	andi	r2,r2,255
    8920:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
    8924:	e0bffe0b 	ldhu	r2,-8(fp)
}
    8928:	e037883a 	mov	sp,fp
    892c:	df000017 	ldw	fp,0(sp)
    8930:	dec00104 	addi	sp,sp,4
    8934:	f800283a 	ret

00008938 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
    8938:	defffa04 	addi	sp,sp,-24
    893c:	dfc00515 	stw	ra,20(sp)
    8940:	df000415 	stw	fp,16(sp)
    8944:	df000404 	addi	fp,sp,16
    8948:	2005883a 	mov	r2,r4
    894c:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
    8950:	00bfffc4 	movi	r2,-1
    8954:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    8958:	e0bfff0f 	ldh	r2,-4(fp)
    895c:	1000ce16 	blt	r2,zero,8c98 <alt_up_sd_card_read+0x360>
    8960:	e0bfff0f 	ldh	r2,-4(fp)
    8964:	10800508 	cmpgei	r2,r2,20
    8968:	1000cb1e 	bne	r2,zero,8c98 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
    896c:	e0ffff0f 	ldh	r3,-4(fp)
    8970:	00800074 	movhi	r2,1
    8974:	10829604 	addi	r2,r2,2648
    8978:	180691ba 	slli	r3,r3,6
    897c:	10c5883a 	add	r2,r2,r3
    8980:	10800f04 	addi	r2,r2,60
    8984:	10800017 	ldw	r2,0(r2)
    8988:	1000c326 	beq	r2,zero,8c98 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
    898c:	e0ffff0f 	ldh	r3,-4(fp)
    8990:	00800074 	movhi	r2,1
    8994:	10829604 	addi	r2,r2,2648
    8998:	180691ba 	slli	r3,r3,6
    899c:	10c5883a 	add	r2,r2,r3
    89a0:	10800904 	addi	r2,r2,36
    89a4:	10c00017 	ldw	r3,0(r2)
    89a8:	e13fff0f 	ldh	r4,-4(fp)
    89ac:	00800074 	movhi	r2,1
    89b0:	10829604 	addi	r2,r2,2648
    89b4:	200891ba 	slli	r4,r4,6
    89b8:	1105883a 	add	r2,r2,r4
    89bc:	10800604 	addi	r2,r2,24
    89c0:	10800017 	ldw	r2,0(r2)
    89c4:	1880b42e 	bgeu	r3,r2,8c98 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    89c8:	00800074 	movhi	r2,1
    89cc:	10828104 	addi	r2,r2,2564
    89d0:	10c01417 	ldw	r3,80(r2)
    89d4:	e13fff0f 	ldh	r4,-4(fp)
    89d8:	00800074 	movhi	r2,1
    89dc:	10829604 	addi	r2,r2,2648
    89e0:	200891ba 	slli	r4,r4,6
    89e4:	1105883a 	add	r2,r2,r4
    89e8:	10800704 	addi	r2,r2,28
    89ec:	10800017 	ldw	r2,0(r2)
    89f0:	113fff84 	addi	r4,r2,-2
    89f4:	00800074 	movhi	r2,1
    89f8:	10828104 	addi	r2,r2,2564
    89fc:	10800383 	ldbu	r2,14(r2)
    8a00:	10803fcc 	andi	r2,r2,255
    8a04:	2085383a 	mul	r2,r4,r2
    8a08:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
    8a0c:	e13fff0f 	ldh	r4,-4(fp)
    8a10:	00800074 	movhi	r2,1
    8a14:	10829604 	addi	r2,r2,2648
    8a18:	200891ba 	slli	r4,r4,6
    8a1c:	1105883a 	add	r2,r2,r4
    8a20:	10800804 	addi	r2,r2,32
    8a24:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    8a28:	1885883a 	add	r2,r3,r2
    8a2c:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
    8a30:	e0ffff0f 	ldh	r3,-4(fp)
    8a34:	00800074 	movhi	r2,1
    8a38:	10829604 	addi	r2,r2,2648
    8a3c:	180691ba 	slli	r3,r3,6
    8a40:	10c5883a 	add	r2,r2,r3
    8a44:	10800904 	addi	r2,r2,36
    8a48:	10800017 	ldw	r2,0(r2)
    8a4c:	10006826 	beq	r2,zero,8bf0 <alt_up_sd_card_read+0x2b8>
    8a50:	e0ffff0f 	ldh	r3,-4(fp)
    8a54:	00800074 	movhi	r2,1
    8a58:	10829604 	addi	r2,r2,2648
    8a5c:	180691ba 	slli	r3,r3,6
    8a60:	10c5883a 	add	r2,r2,r3
    8a64:	10800904 	addi	r2,r2,36
    8a68:	10800017 	ldw	r2,0(r2)
    8a6c:	10807fcc 	andi	r2,r2,511
    8a70:	10005f1e 	bne	r2,zero,8bf0 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
    8a74:	e0ffff0f 	ldh	r3,-4(fp)
    8a78:	00800074 	movhi	r2,1
    8a7c:	10829604 	addi	r2,r2,2648
    8a80:	180691ba 	slli	r3,r3,6
    8a84:	10c5883a 	add	r2,r2,r3
    8a88:	10800804 	addi	r2,r2,32
    8a8c:	10c00017 	ldw	r3,0(r2)
    8a90:	00800074 	movhi	r2,1
    8a94:	10828104 	addi	r2,r2,2564
    8a98:	10800383 	ldbu	r2,14(r2)
    8a9c:	10803fcc 	andi	r2,r2,255
    8aa0:	10bfffc4 	addi	r2,r2,-1
    8aa4:	1880401e 	bne	r3,r2,8ba8 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
    8aa8:	e0ffff0f 	ldh	r3,-4(fp)
    8aac:	00800074 	movhi	r2,1
    8ab0:	10829604 	addi	r2,r2,2648
    8ab4:	180691ba 	slli	r3,r3,6
    8ab8:	10c5883a 	add	r2,r2,r3
    8abc:	10800704 	addi	r2,r2,28
    8ac0:	10800017 	ldw	r2,0(r2)
    8ac4:	e0fffe04 	addi	r3,fp,-8
    8ac8:	180b883a 	mov	r5,r3
    8acc:	1009883a 	mov	r4,r2
    8ad0:	000539c0 	call	539c <get_cluster_flag>
    8ad4:	10003226 	beq	r2,zero,8ba0 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
    8ad8:	e0bffe0b 	ldhu	r2,-8(fp)
    8adc:	10bfffcc 	andi	r2,r2,65535
    8ae0:	10fffe0c 	andi	r3,r2,65528
    8ae4:	00bffe14 	movui	r2,65528
    8ae8:	1880021e 	bne	r3,r2,8af4 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
    8aec:	00bfffc4 	movi	r2,-1
    8af0:	00006a06 	br	8c9c <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
    8af4:	e13fff0f 	ldh	r4,-4(fp)
    8af8:	e0bffe0b 	ldhu	r2,-8(fp)
    8afc:	10ffffcc 	andi	r3,r2,65535
    8b00:	00800074 	movhi	r2,1
    8b04:	10829604 	addi	r2,r2,2648
    8b08:	200891ba 	slli	r4,r4,6
    8b0c:	1105883a 	add	r2,r2,r4
    8b10:	10800704 	addi	r2,r2,28
    8b14:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
    8b18:	e0ffff0f 	ldh	r3,-4(fp)
    8b1c:	00800074 	movhi	r2,1
    8b20:	10829604 	addi	r2,r2,2648
    8b24:	180691ba 	slli	r3,r3,6
    8b28:	10c5883a 	add	r2,r2,r3
    8b2c:	10800804 	addi	r2,r2,32
    8b30:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    8b34:	00800074 	movhi	r2,1
    8b38:	10828104 	addi	r2,r2,2564
    8b3c:	10c01417 	ldw	r3,80(r2)
    8b40:	e13fff0f 	ldh	r4,-4(fp)
    8b44:	00800074 	movhi	r2,1
    8b48:	10829604 	addi	r2,r2,2648
    8b4c:	200891ba 	slli	r4,r4,6
    8b50:	1105883a 	add	r2,r2,r4
    8b54:	10800704 	addi	r2,r2,28
    8b58:	10800017 	ldw	r2,0(r2)
    8b5c:	113fff84 	addi	r4,r2,-2
    8b60:	00800074 	movhi	r2,1
    8b64:	10828104 	addi	r2,r2,2564
    8b68:	10800383 	ldbu	r2,14(r2)
    8b6c:	10803fcc 	andi	r2,r2,255
    8b70:	2085383a 	mul	r2,r4,r2
    8b74:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
    8b78:	e13fff0f 	ldh	r4,-4(fp)
    8b7c:	00800074 	movhi	r2,1
    8b80:	10829604 	addi	r2,r2,2648
    8b84:	200891ba 	slli	r4,r4,6
    8b88:	1105883a 	add	r2,r2,r4
    8b8c:	10800804 	addi	r2,r2,32
    8b90:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    8b94:	1885883a 	add	r2,r3,r2
    8b98:	e0bffd15 	stw	r2,-12(fp)
    8b9c:	00001406 	br	8bf0 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
    8ba0:	00bfff84 	movi	r2,-2
    8ba4:	00003d06 	br	8c9c <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
    8ba8:	e13fff0f 	ldh	r4,-4(fp)
    8bac:	e0ffff0f 	ldh	r3,-4(fp)
    8bb0:	00800074 	movhi	r2,1
    8bb4:	10829604 	addi	r2,r2,2648
    8bb8:	180691ba 	slli	r3,r3,6
    8bbc:	10c5883a 	add	r2,r2,r3
    8bc0:	10800804 	addi	r2,r2,32
    8bc4:	10800017 	ldw	r2,0(r2)
    8bc8:	10c00044 	addi	r3,r2,1
    8bcc:	00800074 	movhi	r2,1
    8bd0:	10829604 	addi	r2,r2,2648
    8bd4:	200891ba 	slli	r4,r4,6
    8bd8:	1105883a 	add	r2,r2,r4
    8bdc:	10800804 	addi	r2,r2,32
    8be0:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
    8be4:	e0bffd17 	ldw	r2,-12(fp)
    8be8:	10800044 	addi	r2,r2,1
    8bec:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
    8bf0:	d0e72517 	ldw	r3,-25452(gp)
    8bf4:	e0bffd17 	ldw	r2,-12(fp)
    8bf8:	1885883a 	add	r2,r3,r2
    8bfc:	1007883a 	mov	r3,r2
    8c00:	d0a72917 	ldw	r2,-25436(gp)
    8c04:	18800726 	beq	r3,r2,8c24 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
    8c08:	d0a72517 	ldw	r2,-25452(gp)
    8c0c:	100b883a 	mov	r5,r2
    8c10:	e13ffd17 	ldw	r4,-12(fp)
    8c14:	00052c40 	call	52c4 <Read_Sector_Data>
    8c18:	1000021e 	bne	r2,zero,8c24 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
    8c1c:	00bfff84 	movi	r2,-2
    8c20:	00001e06 	br	8c9c <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
    8c24:	d0e72417 	ldw	r3,-25456(gp)
    8c28:	e13fff0f 	ldh	r4,-4(fp)
    8c2c:	00800074 	movhi	r2,1
    8c30:	10829604 	addi	r2,r2,2648
    8c34:	200891ba 	slli	r4,r4,6
    8c38:	1105883a 	add	r2,r2,r4
    8c3c:	10800904 	addi	r2,r2,36
    8c40:	10800017 	ldw	r2,0(r2)
    8c44:	10807fcc 	andi	r2,r2,511
    8c48:	1885883a 	add	r2,r3,r2
    8c4c:	10800023 	ldbuio	r2,0(r2)
    8c50:	10803fcc 	andi	r2,r2,255
    8c54:	10803fcc 	andi	r2,r2,255
    8c58:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
    8c5c:	e13fff0f 	ldh	r4,-4(fp)
    8c60:	e0ffff0f 	ldh	r3,-4(fp)
    8c64:	00800074 	movhi	r2,1
    8c68:	10829604 	addi	r2,r2,2648
    8c6c:	180691ba 	slli	r3,r3,6
    8c70:	10c5883a 	add	r2,r2,r3
    8c74:	10800904 	addi	r2,r2,36
    8c78:	10800017 	ldw	r2,0(r2)
    8c7c:	10c00044 	addi	r3,r2,1
    8c80:	00800074 	movhi	r2,1
    8c84:	10829604 	addi	r2,r2,2648
    8c88:	200891ba 	slli	r4,r4,6
    8c8c:	1105883a 	add	r2,r2,r4
    8c90:	10800904 	addi	r2,r2,36
    8c94:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
    8c98:	e0bffc0b 	ldhu	r2,-16(fp)
}
    8c9c:	e037883a 	mov	sp,fp
    8ca0:	dfc00117 	ldw	ra,4(sp)
    8ca4:	df000017 	ldw	fp,0(sp)
    8ca8:	dec00204 	addi	sp,sp,8
    8cac:	f800283a 	ret

00008cb0 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
    8cb0:	defff804 	addi	sp,sp,-32
    8cb4:	dfc00715 	stw	ra,28(sp)
    8cb8:	df000615 	stw	fp,24(sp)
    8cbc:	df000604 	addi	fp,sp,24
    8cc0:	2007883a 	mov	r3,r4
    8cc4:	2805883a 	mov	r2,r5
    8cc8:	e0fffe0d 	sth	r3,-8(fp)
    8ccc:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
    8cd0:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    8cd4:	e0bffe0f 	ldh	r2,-8(fp)
    8cd8:	10017716 	blt	r2,zero,92b8 <alt_up_sd_card_write+0x608>
    8cdc:	e0bffe0f 	ldh	r2,-8(fp)
    8ce0:	10800508 	cmpgei	r2,r2,20
    8ce4:	1001741e 	bne	r2,zero,92b8 <alt_up_sd_card_write+0x608>
    {
        if (active_files[file_handle].in_use)
    8ce8:	e0fffe0f 	ldh	r3,-8(fp)
    8cec:	00800074 	movhi	r2,1
    8cf0:	10829604 	addi	r2,r2,2648
    8cf4:	180691ba 	slli	r3,r3,6
    8cf8:	10c5883a 	add	r2,r2,r3
    8cfc:	10800f04 	addi	r2,r2,60
    8d00:	10800017 	ldw	r2,0(r2)
    8d04:	10016c26 	beq	r2,zero,92b8 <alt_up_sd_card_write+0x608>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    8d08:	00800074 	movhi	r2,1
    8d0c:	10828104 	addi	r2,r2,2564
    8d10:	10c01417 	ldw	r3,80(r2)
    8d14:	e13ffe0f 	ldh	r4,-8(fp)
    8d18:	00800074 	movhi	r2,1
    8d1c:	10829604 	addi	r2,r2,2648
    8d20:	200891ba 	slli	r4,r4,6
    8d24:	1105883a 	add	r2,r2,r4
    8d28:	10800704 	addi	r2,r2,28
    8d2c:	10800017 	ldw	r2,0(r2)
    8d30:	113fff84 	addi	r4,r2,-2
    8d34:	00800074 	movhi	r2,1
    8d38:	10828104 	addi	r2,r2,2564
    8d3c:	10800383 	ldbu	r2,14(r2)
    8d40:	10803fcc 	andi	r2,r2,255
    8d44:	2085383a 	mul	r2,r4,r2
    8d48:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
    8d4c:	e13ffe0f 	ldh	r4,-8(fp)
    8d50:	00800074 	movhi	r2,1
    8d54:	10829604 	addi	r2,r2,2648
    8d58:	200891ba 	slli	r4,r4,6
    8d5c:	1105883a 	add	r2,r2,r4
    8d60:	10800804 	addi	r2,r2,32
    8d64:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    8d68:	1885883a 	add	r2,r3,r2
    8d6c:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
    8d70:	e0fffe0f 	ldh	r3,-8(fp)
    8d74:	00800074 	movhi	r2,1
    8d78:	10829604 	addi	r2,r2,2648
    8d7c:	180691ba 	slli	r3,r3,6
    8d80:	10c5883a 	add	r2,r2,r3
    8d84:	10800904 	addi	r2,r2,36
    8d88:	10c00017 	ldw	r3,0(r2)
    8d8c:	00800074 	movhi	r2,1
    8d90:	10828104 	addi	r2,r2,2564
    8d94:	1080030b 	ldhu	r2,12(r2)
    8d98:	10bfffcc 	andi	r2,r2,65535
    8d9c:	1889203a 	divu	r4,r3,r2
    8da0:	2085383a 	mul	r2,r4,r2
    8da4:	1885c83a 	sub	r2,r3,r2
    8da8:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
    8dac:	e0fffe0f 	ldh	r3,-8(fp)
    8db0:	00800074 	movhi	r2,1
    8db4:	10829604 	addi	r2,r2,2648
    8db8:	180691ba 	slli	r3,r3,6
    8dbc:	10c5883a 	add	r2,r2,r3
    8dc0:	10800904 	addi	r2,r2,36
    8dc4:	10c00017 	ldw	r3,0(r2)
    8dc8:	e13ffe0f 	ldh	r4,-8(fp)
    8dcc:	00800074 	movhi	r2,1
    8dd0:	10829604 	addi	r2,r2,2648
    8dd4:	200891ba 	slli	r4,r4,6
    8dd8:	1105883a 	add	r2,r2,r4
    8ddc:	10800604 	addi	r2,r2,24
    8de0:	10800017 	ldw	r2,0(r2)
    8de4:	1880672e 	bgeu	r3,r2,8f84 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
    8de8:	e0fffe0f 	ldh	r3,-8(fp)
    8dec:	00800074 	movhi	r2,1
    8df0:	10829604 	addi	r2,r2,2648
    8df4:	180691ba 	slli	r3,r3,6
    8df8:	10c5883a 	add	r2,r2,r3
    8dfc:	10800904 	addi	r2,r2,36
    8e00:	10800017 	ldw	r2,0(r2)
    8e04:	1000e126 	beq	r2,zero,918c <alt_up_sd_card_write+0x4dc>
    8e08:	e0bffc0f 	ldh	r2,-16(fp)
    8e0c:	1000df1e 	bne	r2,zero,918c <alt_up_sd_card_write+0x4dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
    8e10:	e0fffe0f 	ldh	r3,-8(fp)
    8e14:	00800074 	movhi	r2,1
    8e18:	10829604 	addi	r2,r2,2648
    8e1c:	180691ba 	slli	r3,r3,6
    8e20:	10c5883a 	add	r2,r2,r3
    8e24:	10800804 	addi	r2,r2,32
    8e28:	10c00017 	ldw	r3,0(r2)
    8e2c:	00800074 	movhi	r2,1
    8e30:	10828104 	addi	r2,r2,2564
    8e34:	10800383 	ldbu	r2,14(r2)
    8e38:	10803fcc 	andi	r2,r2,255
    8e3c:	10bfffc4 	addi	r2,r2,-1
    8e40:	18803d1e 	bne	r3,r2,8f38 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
    8e44:	e0fffe0f 	ldh	r3,-8(fp)
    8e48:	00800074 	movhi	r2,1
    8e4c:	10829604 	addi	r2,r2,2648
    8e50:	180691ba 	slli	r3,r3,6
    8e54:	10c5883a 	add	r2,r2,r3
    8e58:	10800704 	addi	r2,r2,28
    8e5c:	10800017 	ldw	r2,0(r2)
    8e60:	e0fffc84 	addi	r3,fp,-14
    8e64:	180b883a 	mov	r5,r3
    8e68:	1009883a 	mov	r4,r2
    8e6c:	000539c0 	call	539c <get_cluster_flag>
    8e70:	10002f26 	beq	r2,zero,8f30 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
    8e74:	e0bffc8b 	ldhu	r2,-14(fp)
    8e78:	10bfffcc 	andi	r2,r2,65535
    8e7c:	10bffe28 	cmpgeui	r2,r2,65528
    8e80:	1000c21e 	bne	r2,zero,918c <alt_up_sd_card_write+0x4dc>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
    8e84:	e13ffe0f 	ldh	r4,-8(fp)
    8e88:	e0bffc8b 	ldhu	r2,-14(fp)
    8e8c:	10ffffcc 	andi	r3,r2,65535
    8e90:	00800074 	movhi	r2,1
    8e94:	10829604 	addi	r2,r2,2648
    8e98:	200891ba 	slli	r4,r4,6
    8e9c:	1105883a 	add	r2,r2,r4
    8ea0:	10800704 	addi	r2,r2,28
    8ea4:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
    8ea8:	e0fffe0f 	ldh	r3,-8(fp)
    8eac:	00800074 	movhi	r2,1
    8eb0:	10829604 	addi	r2,r2,2648
    8eb4:	180691ba 	slli	r3,r3,6
    8eb8:	10c5883a 	add	r2,r2,r3
    8ebc:	10800804 	addi	r2,r2,32
    8ec0:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    8ec4:	00800074 	movhi	r2,1
    8ec8:	10828104 	addi	r2,r2,2564
    8ecc:	10c01417 	ldw	r3,80(r2)
    8ed0:	e13ffe0f 	ldh	r4,-8(fp)
    8ed4:	00800074 	movhi	r2,1
    8ed8:	10829604 	addi	r2,r2,2648
    8edc:	200891ba 	slli	r4,r4,6
    8ee0:	1105883a 	add	r2,r2,r4
    8ee4:	10800704 	addi	r2,r2,28
    8ee8:	10800017 	ldw	r2,0(r2)
    8eec:	113fff84 	addi	r4,r2,-2
    8ef0:	00800074 	movhi	r2,1
    8ef4:	10828104 	addi	r2,r2,2564
    8ef8:	10800383 	ldbu	r2,14(r2)
    8efc:	10803fcc 	andi	r2,r2,255
    8f00:	2085383a 	mul	r2,r4,r2
    8f04:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
    8f08:	e13ffe0f 	ldh	r4,-8(fp)
    8f0c:	00800074 	movhi	r2,1
    8f10:	10829604 	addi	r2,r2,2648
    8f14:	200891ba 	slli	r4,r4,6
    8f18:	1105883a 	add	r2,r2,r4
    8f1c:	10800804 	addi	r2,r2,32
    8f20:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    8f24:	1885883a 	add	r2,r3,r2
    8f28:	e0bffb15 	stw	r2,-20(fp)
    8f2c:	00009706 	br	918c <alt_up_sd_card_write+0x4dc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
    8f30:	0005883a 	mov	r2,zero
    8f34:	0000e106 	br	92bc <alt_up_sd_card_write+0x60c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
    8f38:	e13ffe0f 	ldh	r4,-8(fp)
    8f3c:	e0fffe0f 	ldh	r3,-8(fp)
    8f40:	00800074 	movhi	r2,1
    8f44:	10829604 	addi	r2,r2,2648
    8f48:	180691ba 	slli	r3,r3,6
    8f4c:	10c5883a 	add	r2,r2,r3
    8f50:	10800804 	addi	r2,r2,32
    8f54:	10800017 	ldw	r2,0(r2)
    8f58:	10c00044 	addi	r3,r2,1
    8f5c:	00800074 	movhi	r2,1
    8f60:	10829604 	addi	r2,r2,2648
    8f64:	200891ba 	slli	r4,r4,6
    8f68:	1105883a 	add	r2,r2,r4
    8f6c:	10800804 	addi	r2,r2,32
    8f70:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
    8f74:	e0bffb17 	ldw	r2,-20(fp)
    8f78:	10800044 	addi	r2,r2,1
    8f7c:	e0bffb15 	stw	r2,-20(fp)
    8f80:	00008206 	br	918c <alt_up_sd_card_write+0x4dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
    8f84:	e0fffe0f 	ldh	r3,-8(fp)
    8f88:	00800074 	movhi	r2,1
    8f8c:	10829604 	addi	r2,r2,2648
    8f90:	180691ba 	slli	r3,r3,6
    8f94:	10c5883a 	add	r2,r2,r3
    8f98:	10800904 	addi	r2,r2,36
    8f9c:	10800017 	ldw	r2,0(r2)
    8fa0:	10007a26 	beq	r2,zero,918c <alt_up_sd_card_write+0x4dc>
    8fa4:	e0bffc0f 	ldh	r2,-16(fp)
    8fa8:	1000781e 	bne	r2,zero,918c <alt_up_sd_card_write+0x4dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
    8fac:	e0fffe0f 	ldh	r3,-8(fp)
    8fb0:	00800074 	movhi	r2,1
    8fb4:	10829604 	addi	r2,r2,2648
    8fb8:	180691ba 	slli	r3,r3,6
    8fbc:	10c5883a 	add	r2,r2,r3
    8fc0:	10800804 	addi	r2,r2,32
    8fc4:	10c00017 	ldw	r3,0(r2)
    8fc8:	00800074 	movhi	r2,1
    8fcc:	10828104 	addi	r2,r2,2564
    8fd0:	10800383 	ldbu	r2,14(r2)
    8fd4:	10803fcc 	andi	r2,r2,255
    8fd8:	10bfffc4 	addi	r2,r2,-1
    8fdc:	18803e1e 	bne	r3,r2,90d8 <alt_up_sd_card_write+0x428>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
    8fe0:	e0bffd04 	addi	r2,fp,-12
    8fe4:	1009883a 	mov	r4,r2
    8fe8:	00073780 	call	7378 <find_first_empty_cluster>
    8fec:	10003826 	beq	r2,zero,90d0 <alt_up_sd_card_write+0x420>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
    8ff0:	e0fffe0f 	ldh	r3,-8(fp)
    8ff4:	00800074 	movhi	r2,1
    8ff8:	10829604 	addi	r2,r2,2648
    8ffc:	180691ba 	slli	r3,r3,6
    9000:	10c5883a 	add	r2,r2,r3
    9004:	10800704 	addi	r2,r2,28
    9008:	10800017 	ldw	r2,0(r2)
    900c:	e0fffd17 	ldw	r3,-12(fp)
    9010:	18ffffcc 	andi	r3,r3,65535
    9014:	18e0001c 	xori	r3,r3,32768
    9018:	18e00004 	addi	r3,r3,-32768
    901c:	01800044 	movi	r6,1
    9020:	180b883a 	mov	r5,r3
    9024:	1009883a 	mov	r4,r2
    9028:	00054500 	call	5450 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
    902c:	e0bffd17 	ldw	r2,-12(fp)
    9030:	01800044 	movi	r6,1
    9034:	017fffc4 	movi	r5,-1
    9038:	1009883a 	mov	r4,r2
    903c:	00054500 	call	5450 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
    9040:	e0fffe0f 	ldh	r3,-8(fp)
    9044:	00800074 	movhi	r2,1
    9048:	10829604 	addi	r2,r2,2648
    904c:	180691ba 	slli	r3,r3,6
    9050:	10c5883a 	add	r2,r2,r3
    9054:	10800704 	addi	r2,r2,28
    9058:	10800017 	ldw	r2,0(r2)
    905c:	e0fffd17 	ldw	r3,-12(fp)
    9060:	18ffffcc 	andi	r3,r3,65535
    9064:	18e0001c 	xori	r3,r3,32768
    9068:	18e00004 	addi	r3,r3,-32768
    906c:	000d883a 	mov	r6,zero
    9070:	180b883a 	mov	r5,r3
    9074:	1009883a 	mov	r4,r2
    9078:	00054500 	call	5450 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
    907c:	e0bffd17 	ldw	r2,-12(fp)
    9080:	000d883a 	mov	r6,zero
    9084:	017fffc4 	movi	r5,-1
    9088:	1009883a 	mov	r4,r2
    908c:	00054500 	call	5450 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
    9090:	e13ffe0f 	ldh	r4,-8(fp)
    9094:	e0fffd17 	ldw	r3,-12(fp)
    9098:	00800074 	movhi	r2,1
    909c:	10829604 	addi	r2,r2,2648
    90a0:	200891ba 	slli	r4,r4,6
    90a4:	1105883a 	add	r2,r2,r4
    90a8:	10800704 	addi	r2,r2,28
    90ac:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
    90b0:	e0fffe0f 	ldh	r3,-8(fp)
    90b4:	00800074 	movhi	r2,1
    90b8:	10829604 	addi	r2,r2,2648
    90bc:	180691ba 	slli	r3,r3,6
    90c0:	10c5883a 	add	r2,r2,r3
    90c4:	10800804 	addi	r2,r2,32
    90c8:	10000015 	stw	zero,0(r2)
    90cc:	00001506 	br	9124 <alt_up_sd_card_write+0x474>
						}
						else
						{
							return false;
    90d0:	0005883a 	mov	r2,zero
    90d4:	00007906 	br	92bc <alt_up_sd_card_write+0x60c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
    90d8:	e13ffe0f 	ldh	r4,-8(fp)
    90dc:	e0fffe0f 	ldh	r3,-8(fp)
    90e0:	00800074 	movhi	r2,1
    90e4:	10829604 	addi	r2,r2,2648
    90e8:	180691ba 	slli	r3,r3,6
    90ec:	10c5883a 	add	r2,r2,r3
    90f0:	10800904 	addi	r2,r2,36
    90f4:	10c00017 	ldw	r3,0(r2)
    90f8:	00800074 	movhi	r2,1
    90fc:	10828104 	addi	r2,r2,2564
    9100:	1080030b 	ldhu	r2,12(r2)
    9104:	10bfffcc 	andi	r2,r2,65535
    9108:	1887203a 	divu	r3,r3,r2
    910c:	00800074 	movhi	r2,1
    9110:	10829604 	addi	r2,r2,2648
    9114:	200891ba 	slli	r4,r4,6
    9118:	1105883a 	add	r2,r2,r4
    911c:	10800804 	addi	r2,r2,32
    9120:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    9124:	00800074 	movhi	r2,1
    9128:	10828104 	addi	r2,r2,2564
    912c:	10c01417 	ldw	r3,80(r2)
    9130:	e13ffe0f 	ldh	r4,-8(fp)
    9134:	00800074 	movhi	r2,1
    9138:	10829604 	addi	r2,r2,2648
    913c:	200891ba 	slli	r4,r4,6
    9140:	1105883a 	add	r2,r2,r4
    9144:	10800704 	addi	r2,r2,28
    9148:	10800017 	ldw	r2,0(r2)
    914c:	113fff84 	addi	r4,r2,-2
    9150:	00800074 	movhi	r2,1
    9154:	10828104 	addi	r2,r2,2564
    9158:	10800383 	ldbu	r2,14(r2)
    915c:	10803fcc 	andi	r2,r2,255
    9160:	2085383a 	mul	r2,r4,r2
    9164:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
    9168:	e13ffe0f 	ldh	r4,-8(fp)
    916c:	00800074 	movhi	r2,1
    9170:	10829604 	addi	r2,r2,2648
    9174:	200891ba 	slli	r4,r4,6
    9178:	1105883a 	add	r2,r2,r4
    917c:	10800804 	addi	r2,r2,32
    9180:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
    9184:	1885883a 	add	r2,r3,r2
    9188:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
    918c:	d0e72517 	ldw	r3,-25452(gp)
    9190:	e0bffb17 	ldw	r2,-20(fp)
    9194:	1885883a 	add	r2,r3,r2
    9198:	1007883a 	mov	r3,r2
    919c:	d0a72917 	ldw	r2,-25436(gp)
    91a0:	18800726 	beq	r3,r2,91c0 <alt_up_sd_card_write+0x510>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
    91a4:	d0a72517 	ldw	r2,-25452(gp)
    91a8:	100b883a 	mov	r5,r2
    91ac:	e13ffb17 	ldw	r4,-20(fp)
    91b0:	00052c40 	call	52c4 <Read_Sector_Data>
    91b4:	1000021e 	bne	r2,zero,91c0 <alt_up_sd_card_write+0x510>
                {
					return false;
    91b8:	0005883a 	mov	r2,zero
    91bc:	00003f06 	br	92bc <alt_up_sd_card_write+0x60c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
    91c0:	d0e72417 	ldw	r3,-25456(gp)
    91c4:	e0bffc0f 	ldh	r2,-16(fp)
    91c8:	1885883a 	add	r2,r3,r2
    91cc:	e0ffff07 	ldb	r3,-4(fp)
    91d0:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
    91d4:	e13ffe0f 	ldh	r4,-8(fp)
    91d8:	e0fffe0f 	ldh	r3,-8(fp)
    91dc:	00800074 	movhi	r2,1
    91e0:	10829604 	addi	r2,r2,2648
    91e4:	180691ba 	slli	r3,r3,6
    91e8:	10c5883a 	add	r2,r2,r3
    91ec:	10800904 	addi	r2,r2,36
    91f0:	10800017 	ldw	r2,0(r2)
    91f4:	10c00044 	addi	r3,r2,1
    91f8:	00800074 	movhi	r2,1
    91fc:	10829604 	addi	r2,r2,2648
    9200:	200891ba 	slli	r4,r4,6
    9204:	1105883a 	add	r2,r2,r4
    9208:	10800904 	addi	r2,r2,36
    920c:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
    9210:	e0fffe0f 	ldh	r3,-8(fp)
    9214:	00800074 	movhi	r2,1
    9218:	10829604 	addi	r2,r2,2648
    921c:	180691ba 	slli	r3,r3,6
    9220:	10c5883a 	add	r2,r2,r3
    9224:	10800904 	addi	r2,r2,36
    9228:	10c00017 	ldw	r3,0(r2)
    922c:	e13ffe0f 	ldh	r4,-8(fp)
    9230:	00800074 	movhi	r2,1
    9234:	10829604 	addi	r2,r2,2648
    9238:	200891ba 	slli	r4,r4,6
    923c:	1105883a 	add	r2,r2,r4
    9240:	10800604 	addi	r2,r2,24
    9244:	10800017 	ldw	r2,0(r2)
    9248:	18801736 	bltu	r3,r2,92a8 <alt_up_sd_card_write+0x5f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
    924c:	e13ffe0f 	ldh	r4,-8(fp)
    9250:	e0fffe0f 	ldh	r3,-8(fp)
    9254:	00800074 	movhi	r2,1
    9258:	10829604 	addi	r2,r2,2648
    925c:	180691ba 	slli	r3,r3,6
    9260:	10c5883a 	add	r2,r2,r3
    9264:	10800604 	addi	r2,r2,24
    9268:	10800017 	ldw	r2,0(r2)
    926c:	10c00044 	addi	r3,r2,1
    9270:	00800074 	movhi	r2,1
    9274:	10829604 	addi	r2,r2,2648
    9278:	200891ba 	slli	r4,r4,6
    927c:	1105883a 	add	r2,r2,r4
    9280:	10800604 	addi	r2,r2,24
    9284:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
    9288:	e0fffe0f 	ldh	r3,-8(fp)
    928c:	00800074 	movhi	r2,1
    9290:	10829604 	addi	r2,r2,2648
    9294:	180691ba 	slli	r3,r3,6
    9298:	10c5883a 	add	r2,r2,r3
    929c:	10800e04 	addi	r2,r2,56
    92a0:	00c00044 	movi	r3,1
    92a4:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
    92a8:	00800044 	movi	r2,1
    92ac:	d0a72815 	stw	r2,-25440(gp)
			result = true;
    92b0:	00800044 	movi	r2,1
    92b4:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
    92b8:	e0bffa17 	ldw	r2,-24(fp)
}
    92bc:	e037883a 	mov	sp,fp
    92c0:	dfc00117 	ldw	ra,4(sp)
    92c4:	df000017 	ldw	fp,0(sp)
    92c8:	dec00204 	addi	sp,sp,8
    92cc:	f800283a 	ret

000092d0 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
    92d0:	defffb04 	addi	sp,sp,-20
    92d4:	dfc00415 	stw	ra,16(sp)
    92d8:	df000315 	stw	fp,12(sp)
    92dc:	df000304 	addi	fp,sp,12
    92e0:	2005883a 	mov	r2,r4
    92e4:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
    92e8:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    92ec:	0007ef40 	call	7ef4 <alt_up_sd_card_is_Present>
    92f0:	10006026 	beq	r2,zero,9474 <alt_up_sd_card_fclose+0x1a4>
    92f4:	d0a71e17 	ldw	r2,-25480(gp)
    92f8:	10005e26 	beq	r2,zero,9474 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
    92fc:	e0ffff0f 	ldh	r3,-4(fp)
    9300:	00800074 	movhi	r2,1
    9304:	10829604 	addi	r2,r2,2648
    9308:	180691ba 	slli	r3,r3,6
    930c:	10c5883a 	add	r2,r2,r3
    9310:	10800f04 	addi	r2,r2,60
    9314:	10800017 	ldw	r2,0(r2)
    9318:	10005626 	beq	r2,zero,9474 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
    931c:	e0ffff0f 	ldh	r3,-4(fp)
    9320:	00800074 	movhi	r2,1
    9324:	10829604 	addi	r2,r2,2648
    9328:	180691ba 	slli	r3,r3,6
    932c:	10c5883a 	add	r2,r2,r3
    9330:	10800e04 	addi	r2,r2,56
    9334:	10800017 	ldw	r2,0(r2)
    9338:	10004526 	beq	r2,zero,9450 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
    933c:	e0ffff0f 	ldh	r3,-4(fp)
    9340:	00800074 	movhi	r2,1
    9344:	10829604 	addi	r2,r2,2648
    9348:	180691ba 	slli	r3,r3,6
    934c:	10c5883a 	add	r2,r2,r3
    9350:	10800b04 	addi	r2,r2,44
    9354:	10800017 	ldw	r2,0(r2)
    9358:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
    935c:	e0ffff0f 	ldh	r3,-4(fp)
    9360:	00800074 	movhi	r2,1
    9364:	10829604 	addi	r2,r2,2648
    9368:	180691ba 	slli	r3,r3,6
    936c:	10c5883a 	add	r2,r2,r3
    9370:	10800a04 	addi	r2,r2,40
    9374:	10800017 	ldw	r2,0(r2)
    9378:	1000071e 	bne	r2,zero,9398 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
    937c:	00800074 	movhi	r2,1
    9380:	10828104 	addi	r2,r2,2564
    9384:	10801317 	ldw	r2,76(r2)
    9388:	e0fffe17 	ldw	r3,-8(fp)
    938c:	1885883a 	add	r2,r3,r2
    9390:	e0bffe15 	stw	r2,-8(fp)
    9394:	00001406 	br	93e8 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
    9398:	00800074 	movhi	r2,1
    939c:	10828104 	addi	r2,r2,2564
    93a0:	10c01417 	ldw	r3,80(r2)
    93a4:	e0bffe17 	ldw	r2,-8(fp)
    93a8:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
    93ac:	e13fff0f 	ldh	r4,-4(fp)
    93b0:	00800074 	movhi	r2,1
    93b4:	10829604 	addi	r2,r2,2648
    93b8:	200891ba 	slli	r4,r4,6
    93bc:	1105883a 	add	r2,r2,r4
    93c0:	10800a04 	addi	r2,r2,40
    93c4:	10800017 	ldw	r2,0(r2)
    93c8:	113fff84 	addi	r4,r2,-2
    93cc:	00800074 	movhi	r2,1
    93d0:	10828104 	addi	r2,r2,2564
    93d4:	10800383 	ldbu	r2,14(r2)
    93d8:	10803fcc 	andi	r2,r2,255
    93dc:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
    93e0:	1885883a 	add	r2,r3,r2
    93e4:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
    93e8:	e0bffe17 	ldw	r2,-8(fp)
    93ec:	d0e72517 	ldw	r3,-25452(gp)
    93f0:	180b883a 	mov	r5,r3
    93f4:	1009883a 	mov	r4,r2
    93f8:	00052c40 	call	52c4 <Read_Sector_Data>
    93fc:	10001426 	beq	r2,zero,9450 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
    9400:	e0ffff0f 	ldh	r3,-4(fp)
    9404:	00800074 	movhi	r2,1
    9408:	10829604 	addi	r2,r2,2648
    940c:	180691ba 	slli	r3,r3,6
    9410:	10c5883a 	add	r2,r2,r3
    9414:	10800c04 	addi	r2,r2,48
    9418:	1080000b 	ldhu	r2,0(r2)
    941c:	113fffcc 	andi	r4,r2,65535
    9420:	2120001c 	xori	r4,r4,32768
    9424:	21200004 	addi	r4,r4,-32768
    9428:	e0bfff0f 	ldh	r2,-4(fp)
    942c:	100691ba 	slli	r3,r2,6
    9430:	00800074 	movhi	r2,1
    9434:	10829604 	addi	r2,r2,2648
    9438:	1885883a 	add	r2,r3,r2
    943c:	100b883a 	mov	r5,r2
    9440:	00059500 	call	5950 <Write_File_Record_At_Offset>
    9444:	10000226 	beq	r2,zero,9450 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
    9448:	00052780 	call	5278 <Save_Modified_Sector>
    944c:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
    9450:	e0ffff0f 	ldh	r3,-4(fp)
    9454:	00800074 	movhi	r2,1
    9458:	10829604 	addi	r2,r2,2648
    945c:	180691ba 	slli	r3,r3,6
    9460:	10c5883a 	add	r2,r2,r3
    9464:	10800f04 	addi	r2,r2,60
    9468:	10000015 	stw	zero,0(r2)
			result = true;
    946c:	00800044 	movi	r2,1
    9470:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
    9474:	e0bffd17 	ldw	r2,-12(fp)
}
    9478:	e037883a 	mov	sp,fp
    947c:	dfc00117 	ldw	ra,4(sp)
    9480:	df000017 	ldw	fp,0(sp)
    9484:	dec00204 	addi	sp,sp,8
    9488:	f800283a 	ret

0000948c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    948c:	defffa04 	addi	sp,sp,-24
    9490:	dfc00515 	stw	ra,20(sp)
    9494:	df000415 	stw	fp,16(sp)
    9498:	df000404 	addi	fp,sp,16
    949c:	e13ffd15 	stw	r4,-12(fp)
    94a0:	e17ffe15 	stw	r5,-8(fp)
    94a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    94a8:	e0bffd17 	ldw	r2,-12(fp)
    94ac:	10800017 	ldw	r2,0(r2)
    94b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    94b4:	e0bffc17 	ldw	r2,-16(fp)
    94b8:	10c00a04 	addi	r3,r2,40
    94bc:	e0bffd17 	ldw	r2,-12(fp)
    94c0:	10800217 	ldw	r2,8(r2)
    94c4:	100f883a 	mov	r7,r2
    94c8:	e1bfff17 	ldw	r6,-4(fp)
    94cc:	e17ffe17 	ldw	r5,-8(fp)
    94d0:	1809883a 	mov	r4,r3
    94d4:	0009ab40 	call	9ab4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    94d8:	e037883a 	mov	sp,fp
    94dc:	dfc00117 	ldw	ra,4(sp)
    94e0:	df000017 	ldw	fp,0(sp)
    94e4:	dec00204 	addi	sp,sp,8
    94e8:	f800283a 	ret

000094ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    94ec:	defffa04 	addi	sp,sp,-24
    94f0:	dfc00515 	stw	ra,20(sp)
    94f4:	df000415 	stw	fp,16(sp)
    94f8:	df000404 	addi	fp,sp,16
    94fc:	e13ffd15 	stw	r4,-12(fp)
    9500:	e17ffe15 	stw	r5,-8(fp)
    9504:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9508:	e0bffd17 	ldw	r2,-12(fp)
    950c:	10800017 	ldw	r2,0(r2)
    9510:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9514:	e0bffc17 	ldw	r2,-16(fp)
    9518:	10c00a04 	addi	r3,r2,40
    951c:	e0bffd17 	ldw	r2,-12(fp)
    9520:	10800217 	ldw	r2,8(r2)
    9524:	100f883a 	mov	r7,r2
    9528:	e1bfff17 	ldw	r6,-4(fp)
    952c:	e17ffe17 	ldw	r5,-8(fp)
    9530:	1809883a 	mov	r4,r3
    9534:	0009cd00 	call	9cd0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9538:	e037883a 	mov	sp,fp
    953c:	dfc00117 	ldw	ra,4(sp)
    9540:	df000017 	ldw	fp,0(sp)
    9544:	dec00204 	addi	sp,sp,8
    9548:	f800283a 	ret

0000954c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    954c:	defffc04 	addi	sp,sp,-16
    9550:	dfc00315 	stw	ra,12(sp)
    9554:	df000215 	stw	fp,8(sp)
    9558:	df000204 	addi	fp,sp,8
    955c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9560:	e0bfff17 	ldw	r2,-4(fp)
    9564:	10800017 	ldw	r2,0(r2)
    9568:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    956c:	e0bffe17 	ldw	r2,-8(fp)
    9570:	10c00a04 	addi	r3,r2,40
    9574:	e0bfff17 	ldw	r2,-4(fp)
    9578:	10800217 	ldw	r2,8(r2)
    957c:	100b883a 	mov	r5,r2
    9580:	1809883a 	mov	r4,r3
    9584:	000995c0 	call	995c <altera_avalon_jtag_uart_close>
}
    9588:	e037883a 	mov	sp,fp
    958c:	dfc00117 	ldw	ra,4(sp)
    9590:	df000017 	ldw	fp,0(sp)
    9594:	dec00204 	addi	sp,sp,8
    9598:	f800283a 	ret

0000959c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    959c:	defffa04 	addi	sp,sp,-24
    95a0:	dfc00515 	stw	ra,20(sp)
    95a4:	df000415 	stw	fp,16(sp)
    95a8:	df000404 	addi	fp,sp,16
    95ac:	e13ffd15 	stw	r4,-12(fp)
    95b0:	e17ffe15 	stw	r5,-8(fp)
    95b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    95b8:	e0bffd17 	ldw	r2,-12(fp)
    95bc:	10800017 	ldw	r2,0(r2)
    95c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    95c4:	e0bffc17 	ldw	r2,-16(fp)
    95c8:	10800a04 	addi	r2,r2,40
    95cc:	e1bfff17 	ldw	r6,-4(fp)
    95d0:	e17ffe17 	ldw	r5,-8(fp)
    95d4:	1009883a 	mov	r4,r2
    95d8:	00099c40 	call	99c4 <altera_avalon_jtag_uart_ioctl>
}
    95dc:	e037883a 	mov	sp,fp
    95e0:	dfc00117 	ldw	ra,4(sp)
    95e4:	df000017 	ldw	fp,0(sp)
    95e8:	dec00204 	addi	sp,sp,8
    95ec:	f800283a 	ret

000095f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    95f0:	defffa04 	addi	sp,sp,-24
    95f4:	dfc00515 	stw	ra,20(sp)
    95f8:	df000415 	stw	fp,16(sp)
    95fc:	df000404 	addi	fp,sp,16
    9600:	e13ffd15 	stw	r4,-12(fp)
    9604:	e17ffe15 	stw	r5,-8(fp)
    9608:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    960c:	e0bffd17 	ldw	r2,-12(fp)
    9610:	00c00044 	movi	r3,1
    9614:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    9618:	e0bffd17 	ldw	r2,-12(fp)
    961c:	10800017 	ldw	r2,0(r2)
    9620:	10800104 	addi	r2,r2,4
    9624:	1007883a 	mov	r3,r2
    9628:	e0bffd17 	ldw	r2,-12(fp)
    962c:	10800817 	ldw	r2,32(r2)
    9630:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    9634:	e0bffe17 	ldw	r2,-8(fp)
    9638:	e0ffff17 	ldw	r3,-4(fp)
    963c:	d8000015 	stw	zero,0(sp)
    9640:	e1fffd17 	ldw	r7,-12(fp)
    9644:	01800074 	movhi	r6,1
    9648:	31a5ac04 	addi	r6,r6,-26960
    964c:	180b883a 	mov	r5,r3
    9650:	1009883a 	mov	r4,r2
    9654:	00048640 	call	4864 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    9658:	e0bffd17 	ldw	r2,-12(fp)
    965c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    9660:	e0bffd17 	ldw	r2,-12(fp)
    9664:	10800204 	addi	r2,r2,8
    9668:	d0e71b17 	ldw	r3,-25492(gp)
    966c:	e1fffd17 	ldw	r7,-12(fp)
    9670:	01800074 	movhi	r6,1
    9674:	31a62f04 	addi	r6,r6,-26436
    9678:	180b883a 	mov	r5,r3
    967c:	1009883a 	mov	r4,r2
    9680:	000b7740 	call	b774 <alt_alarm_start>
    9684:	1000040e 	bge	r2,zero,9698 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    9688:	e0fffd17 	ldw	r3,-12(fp)
    968c:	00a00034 	movhi	r2,32768
    9690:	10bfffc4 	addi	r2,r2,-1
    9694:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    9698:	0001883a 	nop
    969c:	e037883a 	mov	sp,fp
    96a0:	dfc00117 	ldw	ra,4(sp)
    96a4:	df000017 	ldw	fp,0(sp)
    96a8:	dec00204 	addi	sp,sp,8
    96ac:	f800283a 	ret

000096b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    96b0:	defff804 	addi	sp,sp,-32
    96b4:	df000715 	stw	fp,28(sp)
    96b8:	df000704 	addi	fp,sp,28
    96bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    96c0:	e0bfff17 	ldw	r2,-4(fp)
    96c4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    96c8:	e0bffb17 	ldw	r2,-20(fp)
    96cc:	10800017 	ldw	r2,0(r2)
    96d0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    96d4:	e0bffc17 	ldw	r2,-16(fp)
    96d8:	10800104 	addi	r2,r2,4
    96dc:	10800037 	ldwio	r2,0(r2)
    96e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    96e4:	e0bffd17 	ldw	r2,-12(fp)
    96e8:	1080c00c 	andi	r2,r2,768
    96ec:	10006d26 	beq	r2,zero,98a4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    96f0:	e0bffd17 	ldw	r2,-12(fp)
    96f4:	1080400c 	andi	r2,r2,256
    96f8:	10003526 	beq	r2,zero,97d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    96fc:	00800074 	movhi	r2,1
    9700:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9704:	e0bffb17 	ldw	r2,-20(fp)
    9708:	10800a17 	ldw	r2,40(r2)
    970c:	10800044 	addi	r2,r2,1
    9710:	1081ffcc 	andi	r2,r2,2047
    9714:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    9718:	e0bffb17 	ldw	r2,-20(fp)
    971c:	10c00b17 	ldw	r3,44(r2)
    9720:	e0bffe17 	ldw	r2,-8(fp)
    9724:	18801526 	beq	r3,r2,977c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9728:	e0bffc17 	ldw	r2,-16(fp)
    972c:	10800037 	ldwio	r2,0(r2)
    9730:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    9734:	e0bff917 	ldw	r2,-28(fp)
    9738:	10a0000c 	andi	r2,r2,32768
    973c:	10001126 	beq	r2,zero,9784 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9740:	e0bffb17 	ldw	r2,-20(fp)
    9744:	10800a17 	ldw	r2,40(r2)
    9748:	e0fff917 	ldw	r3,-28(fp)
    974c:	1809883a 	mov	r4,r3
    9750:	e0fffb17 	ldw	r3,-20(fp)
    9754:	1885883a 	add	r2,r3,r2
    9758:	10800e04 	addi	r2,r2,56
    975c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9760:	e0bffb17 	ldw	r2,-20(fp)
    9764:	10800a17 	ldw	r2,40(r2)
    9768:	10800044 	addi	r2,r2,1
    976c:	10c1ffcc 	andi	r3,r2,2047
    9770:	e0bffb17 	ldw	r2,-20(fp)
    9774:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    9778:	003fe206 	br	9704 <__alt_data_end+0xf8009704>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    977c:	0001883a 	nop
    9780:	00000106 	br	9788 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    9784:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    9788:	e0bff917 	ldw	r2,-28(fp)
    978c:	10bfffec 	andhi	r2,r2,65535
    9790:	10000f26 	beq	r2,zero,97d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    9794:	e0bffb17 	ldw	r2,-20(fp)
    9798:	10c00817 	ldw	r3,32(r2)
    979c:	00bfff84 	movi	r2,-2
    97a0:	1886703a 	and	r3,r3,r2
    97a4:	e0bffb17 	ldw	r2,-20(fp)
    97a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    97ac:	e0bffc17 	ldw	r2,-16(fp)
    97b0:	10800104 	addi	r2,r2,4
    97b4:	1007883a 	mov	r3,r2
    97b8:	e0bffb17 	ldw	r2,-20(fp)
    97bc:	10800817 	ldw	r2,32(r2)
    97c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    97c4:	e0bffc17 	ldw	r2,-16(fp)
    97c8:	10800104 	addi	r2,r2,4
    97cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    97d0:	e0bffd17 	ldw	r2,-12(fp)
    97d4:	1080800c 	andi	r2,r2,512
    97d8:	103fbe26 	beq	r2,zero,96d4 <__alt_data_end+0xf80096d4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    97dc:	e0bffd17 	ldw	r2,-12(fp)
    97e0:	1004d43a 	srli	r2,r2,16
    97e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    97e8:	00001406 	br	983c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    97ec:	e0bffc17 	ldw	r2,-16(fp)
    97f0:	e0fffb17 	ldw	r3,-20(fp)
    97f4:	18c00d17 	ldw	r3,52(r3)
    97f8:	e13ffb17 	ldw	r4,-20(fp)
    97fc:	20c7883a 	add	r3,r4,r3
    9800:	18c20e04 	addi	r3,r3,2104
    9804:	18c00003 	ldbu	r3,0(r3)
    9808:	18c03fcc 	andi	r3,r3,255
    980c:	18c0201c 	xori	r3,r3,128
    9810:	18ffe004 	addi	r3,r3,-128
    9814:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9818:	e0bffb17 	ldw	r2,-20(fp)
    981c:	10800d17 	ldw	r2,52(r2)
    9820:	10800044 	addi	r2,r2,1
    9824:	10c1ffcc 	andi	r3,r2,2047
    9828:	e0bffb17 	ldw	r2,-20(fp)
    982c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    9830:	e0bffa17 	ldw	r2,-24(fp)
    9834:	10bfffc4 	addi	r2,r2,-1
    9838:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    983c:	e0bffa17 	ldw	r2,-24(fp)
    9840:	10000526 	beq	r2,zero,9858 <altera_avalon_jtag_uart_irq+0x1a8>
    9844:	e0bffb17 	ldw	r2,-20(fp)
    9848:	10c00d17 	ldw	r3,52(r2)
    984c:	e0bffb17 	ldw	r2,-20(fp)
    9850:	10800c17 	ldw	r2,48(r2)
    9854:	18bfe51e 	bne	r3,r2,97ec <__alt_data_end+0xf80097ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    9858:	e0bffa17 	ldw	r2,-24(fp)
    985c:	103f9d26 	beq	r2,zero,96d4 <__alt_data_end+0xf80096d4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    9860:	e0bffb17 	ldw	r2,-20(fp)
    9864:	10c00817 	ldw	r3,32(r2)
    9868:	00bfff44 	movi	r2,-3
    986c:	1886703a 	and	r3,r3,r2
    9870:	e0bffb17 	ldw	r2,-20(fp)
    9874:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9878:	e0bffb17 	ldw	r2,-20(fp)
    987c:	10800017 	ldw	r2,0(r2)
    9880:	10800104 	addi	r2,r2,4
    9884:	1007883a 	mov	r3,r2
    9888:	e0bffb17 	ldw	r2,-20(fp)
    988c:	10800817 	ldw	r2,32(r2)
    9890:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    9894:	e0bffc17 	ldw	r2,-16(fp)
    9898:	10800104 	addi	r2,r2,4
    989c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    98a0:	003f8c06 	br	96d4 <__alt_data_end+0xf80096d4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    98a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    98a8:	0001883a 	nop
    98ac:	e037883a 	mov	sp,fp
    98b0:	df000017 	ldw	fp,0(sp)
    98b4:	dec00104 	addi	sp,sp,4
    98b8:	f800283a 	ret

000098bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    98bc:	defff804 	addi	sp,sp,-32
    98c0:	df000715 	stw	fp,28(sp)
    98c4:	df000704 	addi	fp,sp,28
    98c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    98cc:	e0bffb17 	ldw	r2,-20(fp)
    98d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    98d4:	e0bff917 	ldw	r2,-28(fp)
    98d8:	10800017 	ldw	r2,0(r2)
    98dc:	10800104 	addi	r2,r2,4
    98e0:	10800037 	ldwio	r2,0(r2)
    98e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    98e8:	e0bffa17 	ldw	r2,-24(fp)
    98ec:	1081000c 	andi	r2,r2,1024
    98f0:	10000b26 	beq	r2,zero,9920 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    98f4:	e0bff917 	ldw	r2,-28(fp)
    98f8:	10800017 	ldw	r2,0(r2)
    98fc:	10800104 	addi	r2,r2,4
    9900:	1007883a 	mov	r3,r2
    9904:	e0bff917 	ldw	r2,-28(fp)
    9908:	10800817 	ldw	r2,32(r2)
    990c:	10810014 	ori	r2,r2,1024
    9910:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    9914:	e0bff917 	ldw	r2,-28(fp)
    9918:	10000915 	stw	zero,36(r2)
    991c:	00000a06 	br	9948 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    9920:	e0bff917 	ldw	r2,-28(fp)
    9924:	10c00917 	ldw	r3,36(r2)
    9928:	00a00034 	movhi	r2,32768
    992c:	10bfff04 	addi	r2,r2,-4
    9930:	10c00536 	bltu	r2,r3,9948 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    9934:	e0bff917 	ldw	r2,-28(fp)
    9938:	10800917 	ldw	r2,36(r2)
    993c:	10c00044 	addi	r3,r2,1
    9940:	e0bff917 	ldw	r2,-28(fp)
    9944:	10c00915 	stw	r3,36(r2)
    9948:	d0a71b17 	ldw	r2,-25492(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    994c:	e037883a 	mov	sp,fp
    9950:	df000017 	ldw	fp,0(sp)
    9954:	dec00104 	addi	sp,sp,4
    9958:	f800283a 	ret

0000995c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    995c:	defffd04 	addi	sp,sp,-12
    9960:	df000215 	stw	fp,8(sp)
    9964:	df000204 	addi	fp,sp,8
    9968:	e13ffe15 	stw	r4,-8(fp)
    996c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9970:	00000506 	br	9988 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    9974:	e0bfff17 	ldw	r2,-4(fp)
    9978:	1090000c 	andi	r2,r2,16384
    997c:	10000226 	beq	r2,zero,9988 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    9980:	00bffd44 	movi	r2,-11
    9984:	00000b06 	br	99b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    9988:	e0bffe17 	ldw	r2,-8(fp)
    998c:	10c00d17 	ldw	r3,52(r2)
    9990:	e0bffe17 	ldw	r2,-8(fp)
    9994:	10800c17 	ldw	r2,48(r2)
    9998:	18800526 	beq	r3,r2,99b0 <altera_avalon_jtag_uart_close+0x54>
    999c:	e0bffe17 	ldw	r2,-8(fp)
    99a0:	10c00917 	ldw	r3,36(r2)
    99a4:	e0bffe17 	ldw	r2,-8(fp)
    99a8:	10800117 	ldw	r2,4(r2)
    99ac:	18bff136 	bltu	r3,r2,9974 <__alt_data_end+0xf8009974>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    99b0:	0005883a 	mov	r2,zero
}
    99b4:	e037883a 	mov	sp,fp
    99b8:	df000017 	ldw	fp,0(sp)
    99bc:	dec00104 	addi	sp,sp,4
    99c0:	f800283a 	ret

000099c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    99c4:	defffa04 	addi	sp,sp,-24
    99c8:	df000515 	stw	fp,20(sp)
    99cc:	df000504 	addi	fp,sp,20
    99d0:	e13ffd15 	stw	r4,-12(fp)
    99d4:	e17ffe15 	stw	r5,-8(fp)
    99d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    99dc:	00bff9c4 	movi	r2,-25
    99e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    99e4:	e0bffe17 	ldw	r2,-8(fp)
    99e8:	10da8060 	cmpeqi	r3,r2,27137
    99ec:	1800031e 	bne	r3,zero,99fc <altera_avalon_jtag_uart_ioctl+0x38>
    99f0:	109a80a0 	cmpeqi	r2,r2,27138
    99f4:	1000181e 	bne	r2,zero,9a58 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    99f8:	00002906 	br	9aa0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    99fc:	e0bffd17 	ldw	r2,-12(fp)
    9a00:	10c00117 	ldw	r3,4(r2)
    9a04:	00a00034 	movhi	r2,32768
    9a08:	10bfffc4 	addi	r2,r2,-1
    9a0c:	18802126 	beq	r3,r2,9a94 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    9a10:	e0bfff17 	ldw	r2,-4(fp)
    9a14:	10800017 	ldw	r2,0(r2)
    9a18:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    9a1c:	e0bffc17 	ldw	r2,-16(fp)
    9a20:	10800090 	cmplti	r2,r2,2
    9a24:	1000061e 	bne	r2,zero,9a40 <altera_avalon_jtag_uart_ioctl+0x7c>
    9a28:	e0fffc17 	ldw	r3,-16(fp)
    9a2c:	00a00034 	movhi	r2,32768
    9a30:	10bfffc4 	addi	r2,r2,-1
    9a34:	18800226 	beq	r3,r2,9a40 <altera_avalon_jtag_uart_ioctl+0x7c>
    9a38:	e0bffc17 	ldw	r2,-16(fp)
    9a3c:	00000206 	br	9a48 <altera_avalon_jtag_uart_ioctl+0x84>
    9a40:	00a00034 	movhi	r2,32768
    9a44:	10bfff84 	addi	r2,r2,-2
    9a48:	e0fffd17 	ldw	r3,-12(fp)
    9a4c:	18800115 	stw	r2,4(r3)
      rc = 0;
    9a50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    9a54:	00000f06 	br	9a94 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    9a58:	e0bffd17 	ldw	r2,-12(fp)
    9a5c:	10c00117 	ldw	r3,4(r2)
    9a60:	00a00034 	movhi	r2,32768
    9a64:	10bfffc4 	addi	r2,r2,-1
    9a68:	18800c26 	beq	r3,r2,9a9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    9a6c:	e0bffd17 	ldw	r2,-12(fp)
    9a70:	10c00917 	ldw	r3,36(r2)
    9a74:	e0bffd17 	ldw	r2,-12(fp)
    9a78:	10800117 	ldw	r2,4(r2)
    9a7c:	1885803a 	cmpltu	r2,r3,r2
    9a80:	10c03fcc 	andi	r3,r2,255
    9a84:	e0bfff17 	ldw	r2,-4(fp)
    9a88:	10c00015 	stw	r3,0(r2)
      rc = 0;
    9a8c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    9a90:	00000206 	br	9a9c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    9a94:	0001883a 	nop
    9a98:	00000106 	br	9aa0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    9a9c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    9aa0:	e0bffb17 	ldw	r2,-20(fp)
}
    9aa4:	e037883a 	mov	sp,fp
    9aa8:	df000017 	ldw	fp,0(sp)
    9aac:	dec00104 	addi	sp,sp,4
    9ab0:	f800283a 	ret

00009ab4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    9ab4:	defff304 	addi	sp,sp,-52
    9ab8:	dfc00c15 	stw	ra,48(sp)
    9abc:	df000b15 	stw	fp,44(sp)
    9ac0:	df000b04 	addi	fp,sp,44
    9ac4:	e13ffc15 	stw	r4,-16(fp)
    9ac8:	e17ffd15 	stw	r5,-12(fp)
    9acc:	e1bffe15 	stw	r6,-8(fp)
    9ad0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    9ad4:	e0bffd17 	ldw	r2,-12(fp)
    9ad8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    9adc:	00004706 	br	9bfc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    9ae0:	e0bffc17 	ldw	r2,-16(fp)
    9ae4:	10800a17 	ldw	r2,40(r2)
    9ae8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    9aec:	e0bffc17 	ldw	r2,-16(fp)
    9af0:	10800b17 	ldw	r2,44(r2)
    9af4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    9af8:	e0fff717 	ldw	r3,-36(fp)
    9afc:	e0bff817 	ldw	r2,-32(fp)
    9b00:	18800536 	bltu	r3,r2,9b18 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    9b04:	e0fff717 	ldw	r3,-36(fp)
    9b08:	e0bff817 	ldw	r2,-32(fp)
    9b0c:	1885c83a 	sub	r2,r3,r2
    9b10:	e0bff615 	stw	r2,-40(fp)
    9b14:	00000406 	br	9b28 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    9b18:	00c20004 	movi	r3,2048
    9b1c:	e0bff817 	ldw	r2,-32(fp)
    9b20:	1885c83a 	sub	r2,r3,r2
    9b24:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    9b28:	e0bff617 	ldw	r2,-40(fp)
    9b2c:	10001e26 	beq	r2,zero,9ba8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    9b30:	e0fffe17 	ldw	r3,-8(fp)
    9b34:	e0bff617 	ldw	r2,-40(fp)
    9b38:	1880022e 	bgeu	r3,r2,9b44 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    9b3c:	e0bffe17 	ldw	r2,-8(fp)
    9b40:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    9b44:	e0bffc17 	ldw	r2,-16(fp)
    9b48:	10c00e04 	addi	r3,r2,56
    9b4c:	e0bff817 	ldw	r2,-32(fp)
    9b50:	1885883a 	add	r2,r3,r2
    9b54:	e1bff617 	ldw	r6,-40(fp)
    9b58:	100b883a 	mov	r5,r2
    9b5c:	e13ff517 	ldw	r4,-44(fp)
    9b60:	000c3a40 	call	c3a4 <memcpy>
      ptr   += n;
    9b64:	e0fff517 	ldw	r3,-44(fp)
    9b68:	e0bff617 	ldw	r2,-40(fp)
    9b6c:	1885883a 	add	r2,r3,r2
    9b70:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    9b74:	e0fffe17 	ldw	r3,-8(fp)
    9b78:	e0bff617 	ldw	r2,-40(fp)
    9b7c:	1885c83a 	sub	r2,r3,r2
    9b80:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9b84:	e0fff817 	ldw	r3,-32(fp)
    9b88:	e0bff617 	ldw	r2,-40(fp)
    9b8c:	1885883a 	add	r2,r3,r2
    9b90:	10c1ffcc 	andi	r3,r2,2047
    9b94:	e0bffc17 	ldw	r2,-16(fp)
    9b98:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    9b9c:	e0bffe17 	ldw	r2,-8(fp)
    9ba0:	00bfcf16 	blt	zero,r2,9ae0 <__alt_data_end+0xf8009ae0>
    9ba4:	00000106 	br	9bac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    9ba8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    9bac:	e0fff517 	ldw	r3,-44(fp)
    9bb0:	e0bffd17 	ldw	r2,-12(fp)
    9bb4:	1880141e 	bne	r3,r2,9c08 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    9bb8:	e0bfff17 	ldw	r2,-4(fp)
    9bbc:	1090000c 	andi	r2,r2,16384
    9bc0:	1000131e 	bne	r2,zero,9c10 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    9bc4:	0001883a 	nop
    9bc8:	e0bffc17 	ldw	r2,-16(fp)
    9bcc:	10c00a17 	ldw	r3,40(r2)
    9bd0:	e0bff717 	ldw	r2,-36(fp)
    9bd4:	1880051e 	bne	r3,r2,9bec <altera_avalon_jtag_uart_read+0x138>
    9bd8:	e0bffc17 	ldw	r2,-16(fp)
    9bdc:	10c00917 	ldw	r3,36(r2)
    9be0:	e0bffc17 	ldw	r2,-16(fp)
    9be4:	10800117 	ldw	r2,4(r2)
    9be8:	18bff736 	bltu	r3,r2,9bc8 <__alt_data_end+0xf8009bc8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    9bec:	e0bffc17 	ldw	r2,-16(fp)
    9bf0:	10c00a17 	ldw	r3,40(r2)
    9bf4:	e0bff717 	ldw	r2,-36(fp)
    9bf8:	18800726 	beq	r3,r2,9c18 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    9bfc:	e0bffe17 	ldw	r2,-8(fp)
    9c00:	00bfb716 	blt	zero,r2,9ae0 <__alt_data_end+0xf8009ae0>
    9c04:	00000506 	br	9c1c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    9c08:	0001883a 	nop
    9c0c:	00000306 	br	9c1c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    9c10:	0001883a 	nop
    9c14:	00000106 	br	9c1c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    9c18:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    9c1c:	e0fff517 	ldw	r3,-44(fp)
    9c20:	e0bffd17 	ldw	r2,-12(fp)
    9c24:	18801826 	beq	r3,r2,9c88 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c28:	0005303a 	rdctl	r2,status
    9c2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c30:	e0fffb17 	ldw	r3,-20(fp)
    9c34:	00bfff84 	movi	r2,-2
    9c38:	1884703a 	and	r2,r3,r2
    9c3c:	1001703a 	wrctl	status,r2
  
  return context;
    9c40:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    9c44:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    9c48:	e0bffc17 	ldw	r2,-16(fp)
    9c4c:	10800817 	ldw	r2,32(r2)
    9c50:	10c00054 	ori	r3,r2,1
    9c54:	e0bffc17 	ldw	r2,-16(fp)
    9c58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9c5c:	e0bffc17 	ldw	r2,-16(fp)
    9c60:	10800017 	ldw	r2,0(r2)
    9c64:	10800104 	addi	r2,r2,4
    9c68:	1007883a 	mov	r3,r2
    9c6c:	e0bffc17 	ldw	r2,-16(fp)
    9c70:	10800817 	ldw	r2,32(r2)
    9c74:	18800035 	stwio	r2,0(r3)
    9c78:	e0bffa17 	ldw	r2,-24(fp)
    9c7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c80:	e0bff917 	ldw	r2,-28(fp)
    9c84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    9c88:	e0fff517 	ldw	r3,-44(fp)
    9c8c:	e0bffd17 	ldw	r2,-12(fp)
    9c90:	18800426 	beq	r3,r2,9ca4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    9c94:	e0fff517 	ldw	r3,-44(fp)
    9c98:	e0bffd17 	ldw	r2,-12(fp)
    9c9c:	1885c83a 	sub	r2,r3,r2
    9ca0:	00000606 	br	9cbc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    9ca4:	e0bfff17 	ldw	r2,-4(fp)
    9ca8:	1090000c 	andi	r2,r2,16384
    9cac:	10000226 	beq	r2,zero,9cb8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    9cb0:	00bffd44 	movi	r2,-11
    9cb4:	00000106 	br	9cbc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    9cb8:	00bffec4 	movi	r2,-5
}
    9cbc:	e037883a 	mov	sp,fp
    9cc0:	dfc00117 	ldw	ra,4(sp)
    9cc4:	df000017 	ldw	fp,0(sp)
    9cc8:	dec00204 	addi	sp,sp,8
    9ccc:	f800283a 	ret

00009cd0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9cd0:	defff304 	addi	sp,sp,-52
    9cd4:	dfc00c15 	stw	ra,48(sp)
    9cd8:	df000b15 	stw	fp,44(sp)
    9cdc:	df000b04 	addi	fp,sp,44
    9ce0:	e13ffc15 	stw	r4,-16(fp)
    9ce4:	e17ffd15 	stw	r5,-12(fp)
    9ce8:	e1bffe15 	stw	r6,-8(fp)
    9cec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    9cf0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    9cf4:	e0bffd17 	ldw	r2,-12(fp)
    9cf8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9cfc:	00003706 	br	9ddc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    9d00:	e0bffc17 	ldw	r2,-16(fp)
    9d04:	10800c17 	ldw	r2,48(r2)
    9d08:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    9d0c:	e0bffc17 	ldw	r2,-16(fp)
    9d10:	10800d17 	ldw	r2,52(r2)
    9d14:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    9d18:	e0fff917 	ldw	r3,-28(fp)
    9d1c:	e0bff517 	ldw	r2,-44(fp)
    9d20:	1880062e 	bgeu	r3,r2,9d3c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    9d24:	e0fff517 	ldw	r3,-44(fp)
    9d28:	e0bff917 	ldw	r2,-28(fp)
    9d2c:	1885c83a 	sub	r2,r3,r2
    9d30:	10bfffc4 	addi	r2,r2,-1
    9d34:	e0bff615 	stw	r2,-40(fp)
    9d38:	00000b06 	br	9d68 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    9d3c:	e0bff517 	ldw	r2,-44(fp)
    9d40:	10000526 	beq	r2,zero,9d58 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    9d44:	00c20004 	movi	r3,2048
    9d48:	e0bff917 	ldw	r2,-28(fp)
    9d4c:	1885c83a 	sub	r2,r3,r2
    9d50:	e0bff615 	stw	r2,-40(fp)
    9d54:	00000406 	br	9d68 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    9d58:	00c1ffc4 	movi	r3,2047
    9d5c:	e0bff917 	ldw	r2,-28(fp)
    9d60:	1885c83a 	sub	r2,r3,r2
    9d64:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    9d68:	e0bff617 	ldw	r2,-40(fp)
    9d6c:	10001e26 	beq	r2,zero,9de8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    9d70:	e0fffe17 	ldw	r3,-8(fp)
    9d74:	e0bff617 	ldw	r2,-40(fp)
    9d78:	1880022e 	bgeu	r3,r2,9d84 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    9d7c:	e0bffe17 	ldw	r2,-8(fp)
    9d80:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    9d84:	e0bffc17 	ldw	r2,-16(fp)
    9d88:	10c20e04 	addi	r3,r2,2104
    9d8c:	e0bff917 	ldw	r2,-28(fp)
    9d90:	1885883a 	add	r2,r3,r2
    9d94:	e1bff617 	ldw	r6,-40(fp)
    9d98:	e17ffd17 	ldw	r5,-12(fp)
    9d9c:	1009883a 	mov	r4,r2
    9da0:	000c3a40 	call	c3a4 <memcpy>
      ptr   += n;
    9da4:	e0fffd17 	ldw	r3,-12(fp)
    9da8:	e0bff617 	ldw	r2,-40(fp)
    9dac:	1885883a 	add	r2,r3,r2
    9db0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    9db4:	e0fffe17 	ldw	r3,-8(fp)
    9db8:	e0bff617 	ldw	r2,-40(fp)
    9dbc:	1885c83a 	sub	r2,r3,r2
    9dc0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    9dc4:	e0fff917 	ldw	r3,-28(fp)
    9dc8:	e0bff617 	ldw	r2,-40(fp)
    9dcc:	1885883a 	add	r2,r3,r2
    9dd0:	10c1ffcc 	andi	r3,r2,2047
    9dd4:	e0bffc17 	ldw	r2,-16(fp)
    9dd8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    9ddc:	e0bffe17 	ldw	r2,-8(fp)
    9de0:	00bfc716 	blt	zero,r2,9d00 <__alt_data_end+0xf8009d00>
    9de4:	00000106 	br	9dec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    9de8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9dec:	0005303a 	rdctl	r2,status
    9df0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9df4:	e0fffb17 	ldw	r3,-20(fp)
    9df8:	00bfff84 	movi	r2,-2
    9dfc:	1884703a 	and	r2,r3,r2
    9e00:	1001703a 	wrctl	status,r2
  
  return context;
    9e04:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    9e08:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    9e0c:	e0bffc17 	ldw	r2,-16(fp)
    9e10:	10800817 	ldw	r2,32(r2)
    9e14:	10c00094 	ori	r3,r2,2
    9e18:	e0bffc17 	ldw	r2,-16(fp)
    9e1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    9e20:	e0bffc17 	ldw	r2,-16(fp)
    9e24:	10800017 	ldw	r2,0(r2)
    9e28:	10800104 	addi	r2,r2,4
    9e2c:	1007883a 	mov	r3,r2
    9e30:	e0bffc17 	ldw	r2,-16(fp)
    9e34:	10800817 	ldw	r2,32(r2)
    9e38:	18800035 	stwio	r2,0(r3)
    9e3c:	e0bffa17 	ldw	r2,-24(fp)
    9e40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9e44:	e0bff817 	ldw	r2,-32(fp)
    9e48:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    9e4c:	e0bffe17 	ldw	r2,-8(fp)
    9e50:	0080100e 	bge	zero,r2,9e94 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    9e54:	e0bfff17 	ldw	r2,-4(fp)
    9e58:	1090000c 	andi	r2,r2,16384
    9e5c:	1000101e 	bne	r2,zero,9ea0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    9e60:	0001883a 	nop
    9e64:	e0bffc17 	ldw	r2,-16(fp)
    9e68:	10c00d17 	ldw	r3,52(r2)
    9e6c:	e0bff517 	ldw	r2,-44(fp)
    9e70:	1880051e 	bne	r3,r2,9e88 <altera_avalon_jtag_uart_write+0x1b8>
    9e74:	e0bffc17 	ldw	r2,-16(fp)
    9e78:	10c00917 	ldw	r3,36(r2)
    9e7c:	e0bffc17 	ldw	r2,-16(fp)
    9e80:	10800117 	ldw	r2,4(r2)
    9e84:	18bff736 	bltu	r3,r2,9e64 <__alt_data_end+0xf8009e64>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    9e88:	e0bffc17 	ldw	r2,-16(fp)
    9e8c:	10800917 	ldw	r2,36(r2)
    9e90:	1000051e 	bne	r2,zero,9ea8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    9e94:	e0bffe17 	ldw	r2,-8(fp)
    9e98:	00bfd016 	blt	zero,r2,9ddc <__alt_data_end+0xf8009ddc>
    9e9c:	00000306 	br	9eac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    9ea0:	0001883a 	nop
    9ea4:	00000106 	br	9eac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    9ea8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    9eac:	e0fffd17 	ldw	r3,-12(fp)
    9eb0:	e0bff717 	ldw	r2,-36(fp)
    9eb4:	18800426 	beq	r3,r2,9ec8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    9eb8:	e0fffd17 	ldw	r3,-12(fp)
    9ebc:	e0bff717 	ldw	r2,-36(fp)
    9ec0:	1885c83a 	sub	r2,r3,r2
    9ec4:	00000606 	br	9ee0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    9ec8:	e0bfff17 	ldw	r2,-4(fp)
    9ecc:	1090000c 	andi	r2,r2,16384
    9ed0:	10000226 	beq	r2,zero,9edc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    9ed4:	00bffd44 	movi	r2,-11
    9ed8:	00000106 	br	9ee0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    9edc:	00bffec4 	movi	r2,-5
}
    9ee0:	e037883a 	mov	sp,fp
    9ee4:	dfc00117 	ldw	ra,4(sp)
    9ee8:	df000017 	ldw	fp,0(sp)
    9eec:	dec00204 	addi	sp,sp,8
    9ef0:	f800283a 	ret

00009ef4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9ef4:	defffa04 	addi	sp,sp,-24
    9ef8:	dfc00515 	stw	ra,20(sp)
    9efc:	df000415 	stw	fp,16(sp)
    9f00:	df000404 	addi	fp,sp,16
    9f04:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9f08:	0007883a 	mov	r3,zero
    9f0c:	e0bfff17 	ldw	r2,-4(fp)
    9f10:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9f14:	e0bfff17 	ldw	r2,-4(fp)
    9f18:	10800104 	addi	r2,r2,4
    9f1c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f20:	0005303a 	rdctl	r2,status
    9f24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f28:	e0fffd17 	ldw	r3,-12(fp)
    9f2c:	00bfff84 	movi	r2,-2
    9f30:	1884703a 	and	r2,r3,r2
    9f34:	1001703a 	wrctl	status,r2
  
  return context;
    9f38:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    9f3c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9f40:	0004d080 	call	4d08 <alt_tick>
    9f44:	e0bffc17 	ldw	r2,-16(fp)
    9f48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f4c:	e0bffe17 	ldw	r2,-8(fp)
    9f50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9f54:	0001883a 	nop
    9f58:	e037883a 	mov	sp,fp
    9f5c:	dfc00117 	ldw	ra,4(sp)
    9f60:	df000017 	ldw	fp,0(sp)
    9f64:	dec00204 	addi	sp,sp,8
    9f68:	f800283a 	ret

00009f6c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9f6c:	defff804 	addi	sp,sp,-32
    9f70:	dfc00715 	stw	ra,28(sp)
    9f74:	df000615 	stw	fp,24(sp)
    9f78:	df000604 	addi	fp,sp,24
    9f7c:	e13ffc15 	stw	r4,-16(fp)
    9f80:	e17ffd15 	stw	r5,-12(fp)
    9f84:	e1bffe15 	stw	r6,-8(fp)
    9f88:	e1ffff15 	stw	r7,-4(fp)
    9f8c:	e0bfff17 	ldw	r2,-4(fp)
    9f90:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9f94:	d0a71b17 	ldw	r2,-25492(gp)
    9f98:	1000021e 	bne	r2,zero,9fa4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    9f9c:	e0bffb17 	ldw	r2,-20(fp)
    9fa0:	d0a71b15 	stw	r2,-25492(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9fa4:	e0bffc17 	ldw	r2,-16(fp)
    9fa8:	10800104 	addi	r2,r2,4
    9fac:	00c001c4 	movi	r3,7
    9fb0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9fb4:	d8000015 	stw	zero,0(sp)
    9fb8:	e1fffc17 	ldw	r7,-16(fp)
    9fbc:	01800074 	movhi	r6,1
    9fc0:	31a7bd04 	addi	r6,r6,-24844
    9fc4:	e17ffe17 	ldw	r5,-8(fp)
    9fc8:	e13ffd17 	ldw	r4,-12(fp)
    9fcc:	00048640 	call	4864 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9fd0:	0001883a 	nop
    9fd4:	e037883a 	mov	sp,fp
    9fd8:	dfc00117 	ldw	ra,4(sp)
    9fdc:	df000017 	ldw	fp,0(sp)
    9fe0:	dec00204 	addi	sp,sp,8
    9fe4:	f800283a 	ret

00009fe8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9fe8:	defffa04 	addi	sp,sp,-24
    9fec:	dfc00515 	stw	ra,20(sp)
    9ff0:	df000415 	stw	fp,16(sp)
    9ff4:	df000404 	addi	fp,sp,16
    9ff8:	e13ffd15 	stw	r4,-12(fp)
    9ffc:	e17ffe15 	stw	r5,-8(fp)
    a000:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    a004:	e0bffd17 	ldw	r2,-12(fp)
    a008:	10800017 	ldw	r2,0(r2)
    a00c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    a010:	e0bffc17 	ldw	r2,-16(fp)
    a014:	10c00a04 	addi	r3,r2,40
    a018:	e0bffd17 	ldw	r2,-12(fp)
    a01c:	10800217 	ldw	r2,8(r2)
    a020:	100f883a 	mov	r7,r2
    a024:	e1bfff17 	ldw	r6,-4(fp)
    a028:	e17ffe17 	ldw	r5,-8(fp)
    a02c:	1809883a 	mov	r4,r3
    a030:	000a4fc0 	call	a4fc <altera_avalon_uart_read>
      fd->fd_flags);
}
    a034:	e037883a 	mov	sp,fp
    a038:	dfc00117 	ldw	ra,4(sp)
    a03c:	df000017 	ldw	fp,0(sp)
    a040:	dec00204 	addi	sp,sp,8
    a044:	f800283a 	ret

0000a048 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a048:	defffa04 	addi	sp,sp,-24
    a04c:	dfc00515 	stw	ra,20(sp)
    a050:	df000415 	stw	fp,16(sp)
    a054:	df000404 	addi	fp,sp,16
    a058:	e13ffd15 	stw	r4,-12(fp)
    a05c:	e17ffe15 	stw	r5,-8(fp)
    a060:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    a064:	e0bffd17 	ldw	r2,-12(fp)
    a068:	10800017 	ldw	r2,0(r2)
    a06c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    a070:	e0bffc17 	ldw	r2,-16(fp)
    a074:	10c00a04 	addi	r3,r2,40
    a078:	e0bffd17 	ldw	r2,-12(fp)
    a07c:	10800217 	ldw	r2,8(r2)
    a080:	100f883a 	mov	r7,r2
    a084:	e1bfff17 	ldw	r6,-4(fp)
    a088:	e17ffe17 	ldw	r5,-8(fp)
    a08c:	1809883a 	mov	r4,r3
    a090:	000a7140 	call	a714 <altera_avalon_uart_write>
      fd->fd_flags);
}
    a094:	e037883a 	mov	sp,fp
    a098:	dfc00117 	ldw	ra,4(sp)
    a09c:	df000017 	ldw	fp,0(sp)
    a0a0:	dec00204 	addi	sp,sp,8
    a0a4:	f800283a 	ret

0000a0a8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    a0a8:	defffc04 	addi	sp,sp,-16
    a0ac:	dfc00315 	stw	ra,12(sp)
    a0b0:	df000215 	stw	fp,8(sp)
    a0b4:	df000204 	addi	fp,sp,8
    a0b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    a0bc:	e0bfff17 	ldw	r2,-4(fp)
    a0c0:	10800017 	ldw	r2,0(r2)
    a0c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    a0c8:	e0bffe17 	ldw	r2,-8(fp)
    a0cc:	10c00a04 	addi	r3,r2,40
    a0d0:	e0bfff17 	ldw	r2,-4(fp)
    a0d4:	10800217 	ldw	r2,8(r2)
    a0d8:	100b883a 	mov	r5,r2
    a0dc:	1809883a 	mov	r4,r3
    a0e0:	000a46c0 	call	a46c <altera_avalon_uart_close>
}
    a0e4:	e037883a 	mov	sp,fp
    a0e8:	dfc00117 	ldw	ra,4(sp)
    a0ec:	df000017 	ldw	fp,0(sp)
    a0f0:	dec00204 	addi	sp,sp,8
    a0f4:	f800283a 	ret

0000a0f8 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    a0f8:	defff804 	addi	sp,sp,-32
    a0fc:	dfc00715 	stw	ra,28(sp)
    a100:	df000615 	stw	fp,24(sp)
    a104:	df000604 	addi	fp,sp,24
    a108:	e13ffd15 	stw	r4,-12(fp)
    a10c:	e17ffe15 	stw	r5,-8(fp)
    a110:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
    a114:	e0bffd17 	ldw	r2,-12(fp)
    a118:	10800017 	ldw	r2,0(r2)
    a11c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    a120:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    a124:	1000041e 	bne	r2,zero,a138 <altera_avalon_uart_init+0x40>
    a128:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    a12c:	1000021e 	bne	r2,zero,a138 <altera_avalon_uart_init+0x40>
    a130:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    a134:	10000226 	beq	r2,zero,a140 <altera_avalon_uart_init+0x48>
    a138:	00800044 	movi	r2,1
    a13c:	00000106 	br	a144 <altera_avalon_uart_init+0x4c>
    a140:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    a144:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    a148:	e0bffc17 	ldw	r2,-16(fp)
    a14c:	10000f1e 	bne	r2,zero,a18c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    a150:	e0bffd17 	ldw	r2,-12(fp)
    a154:	00c32004 	movi	r3,3200
    a158:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    a15c:	e0bffb17 	ldw	r2,-20(fp)
    a160:	10800304 	addi	r2,r2,12
    a164:	e0fffd17 	ldw	r3,-12(fp)
    a168:	18c00117 	ldw	r3,4(r3)
    a16c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    a170:	d8000015 	stw	zero,0(sp)
    a174:	e1fffd17 	ldw	r7,-12(fp)
    a178:	01800074 	movhi	r6,1
    a17c:	31a86904 	addi	r6,r6,-24156
    a180:	e17fff17 	ldw	r5,-4(fp)
    a184:	e13ffe17 	ldw	r4,-8(fp)
    a188:	00048640 	call	4864 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    a18c:	0001883a 	nop
    a190:	e037883a 	mov	sp,fp
    a194:	dfc00117 	ldw	ra,4(sp)
    a198:	df000017 	ldw	fp,0(sp)
    a19c:	dec00204 	addi	sp,sp,8
    a1a0:	f800283a 	ret

0000a1a4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    a1a4:	defffa04 	addi	sp,sp,-24
    a1a8:	dfc00515 	stw	ra,20(sp)
    a1ac:	df000415 	stw	fp,16(sp)
    a1b0:	df000404 	addi	fp,sp,16
    a1b4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    a1b8:	e0bfff17 	ldw	r2,-4(fp)
    a1bc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
    a1c0:	e0bffc17 	ldw	r2,-16(fp)
    a1c4:	10800017 	ldw	r2,0(r2)
    a1c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    a1cc:	e0bffd17 	ldw	r2,-12(fp)
    a1d0:	10800204 	addi	r2,r2,8
    a1d4:	10800037 	ldwio	r2,0(r2)
    a1d8:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    a1dc:	e0bffd17 	ldw	r2,-12(fp)
    a1e0:	10800204 	addi	r2,r2,8
    a1e4:	0007883a 	mov	r3,zero
    a1e8:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    a1ec:	e0bffd17 	ldw	r2,-12(fp)
    a1f0:	10800204 	addi	r2,r2,8
    a1f4:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    a1f8:	e0bffe17 	ldw	r2,-8(fp)
    a1fc:	1080200c 	andi	r2,r2,128
    a200:	10000326 	beq	r2,zero,a210 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    a204:	e17ffe17 	ldw	r5,-8(fp)
    a208:	e13ffc17 	ldw	r4,-16(fp)
    a20c:	000a2400 	call	a240 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    a210:	e0bffe17 	ldw	r2,-8(fp)
    a214:	1081100c 	andi	r2,r2,1088
    a218:	10000326 	beq	r2,zero,a228 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    a21c:	e17ffe17 	ldw	r5,-8(fp)
    a220:	e13ffc17 	ldw	r4,-16(fp)
    a224:	000a3240 	call	a324 <altera_avalon_uart_txirq>
  }
  

}
    a228:	0001883a 	nop
    a22c:	e037883a 	mov	sp,fp
    a230:	dfc00117 	ldw	ra,4(sp)
    a234:	df000017 	ldw	fp,0(sp)
    a238:	dec00204 	addi	sp,sp,8
    a23c:	f800283a 	ret

0000a240 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    a240:	defffc04 	addi	sp,sp,-16
    a244:	df000315 	stw	fp,12(sp)
    a248:	df000304 	addi	fp,sp,12
    a24c:	e13ffe15 	stw	r4,-8(fp)
    a250:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    a254:	e0bfff17 	ldw	r2,-4(fp)
    a258:	108000cc 	andi	r2,r2,3
    a25c:	10002c1e 	bne	r2,zero,a310 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    a260:	e0bffe17 	ldw	r2,-8(fp)
    a264:	10800317 	ldw	r2,12(r2)
    a268:	e0bffe17 	ldw	r2,-8(fp)
    a26c:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    a270:	e0bffe17 	ldw	r2,-8(fp)
    a274:	10800317 	ldw	r2,12(r2)
    a278:	10800044 	addi	r2,r2,1
    a27c:	10800fcc 	andi	r2,r2,63
    a280:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    a284:	e0bffe17 	ldw	r2,-8(fp)
    a288:	10800317 	ldw	r2,12(r2)
    a28c:	e0fffe17 	ldw	r3,-8(fp)
    a290:	18c00017 	ldw	r3,0(r3)
    a294:	18c00037 	ldwio	r3,0(r3)
    a298:	1809883a 	mov	r4,r3
    a29c:	e0fffe17 	ldw	r3,-8(fp)
    a2a0:	1885883a 	add	r2,r3,r2
    a2a4:	10800704 	addi	r2,r2,28
    a2a8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
    a2ac:	e0bffe17 	ldw	r2,-8(fp)
    a2b0:	e0fffd17 	ldw	r3,-12(fp)
    a2b4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    a2b8:	e0bffe17 	ldw	r2,-8(fp)
    a2bc:	10800317 	ldw	r2,12(r2)
    a2c0:	10800044 	addi	r2,r2,1
    a2c4:	10800fcc 	andi	r2,r2,63
    a2c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    a2cc:	e0bffe17 	ldw	r2,-8(fp)
    a2d0:	10c00217 	ldw	r3,8(r2)
    a2d4:	e0bffd17 	ldw	r2,-12(fp)
    a2d8:	18800e1e 	bne	r3,r2,a314 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    a2dc:	e0bffe17 	ldw	r2,-8(fp)
    a2e0:	10c00117 	ldw	r3,4(r2)
    a2e4:	00bfdfc4 	movi	r2,-129
    a2e8:	1886703a 	and	r3,r3,r2
    a2ec:	e0bffe17 	ldw	r2,-8(fp)
    a2f0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    a2f4:	e0bffe17 	ldw	r2,-8(fp)
    a2f8:	10800017 	ldw	r2,0(r2)
    a2fc:	10800304 	addi	r2,r2,12
    a300:	e0fffe17 	ldw	r3,-8(fp)
    a304:	18c00117 	ldw	r3,4(r3)
    a308:	10c00035 	stwio	r3,0(r2)
    a30c:	00000106 	br	a314 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
    a310:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
    a314:	e037883a 	mov	sp,fp
    a318:	df000017 	ldw	fp,0(sp)
    a31c:	dec00104 	addi	sp,sp,4
    a320:	f800283a 	ret

0000a324 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    a324:	defffb04 	addi	sp,sp,-20
    a328:	df000415 	stw	fp,16(sp)
    a32c:	df000404 	addi	fp,sp,16
    a330:	e13ffc15 	stw	r4,-16(fp)
    a334:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    a338:	e0bffc17 	ldw	r2,-16(fp)
    a33c:	10c00417 	ldw	r3,16(r2)
    a340:	e0bffc17 	ldw	r2,-16(fp)
    a344:	10800517 	ldw	r2,20(r2)
    a348:	18803226 	beq	r3,r2,a414 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    a34c:	e0bffc17 	ldw	r2,-16(fp)
    a350:	10800617 	ldw	r2,24(r2)
    a354:	1080008c 	andi	r2,r2,2
    a358:	10000326 	beq	r2,zero,a368 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    a35c:	e0bffd17 	ldw	r2,-12(fp)
    a360:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    a364:	10001d26 	beq	r2,zero,a3dc <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    a368:	e0bffc17 	ldw	r2,-16(fp)
    a36c:	10800417 	ldw	r2,16(r2)
    a370:	e0bffc17 	ldw	r2,-16(fp)
    a374:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    a378:	e0bffc17 	ldw	r2,-16(fp)
    a37c:	10800017 	ldw	r2,0(r2)
    a380:	10800104 	addi	r2,r2,4
    a384:	e0fffc17 	ldw	r3,-16(fp)
    a388:	18c00417 	ldw	r3,16(r3)
    a38c:	e13ffc17 	ldw	r4,-16(fp)
    a390:	20c7883a 	add	r3,r4,r3
    a394:	18c01704 	addi	r3,r3,92
    a398:	18c00003 	ldbu	r3,0(r3)
    a39c:	18c03fcc 	andi	r3,r3,255
    a3a0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    a3a4:	e0bffc17 	ldw	r2,-16(fp)
    a3a8:	10800417 	ldw	r2,16(r2)
    a3ac:	10800044 	addi	r2,r2,1
    a3b0:	e0fffc17 	ldw	r3,-16(fp)
    a3b4:	18800415 	stw	r2,16(r3)
    a3b8:	10c00fcc 	andi	r3,r2,63
    a3bc:	e0bffc17 	ldw	r2,-16(fp)
    a3c0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    a3c4:	e0bffc17 	ldw	r2,-16(fp)
    a3c8:	10800117 	ldw	r2,4(r2)
    a3cc:	10c01014 	ori	r3,r2,64
    a3d0:	e0bffc17 	ldw	r2,-16(fp)
    a3d4:	10c00115 	stw	r3,4(r2)
    a3d8:	00000e06 	br	a414 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    a3dc:	e0bffc17 	ldw	r2,-16(fp)
    a3e0:	10800017 	ldw	r2,0(r2)
    a3e4:	10800204 	addi	r2,r2,8
    a3e8:	10800037 	ldwio	r2,0(r2)
    a3ec:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    a3f0:	e0bffd17 	ldw	r2,-12(fp)
    a3f4:	1082000c 	andi	r2,r2,2048
    a3f8:	1000061e 	bne	r2,zero,a414 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    a3fc:	e0bffc17 	ldw	r2,-16(fp)
    a400:	10c00117 	ldw	r3,4(r2)
    a404:	00bfefc4 	movi	r2,-65
    a408:	1886703a 	and	r3,r3,r2
    a40c:	e0bffc17 	ldw	r2,-16(fp)
    a410:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    a414:	e0bffc17 	ldw	r2,-16(fp)
    a418:	10c00417 	ldw	r3,16(r2)
    a41c:	e0bffc17 	ldw	r2,-16(fp)
    a420:	10800517 	ldw	r2,20(r2)
    a424:	1880061e 	bne	r3,r2,a440 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    a428:	e0bffc17 	ldw	r2,-16(fp)
    a42c:	10c00117 	ldw	r3,4(r2)
    a430:	00beefc4 	movi	r2,-1089
    a434:	1886703a 	and	r3,r3,r2
    a438:	e0bffc17 	ldw	r2,-16(fp)
    a43c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    a440:	e0bffc17 	ldw	r2,-16(fp)
    a444:	10800017 	ldw	r2,0(r2)
    a448:	10800304 	addi	r2,r2,12
    a44c:	e0fffc17 	ldw	r3,-16(fp)
    a450:	18c00117 	ldw	r3,4(r3)
    a454:	10c00035 	stwio	r3,0(r2)
}
    a458:	0001883a 	nop
    a45c:	e037883a 	mov	sp,fp
    a460:	df000017 	ldw	fp,0(sp)
    a464:	dec00104 	addi	sp,sp,4
    a468:	f800283a 	ret

0000a46c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    a46c:	defffd04 	addi	sp,sp,-12
    a470:	df000215 	stw	fp,8(sp)
    a474:	df000204 	addi	fp,sp,8
    a478:	e13ffe15 	stw	r4,-8(fp)
    a47c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    a480:	00000506 	br	a498 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    a484:	e0bfff17 	ldw	r2,-4(fp)
    a488:	1090000c 	andi	r2,r2,16384
    a48c:	10000226 	beq	r2,zero,a498 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
    a490:	00bffd44 	movi	r2,-11
    a494:	00000606 	br	a4b0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    a498:	e0bffe17 	ldw	r2,-8(fp)
    a49c:	10c00417 	ldw	r3,16(r2)
    a4a0:	e0bffe17 	ldw	r2,-8(fp)
    a4a4:	10800517 	ldw	r2,20(r2)
    a4a8:	18bff61e 	bne	r3,r2,a484 <__alt_data_end+0xf800a484>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    a4ac:	0005883a 	mov	r2,zero
}
    a4b0:	e037883a 	mov	sp,fp
    a4b4:	df000017 	ldw	fp,0(sp)
    a4b8:	dec00104 	addi	sp,sp,4
    a4bc:	f800283a 	ret

0000a4c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a4c0:	defffe04 	addi	sp,sp,-8
    a4c4:	dfc00115 	stw	ra,4(sp)
    a4c8:	df000015 	stw	fp,0(sp)
    a4cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a4d0:	d0a01017 	ldw	r2,-32704(gp)
    a4d4:	10000326 	beq	r2,zero,a4e4 <alt_get_errno+0x24>
    a4d8:	d0a01017 	ldw	r2,-32704(gp)
    a4dc:	103ee83a 	callr	r2
    a4e0:	00000106 	br	a4e8 <alt_get_errno+0x28>
    a4e4:	d0a71204 	addi	r2,gp,-25528
}
    a4e8:	e037883a 	mov	sp,fp
    a4ec:	dfc00117 	ldw	ra,4(sp)
    a4f0:	df000017 	ldw	fp,0(sp)
    a4f4:	dec00204 	addi	sp,sp,8
    a4f8:	f800283a 	ret

0000a4fc <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    a4fc:	defff204 	addi	sp,sp,-56
    a500:	dfc00d15 	stw	ra,52(sp)
    a504:	df000c15 	stw	fp,48(sp)
    a508:	df000c04 	addi	fp,sp,48
    a50c:	e13ffc15 	stw	r4,-16(fp)
    a510:	e17ffd15 	stw	r5,-12(fp)
    a514:	e1bffe15 	stw	r6,-8(fp)
    a518:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
    a51c:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
    a520:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    a524:	e0bfff17 	ldw	r2,-4(fp)
    a528:	1090000c 	andi	r2,r2,16384
    a52c:	1005003a 	cmpeq	r2,r2,zero
    a530:	10803fcc 	andi	r2,r2,255
    a534:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    a538:	00001306 	br	a588 <altera_avalon_uart_read+0x8c>
    {
      count++;
    a53c:	e0bff517 	ldw	r2,-44(fp)
    a540:	10800044 	addi	r2,r2,1
    a544:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    a548:	e0bffd17 	ldw	r2,-12(fp)
    a54c:	10c00044 	addi	r3,r2,1
    a550:	e0fffd15 	stw	r3,-12(fp)
    a554:	e0fffc17 	ldw	r3,-16(fp)
    a558:	18c00217 	ldw	r3,8(r3)
    a55c:	e13ffc17 	ldw	r4,-16(fp)
    a560:	20c7883a 	add	r3,r4,r3
    a564:	18c00704 	addi	r3,r3,28
    a568:	18c00003 	ldbu	r3,0(r3)
    a56c:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
    a570:	e0bffc17 	ldw	r2,-16(fp)
    a574:	10800217 	ldw	r2,8(r2)
    a578:	10800044 	addi	r2,r2,1
    a57c:	10c00fcc 	andi	r3,r2,63
    a580:	e0bffc17 	ldw	r2,-16(fp)
    a584:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    a588:	e0fff517 	ldw	r3,-44(fp)
    a58c:	e0bffe17 	ldw	r2,-8(fp)
    a590:	1880050e 	bge	r3,r2,a5a8 <altera_avalon_uart_read+0xac>
    a594:	e0bffc17 	ldw	r2,-16(fp)
    a598:	10c00217 	ldw	r3,8(r2)
    a59c:	e0bffc17 	ldw	r2,-16(fp)
    a5a0:	10800317 	ldw	r2,12(r2)
    a5a4:	18bfe51e 	bne	r3,r2,a53c <__alt_data_end+0xf800a53c>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    a5a8:	e0bff517 	ldw	r2,-44(fp)
    a5ac:	1000251e 	bne	r2,zero,a644 <altera_avalon_uart_read+0x148>
    a5b0:	e0bffc17 	ldw	r2,-16(fp)
    a5b4:	10c00217 	ldw	r3,8(r2)
    a5b8:	e0bffc17 	ldw	r2,-16(fp)
    a5bc:	10800317 	ldw	r2,12(r2)
    a5c0:	1880201e 	bne	r3,r2,a644 <altera_avalon_uart_read+0x148>
    {
      if (!block)
    a5c4:	e0bff617 	ldw	r2,-40(fp)
    a5c8:	1000071e 	bne	r2,zero,a5e8 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    a5cc:	000a4c00 	call	a4c0 <alt_get_errno>
    a5d0:	1007883a 	mov	r3,r2
    a5d4:	008002c4 	movi	r2,11
    a5d8:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
    a5dc:	00800044 	movi	r2,1
    a5e0:	e0bff405 	stb	r2,-48(fp)
        break;
    a5e4:	00001b06 	br	a654 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a5e8:	0005303a 	rdctl	r2,status
    a5ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a5f0:	e0fff917 	ldw	r3,-28(fp)
    a5f4:	00bfff84 	movi	r2,-2
    a5f8:	1884703a 	and	r2,r3,r2
    a5fc:	1001703a 	wrctl	status,r2
  
  return context;
    a600:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    a604:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    a608:	e0bffc17 	ldw	r2,-16(fp)
    a60c:	10800117 	ldw	r2,4(r2)
    a610:	10c02014 	ori	r3,r2,128
    a614:	e0bffc17 	ldw	r2,-16(fp)
    a618:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    a61c:	e0bffc17 	ldw	r2,-16(fp)
    a620:	10800017 	ldw	r2,0(r2)
    a624:	10800304 	addi	r2,r2,12
    a628:	e0fffc17 	ldw	r3,-16(fp)
    a62c:	18c00117 	ldw	r3,4(r3)
    a630:	10c00035 	stwio	r3,0(r2)
    a634:	e0bff817 	ldw	r2,-32(fp)
    a638:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a63c:	e0bffa17 	ldw	r2,-24(fp)
    a640:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    a644:	e0bff517 	ldw	r2,-44(fp)
    a648:	1000021e 	bne	r2,zero,a654 <altera_avalon_uart_read+0x158>
    a64c:	e0bffe17 	ldw	r2,-8(fp)
    a650:	103fcd1e 	bne	r2,zero,a588 <__alt_data_end+0xf800a588>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a654:	0005303a 	rdctl	r2,status
    a658:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a65c:	e0fffb17 	ldw	r3,-20(fp)
    a660:	00bfff84 	movi	r2,-2
    a664:	1884703a 	and	r2,r3,r2
    a668:	1001703a 	wrctl	status,r2
  
  return context;
    a66c:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    a670:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    a674:	e0bffc17 	ldw	r2,-16(fp)
    a678:	10800117 	ldw	r2,4(r2)
    a67c:	10c02014 	ori	r3,r2,128
    a680:	e0bffc17 	ldw	r2,-16(fp)
    a684:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    a688:	e0bffc17 	ldw	r2,-16(fp)
    a68c:	10800017 	ldw	r2,0(r2)
    a690:	10800304 	addi	r2,r2,12
    a694:	e0fffc17 	ldw	r3,-16(fp)
    a698:	18c00117 	ldw	r3,4(r3)
    a69c:	10c00035 	stwio	r3,0(r2)
    a6a0:	e0bff817 	ldw	r2,-32(fp)
    a6a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6a8:	e0bff717 	ldw	r2,-36(fp)
    a6ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    a6b0:	e0bff403 	ldbu	r2,-48(fp)
    a6b4:	10000226 	beq	r2,zero,a6c0 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
    a6b8:	00bffd44 	movi	r2,-11
    a6bc:	00000106 	br	a6c4 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
    a6c0:	e0bff517 	ldw	r2,-44(fp)
  }
}
    a6c4:	e037883a 	mov	sp,fp
    a6c8:	dfc00117 	ldw	ra,4(sp)
    a6cc:	df000017 	ldw	fp,0(sp)
    a6d0:	dec00204 	addi	sp,sp,8
    a6d4:	f800283a 	ret

0000a6d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a6d8:	defffe04 	addi	sp,sp,-8
    a6dc:	dfc00115 	stw	ra,4(sp)
    a6e0:	df000015 	stw	fp,0(sp)
    a6e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    a6e8:	d0a01017 	ldw	r2,-32704(gp)
    a6ec:	10000326 	beq	r2,zero,a6fc <alt_get_errno+0x24>
    a6f0:	d0a01017 	ldw	r2,-32704(gp)
    a6f4:	103ee83a 	callr	r2
    a6f8:	00000106 	br	a700 <alt_get_errno+0x28>
    a6fc:	d0a71204 	addi	r2,gp,-25528
}
    a700:	e037883a 	mov	sp,fp
    a704:	dfc00117 	ldw	ra,4(sp)
    a708:	df000017 	ldw	fp,0(sp)
    a70c:	dec00204 	addi	sp,sp,8
    a710:	f800283a 	ret

0000a714 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    a714:	defff204 	addi	sp,sp,-56
    a718:	dfc00d15 	stw	ra,52(sp)
    a71c:	df000c15 	stw	fp,48(sp)
    a720:	df000c04 	addi	fp,sp,48
    a724:	e13ffc15 	stw	r4,-16(fp)
    a728:	e17ffd15 	stw	r5,-12(fp)
    a72c:	e1bffe15 	stw	r6,-8(fp)
    a730:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    a734:	e0bffe17 	ldw	r2,-8(fp)
    a738:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    a73c:	e0bfff17 	ldw	r2,-4(fp)
    a740:	1090000c 	andi	r2,r2,16384
    a744:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    a748:	00003c06 	br	a83c <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    a74c:	e0bffc17 	ldw	r2,-16(fp)
    a750:	10800517 	ldw	r2,20(r2)
    a754:	10800044 	addi	r2,r2,1
    a758:	10800fcc 	andi	r2,r2,63
    a75c:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    a760:	e0bffc17 	ldw	r2,-16(fp)
    a764:	10c00417 	ldw	r3,16(r2)
    a768:	e0bff717 	ldw	r2,-36(fp)
    a76c:	1880221e 	bne	r3,r2,a7f8 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
    a770:	e0bff517 	ldw	r2,-44(fp)
    a774:	10000526 	beq	r2,zero,a78c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    a778:	000a6d80 	call	a6d8 <alt_get_errno>
    a77c:	1007883a 	mov	r3,r2
    a780:	008002c4 	movi	r2,11
    a784:	18800015 	stw	r2,0(r3)
        break;
    a788:	00002e06 	br	a844 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a78c:	0005303a 	rdctl	r2,status
    a790:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a794:	e0fff917 	ldw	r3,-28(fp)
    a798:	00bfff84 	movi	r2,-2
    a79c:	1884703a 	and	r2,r3,r2
    a7a0:	1001703a 	wrctl	status,r2
  
  return context;
    a7a4:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    a7a8:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    a7ac:	e0bffc17 	ldw	r2,-16(fp)
    a7b0:	10800117 	ldw	r2,4(r2)
    a7b4:	10c11014 	ori	r3,r2,1088
    a7b8:	e0bffc17 	ldw	r2,-16(fp)
    a7bc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    a7c0:	e0bffc17 	ldw	r2,-16(fp)
    a7c4:	10800017 	ldw	r2,0(r2)
    a7c8:	10800304 	addi	r2,r2,12
    a7cc:	e0fffc17 	ldw	r3,-16(fp)
    a7d0:	18c00117 	ldw	r3,4(r3)
    a7d4:	10c00035 	stwio	r3,0(r2)
    a7d8:	e0bff817 	ldw	r2,-32(fp)
    a7dc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a7e0:	e0bff617 	ldw	r2,-40(fp)
    a7e4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    a7e8:	e0bffc17 	ldw	r2,-16(fp)
    a7ec:	10c00417 	ldw	r3,16(r2)
    a7f0:	e0bff717 	ldw	r2,-36(fp)
    a7f4:	18bffc26 	beq	r3,r2,a7e8 <__alt_data_end+0xf800a7e8>
      }
    }

    count--;
    a7f8:	e0bff417 	ldw	r2,-48(fp)
    a7fc:	10bfffc4 	addi	r2,r2,-1
    a800:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    a804:	e0bffc17 	ldw	r2,-16(fp)
    a808:	10c00517 	ldw	r3,20(r2)
    a80c:	e0bffd17 	ldw	r2,-12(fp)
    a810:	11000044 	addi	r4,r2,1
    a814:	e13ffd15 	stw	r4,-12(fp)
    a818:	10800003 	ldbu	r2,0(r2)
    a81c:	1009883a 	mov	r4,r2
    a820:	e0bffc17 	ldw	r2,-16(fp)
    a824:	10c5883a 	add	r2,r2,r3
    a828:	10801704 	addi	r2,r2,92
    a82c:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
    a830:	e0bffc17 	ldw	r2,-16(fp)
    a834:	e0fff717 	ldw	r3,-36(fp)
    a838:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    a83c:	e0bff417 	ldw	r2,-48(fp)
    a840:	103fc21e 	bne	r2,zero,a74c <__alt_data_end+0xf800a74c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a844:	0005303a 	rdctl	r2,status
    a848:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a84c:	e0fffb17 	ldw	r3,-20(fp)
    a850:	00bfff84 	movi	r2,-2
    a854:	1884703a 	and	r2,r3,r2
    a858:	1001703a 	wrctl	status,r2
  
  return context;
    a85c:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    a860:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    a864:	e0bffc17 	ldw	r2,-16(fp)
    a868:	10800117 	ldw	r2,4(r2)
    a86c:	10c11014 	ori	r3,r2,1088
    a870:	e0bffc17 	ldw	r2,-16(fp)
    a874:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    a878:	e0bffc17 	ldw	r2,-16(fp)
    a87c:	10800017 	ldw	r2,0(r2)
    a880:	10800304 	addi	r2,r2,12
    a884:	e0fffc17 	ldw	r3,-16(fp)
    a888:	18c00117 	ldw	r3,4(r3)
    a88c:	10c00035 	stwio	r3,0(r2)
    a890:	e0bff817 	ldw	r2,-32(fp)
    a894:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a898:	e0bffa17 	ldw	r2,-24(fp)
    a89c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    a8a0:	e0fffe17 	ldw	r3,-8(fp)
    a8a4:	e0bff417 	ldw	r2,-48(fp)
    a8a8:	1885c83a 	sub	r2,r3,r2
}
    a8ac:	e037883a 	mov	sp,fp
    a8b0:	dfc00117 	ldw	ra,4(sp)
    a8b4:	df000017 	ldw	fp,0(sp)
    a8b8:	dec00204 	addi	sp,sp,8
    a8bc:	f800283a 	ret

0000a8c0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    a8c0:	defffc04 	addi	sp,sp,-16
    a8c4:	dfc00315 	stw	ra,12(sp)
    a8c8:	df000215 	stw	fp,8(sp)
    a8cc:	df000204 	addi	fp,sp,8
    a8d0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    a8d4:	d1600d04 	addi	r5,gp,-32716
    a8d8:	e13fff17 	ldw	r4,-4(fp)
    a8dc:	000bbc00 	call	bbc0 <alt_find_dev>
    a8e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    a8e4:	e0bffe17 	ldw	r2,-8(fp)
}
    a8e8:	e037883a 	mov	sp,fp
    a8ec:	dfc00117 	ldw	ra,4(sp)
    a8f0:	df000017 	ldw	fp,0(sp)
    a8f4:	dec00204 	addi	sp,sp,8
    a8f8:	f800283a 	ret

0000a8fc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    a8fc:	defffa04 	addi	sp,sp,-24
    a900:	df000515 	stw	fp,20(sp)
    a904:	df000504 	addi	fp,sp,20
    a908:	e13ffc15 	stw	r4,-16(fp)
    a90c:	e17ffd15 	stw	r5,-12(fp)
    a910:	e1bffe15 	stw	r6,-8(fp)
    a914:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    a918:	e0bffc17 	ldw	r2,-16(fp)
    a91c:	10800f17 	ldw	r2,60(r2)
    a920:	e0fffe17 	ldw	r3,-8(fp)
    a924:	1880042e 	bgeu	r3,r2,a938 <alt_up_pixel_buffer_dma_draw+0x3c>
    a928:	e0bffc17 	ldw	r2,-16(fp)
    a92c:	10801017 	ldw	r2,64(r2)
    a930:	e0ffff17 	ldw	r3,-4(fp)
    a934:	18800236 	bltu	r3,r2,a940 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
    a938:	00bfffc4 	movi	r2,-1
    a93c:	00005006 	br	aa80 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
    a940:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    a944:	e0bffc17 	ldw	r2,-16(fp)
    a948:	10800d17 	ldw	r2,52(r2)
    a94c:	1000151e 	bne	r2,zero,a9a4 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    a950:	e0bffc17 	ldw	r2,-16(fp)
    a954:	10c01217 	ldw	r3,72(r2)
    a958:	e0bffe17 	ldw	r2,-8(fp)
    a95c:	1886703a 	and	r3,r3,r2
    a960:	e0bffc17 	ldw	r2,-16(fp)
    a964:	10801117 	ldw	r2,68(r2)
    a968:	1884983a 	sll	r2,r3,r2
    a96c:	e0fffb17 	ldw	r3,-20(fp)
    a970:	1885883a 	add	r2,r3,r2
    a974:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    a978:	e0bffc17 	ldw	r2,-16(fp)
    a97c:	10c01417 	ldw	r3,80(r2)
    a980:	e0bfff17 	ldw	r2,-4(fp)
    a984:	1886703a 	and	r3,r3,r2
    a988:	e0bffc17 	ldw	r2,-16(fp)
    a98c:	10801317 	ldw	r2,76(r2)
    a990:	1884983a 	sll	r2,r3,r2
    a994:	e0fffb17 	ldw	r3,-20(fp)
    a998:	1885883a 	add	r2,r3,r2
    a99c:	e0bffb15 	stw	r2,-20(fp)
    a9a0:	00001706 	br	aa00 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    a9a4:	e0bffc17 	ldw	r2,-16(fp)
    a9a8:	10c01217 	ldw	r3,72(r2)
    a9ac:	e0bffe17 	ldw	r2,-8(fp)
    a9b0:	1886703a 	and	r3,r3,r2
    a9b4:	e0bffc17 	ldw	r2,-16(fp)
    a9b8:	10801117 	ldw	r2,68(r2)
    a9bc:	1884983a 	sll	r2,r3,r2
    a9c0:	e0fffb17 	ldw	r3,-20(fp)
    a9c4:	1885883a 	add	r2,r3,r2
    a9c8:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    a9cc:	e0bffc17 	ldw	r2,-16(fp)
    a9d0:	10c01417 	ldw	r3,80(r2)
    a9d4:	e0bfff17 	ldw	r2,-4(fp)
    a9d8:	1886703a 	and	r3,r3,r2
    a9dc:	e0bffc17 	ldw	r2,-16(fp)
    a9e0:	10800f17 	ldw	r2,60(r2)
    a9e4:	1887383a 	mul	r3,r3,r2
    a9e8:	e0bffc17 	ldw	r2,-16(fp)
    a9ec:	10801117 	ldw	r2,68(r2)
    a9f0:	1884983a 	sll	r2,r3,r2
    a9f4:	e0fffb17 	ldw	r3,-20(fp)
    a9f8:	1885883a 	add	r2,r3,r2
    a9fc:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    aa00:	e0bffc17 	ldw	r2,-16(fp)
    aa04:	10800e17 	ldw	r2,56(r2)
    aa08:	10800058 	cmpnei	r2,r2,1
    aa0c:	1000081e 	bne	r2,zero,aa30 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    aa10:	e0bffc17 	ldw	r2,-16(fp)
    aa14:	10c00c17 	ldw	r3,48(r2)
    aa18:	e0bffb17 	ldw	r2,-20(fp)
    aa1c:	1885883a 	add	r2,r3,r2
    aa20:	1007883a 	mov	r3,r2
    aa24:	e0bffd17 	ldw	r2,-12(fp)
    aa28:	18800025 	stbio	r2,0(r3)
    aa2c:	00001306 	br	aa7c <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    aa30:	e0bffc17 	ldw	r2,-16(fp)
    aa34:	10800e17 	ldw	r2,56(r2)
    aa38:	10800098 	cmpnei	r2,r2,2
    aa3c:	1000081e 	bne	r2,zero,aa60 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    aa40:	e0bffc17 	ldw	r2,-16(fp)
    aa44:	10c00c17 	ldw	r3,48(r2)
    aa48:	e0bffb17 	ldw	r2,-20(fp)
    aa4c:	1885883a 	add	r2,r3,r2
    aa50:	1007883a 	mov	r3,r2
    aa54:	e0bffd17 	ldw	r2,-12(fp)
    aa58:	1880002d 	sthio	r2,0(r3)
    aa5c:	00000706 	br	aa7c <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    aa60:	e0bffc17 	ldw	r2,-16(fp)
    aa64:	10c00c17 	ldw	r3,48(r2)
    aa68:	e0bffb17 	ldw	r2,-20(fp)
    aa6c:	1885883a 	add	r2,r3,r2
    aa70:	1007883a 	mov	r3,r2
    aa74:	e0bffd17 	ldw	r2,-12(fp)
    aa78:	18800035 	stwio	r2,0(r3)
	}

	return 0;
    aa7c:	0005883a 	mov	r2,zero
}
    aa80:	e037883a 	mov	sp,fp
    aa84:	df000017 	ldw	fp,0(sp)
    aa88:	dec00104 	addi	sp,sp,4
    aa8c:	f800283a 	ret

0000aa90 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    aa90:	defffd04 	addi	sp,sp,-12
    aa94:	df000215 	stw	fp,8(sp)
    aa98:	df000204 	addi	fp,sp,8
    aa9c:	e13ffe15 	stw	r4,-8(fp)
    aaa0:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    aaa4:	e0bffe17 	ldw	r2,-8(fp)
    aaa8:	10800a17 	ldw	r2,40(r2)
    aaac:	10800104 	addi	r2,r2,4
    aab0:	1007883a 	mov	r3,r2
    aab4:	e0bfff17 	ldw	r2,-4(fp)
    aab8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    aabc:	e0bffe17 	ldw	r2,-8(fp)
    aac0:	10800a17 	ldw	r2,40(r2)
    aac4:	10800104 	addi	r2,r2,4
    aac8:	10800037 	ldwio	r2,0(r2)
    aacc:	1007883a 	mov	r3,r2
    aad0:	e0bffe17 	ldw	r2,-8(fp)
    aad4:	10c00c15 	stw	r3,48(r2)
	return 0;
    aad8:	0005883a 	mov	r2,zero
}
    aadc:	e037883a 	mov	sp,fp
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00104 	addi	sp,sp,4
    aae8:	f800283a 	ret

0000aaec <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    aaec:	defffd04 	addi	sp,sp,-12
    aaf0:	df000215 	stw	fp,8(sp)
    aaf4:	dc000115 	stw	r16,4(sp)
    aaf8:	df000204 	addi	fp,sp,8
    aafc:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    ab00:	e0bffe17 	ldw	r2,-8(fp)
    ab04:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    ab08:	e0bffe17 	ldw	r2,-8(fp)
    ab0c:	10800a17 	ldw	r2,40(r2)
    ab10:	1007883a 	mov	r3,r2
    ab14:	00800044 	movi	r2,1
    ab18:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    ab1c:	e0bffe17 	ldw	r2,-8(fp)
    ab20:	10c00b17 	ldw	r3,44(r2)
    ab24:	e0bffe17 	ldw	r2,-8(fp)
    ab28:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    ab2c:	e0bffe17 	ldw	r2,-8(fp)
    ab30:	14000b15 	stw	r16,44(r2)
	return 0;
    ab34:	0005883a 	mov	r2,zero
}
    ab38:	e6ffff04 	addi	sp,fp,-4
    ab3c:	df000117 	ldw	fp,4(sp)
    ab40:	dc000017 	ldw	r16,0(sp)
    ab44:	dec00204 	addi	sp,sp,8
    ab48:	f800283a 	ret

0000ab4c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    ab4c:	defffe04 	addi	sp,sp,-8
    ab50:	df000115 	stw	fp,4(sp)
    ab54:	df000104 	addi	fp,sp,4
    ab58:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    ab5c:	e0bfff17 	ldw	r2,-4(fp)
    ab60:	10800a17 	ldw	r2,40(r2)
    ab64:	10800304 	addi	r2,r2,12
    ab68:	10800037 	ldwio	r2,0(r2)
    ab6c:	1080004c 	andi	r2,r2,1
}
    ab70:	e037883a 	mov	sp,fp
    ab74:	df000017 	ldw	fp,0(sp)
    ab78:	dec00104 	addi	sp,sp,4
    ab7c:	f800283a 	ret

0000ab80 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    ab80:	defff704 	addi	sp,sp,-36
    ab84:	df000815 	stw	fp,32(sp)
    ab88:	dd400715 	stw	r21,28(sp)
    ab8c:	dd000615 	stw	r20,24(sp)
    ab90:	dcc00515 	stw	r19,20(sp)
    ab94:	dc800415 	stw	r18,16(sp)
    ab98:	dc400315 	stw	r17,12(sp)
    ab9c:	dc000215 	stw	r16,8(sp)
    aba0:	df000804 	addi	fp,sp,32
    aba4:	e13ff815 	stw	r4,-32(fp)
    aba8:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    abac:	e0bff917 	ldw	r2,-28(fp)
    abb0:	10800058 	cmpnei	r2,r2,1
    abb4:	1000031e 	bne	r2,zero,abc4 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
    abb8:	e0bff817 	ldw	r2,-32(fp)
    abbc:	14400c17 	ldw	r17,48(r2)
    abc0:	00000206 	br	abcc <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
    abc4:	e0bff817 	ldw	r2,-32(fp)
    abc8:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
    abcc:	e0bff817 	ldw	r2,-32(fp)
    abd0:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    abd4:	e0bff817 	ldw	r2,-32(fp)
    abd8:	10800e17 	ldw	r2,56(r2)
    abdc:	10800098 	cmpnei	r2,r2,2
    abe0:	1000031e 	bne	r2,zero,abf0 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
    abe4:	8405883a 	add	r2,r16,r16
    abe8:	1021883a 	mov	r16,r2
    abec:	00000306 	br	abfc <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
    abf0:	8405883a 	add	r2,r16,r16
    abf4:	1085883a 	add	r2,r2,r2
    abf8:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    abfc:	e0bff817 	ldw	r2,-32(fp)
    ac00:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    ac04:	e0bff817 	ldw	r2,-32(fp)
    ac08:	10800d17 	ldw	r2,52(r2)
    ac0c:	1000111e 	bne	r2,zero,ac54 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    ac10:	e0bff817 	ldw	r2,-32(fp)
    ac14:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
    ac18:	0029883a 	mov	r20,zero
    ac1c:	00000b06 	br	ac4c <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
    ac20:	0027883a 	mov	r19,zero
    ac24:	00000406 	br	ac38 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
    ac28:	9c45883a 	add	r2,r19,r17
    ac2c:	0007883a 	mov	r3,zero
    ac30:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    ac34:	9cc00104 	addi	r19,r19,4
    ac38:	9c3ffb36 	bltu	r19,r16,ac28 <__alt_data_end+0xf800ac28>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    ac3c:	00800044 	movi	r2,1
    ac40:	1544983a 	sll	r2,r2,r21
    ac44:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    ac48:	a5000044 	addi	r20,r20,1
    ac4c:	a4bff436 	bltu	r20,r18,ac20 <__alt_data_end+0xf800ac20>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    ac50:	00000a06 	br	ac7c <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    ac54:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
    ac58:	0021883a 	mov	r16,zero
    ac5c:	00000506 	br	ac74 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
    ac60:	8005883a 	mov	r2,r16
    ac64:	1445883a 	add	r2,r2,r17
    ac68:	0007883a 	mov	r3,zero
    ac6c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    ac70:	84000104 	addi	r16,r16,4
    ac74:	8005883a 	mov	r2,r16
    ac78:	14bff936 	bltu	r2,r18,ac60 <__alt_data_end+0xf800ac60>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    ac7c:	0001883a 	nop
    ac80:	e6fffa04 	addi	sp,fp,-24
    ac84:	df000617 	ldw	fp,24(sp)
    ac88:	dd400517 	ldw	r21,20(sp)
    ac8c:	dd000417 	ldw	r20,16(sp)
    ac90:	dcc00317 	ldw	r19,12(sp)
    ac94:	dc800217 	ldw	r18,8(sp)
    ac98:	dc400117 	ldw	r17,4(sp)
    ac9c:	dc000017 	ldw	r16,0(sp)
    aca0:	dec00704 	addi	sp,sp,28
    aca4:	f800283a 	ret

0000aca8 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    aca8:	defff304 	addi	sp,sp,-52
    acac:	df000c15 	stw	fp,48(sp)
    acb0:	ddc00b15 	stw	r23,44(sp)
    acb4:	dd800a15 	stw	r22,40(sp)
    acb8:	dd400915 	stw	r21,36(sp)
    acbc:	dd000815 	stw	r20,32(sp)
    acc0:	dcc00715 	stw	r19,28(sp)
    acc4:	dc800615 	stw	r18,24(sp)
    acc8:	dc400515 	stw	r17,20(sp)
    accc:	dc000415 	stw	r16,16(sp)
    acd0:	df000c04 	addi	fp,sp,48
    acd4:	e13ff415 	stw	r4,-48(fp)
    acd8:	e17ff515 	stw	r5,-44(fp)
    acdc:	e1bff615 	stw	r6,-40(fp)
    ace0:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    ace4:	e0bff417 	ldw	r2,-48(fp)
    ace8:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    acec:	e0bff417 	ldw	r2,-48(fp)
    acf0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    acf4:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
    acf8:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
    acfc:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
    ad00:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
    ad04:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    ad08:	a580032e 	bgeu	r20,r22,ad18 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
    ad0c:	b02b883a 	mov	r21,r22
		l_x = r_x;
    ad10:	a02d883a 	mov	r22,r20
		r_x = temp;
    ad14:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
    ad18:	9c40032e 	bgeu	r19,r17,ad28 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
    ad1c:	882b883a 	mov	r21,r17
		t_y = b_y;
    ad20:	9823883a 	mov	r17,r19
		b_y = temp;
    ad24:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    ad28:	b480892e 	bgeu	r22,r18,af50 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
    ad2c:	8c00882e 	bgeu	r17,r16,af50 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    ad30:	a4800136 	bltu	r20,r18,ad38 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
    ad34:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    ad38:	9c000136 	bltu	r19,r16,ad40 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
    ad3c:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    ad40:	e0800317 	ldw	r2,12(fp)
    ad44:	10800058 	cmpnei	r2,r2,1
    ad48:	1000031e 	bne	r2,zero,ad58 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
    ad4c:	e0bff417 	ldw	r2,-48(fp)
    ad50:	14000c17 	ldw	r16,48(r2)
    ad54:	00000206 	br	ad60 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
    ad58:	e0bff417 	ldw	r2,-48(fp)
    ad5c:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    ad60:	e0bff417 	ldw	r2,-48(fp)
    ad64:	10800d17 	ldw	r2,52(r2)
    ad68:	10003c1e 	bne	r2,zero,ae5c <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    ad6c:	e0bff417 	ldw	r2,-48(fp)
    ad70:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
    ad74:	8d44983a 	sll	r2,r17,r21
    ad78:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ad7c:	e0bff417 	ldw	r2,-48(fp)
    ad80:	10800e17 	ldw	r2,56(r2)
    ad84:	10800058 	cmpnei	r2,r2,1
    ad88:	10000f1e 	bne	r2,zero,adc8 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
    ad8c:	8825883a 	mov	r18,r17
    ad90:	00000b06 	br	adc0 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
    ad94:	b023883a 	mov	r17,r22
    ad98:	00000406 	br	adac <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
    ad9c:	8c05883a 	add	r2,r17,r16
    ada0:	b807883a 	mov	r3,r23
    ada4:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ada8:	8c400044 	addi	r17,r17,1
    adac:	a47ffb2e 	bgeu	r20,r17,ad9c <__alt_data_end+0xf800ad9c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    adb0:	00800044 	movi	r2,1
    adb4:	1544983a 	sll	r2,r2,r21
    adb8:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    adbc:	94800044 	addi	r18,r18,1
    adc0:	9cbff42e 	bgeu	r19,r18,ad94 <__alt_data_end+0xf800ad94>
    adc4:	00006306 	br	af54 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    adc8:	e0bff417 	ldw	r2,-48(fp)
    adcc:	10800e17 	ldw	r2,56(r2)
    add0:	10800098 	cmpnei	r2,r2,2
    add4:	1000101e 	bne	r2,zero,ae18 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
    add8:	8825883a 	mov	r18,r17
    addc:	00000c06 	br	ae10 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
    ade0:	b023883a 	mov	r17,r22
    ade4:	00000506 	br	adfc <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    ade8:	8c45883a 	add	r2,r17,r17
    adec:	1405883a 	add	r2,r2,r16
    adf0:	b807883a 	mov	r3,r23
    adf4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    adf8:	8c400044 	addi	r17,r17,1
    adfc:	a47ffa2e 	bgeu	r20,r17,ade8 <__alt_data_end+0xf800ade8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    ae00:	00800044 	movi	r2,1
    ae04:	1544983a 	sll	r2,r2,r21
    ae08:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    ae0c:	94800044 	addi	r18,r18,1
    ae10:	9cbff32e 	bgeu	r19,r18,ade0 <__alt_data_end+0xf800ade0>
    ae14:	00004f06 	br	af54 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    ae18:	8825883a 	mov	r18,r17
    ae1c:	00000d06 	br	ae54 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
    ae20:	b023883a 	mov	r17,r22
    ae24:	00000606 	br	ae40 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    ae28:	8c45883a 	add	r2,r17,r17
    ae2c:	1085883a 	add	r2,r2,r2
    ae30:	1405883a 	add	r2,r2,r16
    ae34:	b807883a 	mov	r3,r23
    ae38:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ae3c:	8c400044 	addi	r17,r17,1
    ae40:	a47ff92e 	bgeu	r20,r17,ae28 <__alt_data_end+0xf800ae28>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    ae44:	00800044 	movi	r2,1
    ae48:	1544983a 	sll	r2,r2,r21
    ae4c:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    ae50:	94800044 	addi	r18,r18,1
    ae54:	9cbff22e 	bgeu	r19,r18,ae20 <__alt_data_end+0xf800ae20>
    ae58:	00003e06 	br	af54 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    ae5c:	e0bff417 	ldw	r2,-48(fp)
    ae60:	10800e17 	ldw	r2,56(r2)
    ae64:	10800058 	cmpnei	r2,r2,1
    ae68:	10000f1e 	bne	r2,zero,aea8 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
    ae6c:	8c85383a 	mul	r2,r17,r18
    ae70:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    ae74:	882b883a 	mov	r21,r17
    ae78:	00000906 	br	aea0 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
    ae7c:	b023883a 	mov	r17,r22
    ae80:	00000406 	br	ae94 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
    ae84:	8c05883a 	add	r2,r17,r16
    ae88:	b807883a 	mov	r3,r23
    ae8c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    ae90:	8c400044 	addi	r17,r17,1
    ae94:	a47ffb2e 	bgeu	r20,r17,ae84 <__alt_data_end+0xf800ae84>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    ae98:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    ae9c:	ad400044 	addi	r21,r21,1
    aea0:	9d7ff62e 	bgeu	r19,r21,ae7c <__alt_data_end+0xf800ae7c>
    aea4:	00002b06 	br	af54 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    aea8:	e0bff417 	ldw	r2,-48(fp)
    aeac:	10800e17 	ldw	r2,56(r2)
    aeb0:	10800098 	cmpnei	r2,r2,2
    aeb4:	1000121e 	bne	r2,zero,af00 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
    aeb8:	9485883a 	add	r2,r18,r18
    aebc:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    aec0:	8c85383a 	mul	r2,r17,r18
    aec4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    aec8:	882b883a 	mov	r21,r17
    aecc:	00000a06 	br	aef8 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
    aed0:	b023883a 	mov	r17,r22
    aed4:	00000506 	br	aeec <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    aed8:	8c45883a 	add	r2,r17,r17
    aedc:	1405883a 	add	r2,r2,r16
    aee0:	b807883a 	mov	r3,r23
    aee4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    aee8:	8c400044 	addi	r17,r17,1
    aeec:	a47ffa2e 	bgeu	r20,r17,aed8 <__alt_data_end+0xf800aed8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    aef0:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    aef4:	ad400044 	addi	r21,r21,1
    aef8:	9d7ff52e 	bgeu	r19,r21,aed0 <__alt_data_end+0xf800aed0>
    aefc:	00001506 	br	af54 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    af00:	9485883a 	add	r2,r18,r18
    af04:	1085883a 	add	r2,r2,r2
    af08:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    af0c:	8c85383a 	mul	r2,r17,r18
    af10:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    af14:	882b883a 	mov	r21,r17
    af18:	00000b06 	br	af48 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
    af1c:	b023883a 	mov	r17,r22
    af20:	00000606 	br	af3c <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    af24:	8c45883a 	add	r2,r17,r17
    af28:	1085883a 	add	r2,r2,r2
    af2c:	1405883a 	add	r2,r2,r16
    af30:	b807883a 	mov	r3,r23
    af34:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    af38:	8c400044 	addi	r17,r17,1
    af3c:	a47ff92e 	bgeu	r20,r17,af24 <__alt_data_end+0xf800af24>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    af40:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    af44:	ad400044 	addi	r21,r21,1
    af48:	9d7ff42e 	bgeu	r19,r21,af1c <__alt_data_end+0xf800af1c>
    af4c:	00000106 	br	af54 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    af50:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
    af54:	e6fff804 	addi	sp,fp,-32
    af58:	df000817 	ldw	fp,32(sp)
    af5c:	ddc00717 	ldw	r23,28(sp)
    af60:	dd800617 	ldw	r22,24(sp)
    af64:	dd400517 	ldw	r21,20(sp)
    af68:	dd000417 	ldw	r20,16(sp)
    af6c:	dcc00317 	ldw	r19,12(sp)
    af70:	dc800217 	ldw	r18,8(sp)
    af74:	dc400117 	ldw	r17,4(sp)
    af78:	dc000017 	ldw	r16,0(sp)
    af7c:	dec00904 	addi	sp,sp,36
    af80:	f800283a 	ret

0000af84 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    af84:	defff404 	addi	sp,sp,-48
    af88:	df000b15 	stw	fp,44(sp)
    af8c:	dd800a15 	stw	r22,40(sp)
    af90:	dd400915 	stw	r21,36(sp)
    af94:	dd000815 	stw	r20,32(sp)
    af98:	dcc00715 	stw	r19,28(sp)
    af9c:	dc800615 	stw	r18,24(sp)
    afa0:	dc400515 	stw	r17,20(sp)
    afa4:	dc000415 	stw	r16,16(sp)
    afa8:	df000b04 	addi	fp,sp,44
    afac:	e13ff515 	stw	r4,-44(fp)
    afb0:	e17ff615 	stw	r5,-40(fp)
    afb4:	e1bff715 	stw	r6,-36(fp)
    afb8:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    afbc:	e0bff517 	ldw	r2,-44(fp)
    afc0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    afc4:	e0bff517 	ldw	r2,-44(fp)
    afc8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    afcc:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
    afd0:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
    afd4:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
    afd8:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    afdc:	9c40032e 	bgeu	r19,r17,afec <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
    afe0:	882d883a 	mov	r22,r17
		l_x = r_x;
    afe4:	9823883a 	mov	r17,r19
		r_x = temp;
    afe8:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    afec:	8c805d2e 	bgeu	r17,r18,b164 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
    aff0:	a4005c2e 	bgeu	r20,r16,b164 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    aff4:	9c800136 	bltu	r19,r18,affc <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
    aff8:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    affc:	e0800217 	ldw	r2,8(fp)
    b000:	10800058 	cmpnei	r2,r2,1
    b004:	1000031e 	bne	r2,zero,b014 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
    b008:	e0bff517 	ldw	r2,-44(fp)
    b00c:	14000c17 	ldw	r16,48(r2)
    b010:	00000206 	br	b01c <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
    b014:	e0bff517 	ldw	r2,-44(fp)
    b018:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    b01c:	e0bff517 	ldw	r2,-44(fp)
    b020:	10800d17 	ldw	r2,52(r2)
    b024:	1000231e 	bne	r2,zero,b0b4 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    b028:	e0bff517 	ldw	r2,-44(fp)
    b02c:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
    b030:	a484983a 	sll	r2,r20,r18
    b034:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b038:	e0bff517 	ldw	r2,-44(fp)
    b03c:	10800e17 	ldw	r2,56(r2)
    b040:	10800058 	cmpnei	r2,r2,1
    b044:	1000071e 	bne	r2,zero,b064 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
    b048:	00000406 	br	b05c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
    b04c:	8c05883a 	add	r2,r17,r16
    b050:	a807883a 	mov	r3,r21
    b054:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    b058:	8c400044 	addi	r17,r17,1
    b05c:	9c7ffb2e 	bgeu	r19,r17,b04c <__alt_data_end+0xf800b04c>
    b060:	00004106 	br	b168 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b064:	e0bff517 	ldw	r2,-44(fp)
    b068:	10800e17 	ldw	r2,56(r2)
    b06c:	10800098 	cmpnei	r2,r2,2
    b070:	10000e1e 	bne	r2,zero,b0ac <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
    b074:	00000506 	br	b08c <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    b078:	8c45883a 	add	r2,r17,r17
    b07c:	1405883a 	add	r2,r2,r16
    b080:	a807883a 	mov	r3,r21
    b084:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    b088:	8c400044 	addi	r17,r17,1
    b08c:	9c7ffa2e 	bgeu	r19,r17,b078 <__alt_data_end+0xf800b078>
    b090:	00003506 	br	b168 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    b094:	8c45883a 	add	r2,r17,r17
    b098:	1085883a 	add	r2,r2,r2
    b09c:	1405883a 	add	r2,r2,r16
    b0a0:	a807883a 	mov	r3,r21
    b0a4:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    b0a8:	8c400044 	addi	r17,r17,1
    b0ac:	9c7ff92e 	bgeu	r19,r17,b094 <__alt_data_end+0xf800b094>
    b0b0:	00002d06 	br	b168 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b0b4:	e0bff517 	ldw	r2,-44(fp)
    b0b8:	10800e17 	ldw	r2,56(r2)
    b0bc:	10800058 	cmpnei	r2,r2,1
    b0c0:	1000091e 	bne	r2,zero,b0e8 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
    b0c4:	a485383a 	mul	r2,r20,r18
    b0c8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    b0cc:	00000406 	br	b0e0 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    b0d0:	8c05883a 	add	r2,r17,r16
    b0d4:	a807883a 	mov	r3,r21
    b0d8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    b0dc:	8c400044 	addi	r17,r17,1
    b0e0:	9c7ffb2e 	bgeu	r19,r17,b0d0 <__alt_data_end+0xf800b0d0>
    b0e4:	00002006 	br	b168 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b0e8:	e0bff517 	ldw	r2,-44(fp)
    b0ec:	10800e17 	ldw	r2,56(r2)
    b0f0:	10800098 	cmpnei	r2,r2,2
    b0f4:	10000c1e 	bne	r2,zero,b128 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
    b0f8:	9485883a 	add	r2,r18,r18
    b0fc:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    b100:	a485383a 	mul	r2,r20,r18
    b104:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    b108:	00000506 	br	b120 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    b10c:	8c45883a 	add	r2,r17,r17
    b110:	1405883a 	add	r2,r2,r16
    b114:	a807883a 	mov	r3,r21
    b118:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    b11c:	8c400044 	addi	r17,r17,1
    b120:	9c7ffa2e 	bgeu	r19,r17,b10c <__alt_data_end+0xf800b10c>
    b124:	00001006 	br	b168 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    b128:	9485883a 	add	r2,r18,r18
    b12c:	1085883a 	add	r2,r2,r2
    b130:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    b134:	a485383a 	mul	r2,r20,r18
    b138:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    b13c:	00000606 	br	b158 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    b140:	8c45883a 	add	r2,r17,r17
    b144:	1085883a 	add	r2,r2,r2
    b148:	1405883a 	add	r2,r2,r16
    b14c:	a807883a 	mov	r3,r21
    b150:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    b154:	8c400044 	addi	r17,r17,1
    b158:	9c7ff92e 	bgeu	r19,r17,b140 <__alt_data_end+0xf800b140>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
    b15c:	84a1883a 	add	r16,r16,r18
    b160:	00000106 	br	b168 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    b164:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    b168:	e6fff904 	addi	sp,fp,-28
    b16c:	df000717 	ldw	fp,28(sp)
    b170:	dd800617 	ldw	r22,24(sp)
    b174:	dd400517 	ldw	r21,20(sp)
    b178:	dd000417 	ldw	r20,16(sp)
    b17c:	dcc00317 	ldw	r19,12(sp)
    b180:	dc800217 	ldw	r18,8(sp)
    b184:	dc400117 	ldw	r17,4(sp)
    b188:	dc000017 	ldw	r16,0(sp)
    b18c:	dec00804 	addi	sp,sp,32
    b190:	f800283a 	ret

0000b194 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    b194:	defff404 	addi	sp,sp,-48
    b198:	df000b15 	stw	fp,44(sp)
    b19c:	dd800a15 	stw	r22,40(sp)
    b1a0:	dd400915 	stw	r21,36(sp)
    b1a4:	dd000815 	stw	r20,32(sp)
    b1a8:	dcc00715 	stw	r19,28(sp)
    b1ac:	dc800615 	stw	r18,24(sp)
    b1b0:	dc400515 	stw	r17,20(sp)
    b1b4:	dc000415 	stw	r16,16(sp)
    b1b8:	df000b04 	addi	fp,sp,44
    b1bc:	e13ff515 	stw	r4,-44(fp)
    b1c0:	e17ff615 	stw	r5,-40(fp)
    b1c4:	e1bff715 	stw	r6,-36(fp)
    b1c8:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    b1cc:	e0bff517 	ldw	r2,-44(fp)
    b1d0:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    b1d4:	e0bff517 	ldw	r2,-44(fp)
    b1d8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
    b1dc:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
    b1e0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
    b1e4:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
    b1e8:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    b1ec:	9d00032e 	bgeu	r19,r20,b1fc <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
    b1f0:	a02b883a 	mov	r21,r20
		t_y = b_y;
    b1f4:	9829883a 	mov	r20,r19
		b_y = temp;
    b1f8:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    b1fc:	94406c2e 	bgeu	r18,r17,b3b0 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
    b200:	a4006b2e 	bgeu	r20,r16,b3b0 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    b204:	9c000136 	bltu	r19,r16,b20c <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
    b208:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    b20c:	e0800217 	ldw	r2,8(fp)
    b210:	10800058 	cmpnei	r2,r2,1
    b214:	1000031e 	bne	r2,zero,b224 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
    b218:	e0bff517 	ldw	r2,-44(fp)
    b21c:	14000c17 	ldw	r16,48(r2)
    b220:	00000206 	br	b22c <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
    b224:	e0bff517 	ldw	r2,-44(fp)
    b228:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    b22c:	e0bff517 	ldw	r2,-44(fp)
    b230:	10800d17 	ldw	r2,52(r2)
    b234:	1000301e 	bne	r2,zero,b2f8 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    b238:	e0bff517 	ldw	r2,-44(fp)
    b23c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
    b240:	a544983a 	sll	r2,r20,r21
    b244:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b248:	e0bff517 	ldw	r2,-44(fp)
    b24c:	10800e17 	ldw	r2,56(r2)
    b250:	10800058 	cmpnei	r2,r2,1
    b254:	10000b1e 	bne	r2,zero,b284 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
    b258:	a023883a 	mov	r17,r20
    b25c:	00000706 	br	b27c <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    b260:	9405883a 	add	r2,r18,r16
    b264:	b007883a 	mov	r3,r22
    b268:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    b26c:	00800044 	movi	r2,1
    b270:	1544983a 	sll	r2,r2,r21
    b274:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    b278:	8c400044 	addi	r17,r17,1
    b27c:	9c7ff82e 	bgeu	r19,r17,b260 <__alt_data_end+0xf800b260>
    b280:	00004c06 	br	b3b4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b284:	e0bff517 	ldw	r2,-44(fp)
    b288:	10800e17 	ldw	r2,56(r2)
    b28c:	10800098 	cmpnei	r2,r2,2
    b290:	10000c1e 	bne	r2,zero,b2c4 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
    b294:	a023883a 	mov	r17,r20
    b298:	00000806 	br	b2bc <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    b29c:	9485883a 	add	r2,r18,r18
    b2a0:	1405883a 	add	r2,r2,r16
    b2a4:	b007883a 	mov	r3,r22
    b2a8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    b2ac:	00800044 	movi	r2,1
    b2b0:	1544983a 	sll	r2,r2,r21
    b2b4:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    b2b8:	8c400044 	addi	r17,r17,1
    b2bc:	9c7ff72e 	bgeu	r19,r17,b29c <__alt_data_end+0xf800b29c>
    b2c0:	00003c06 	br	b3b4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    b2c4:	a023883a 	mov	r17,r20
    b2c8:	00000906 	br	b2f0 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    b2cc:	9485883a 	add	r2,r18,r18
    b2d0:	1085883a 	add	r2,r2,r2
    b2d4:	1405883a 	add	r2,r2,r16
    b2d8:	b007883a 	mov	r3,r22
    b2dc:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    b2e0:	00800044 	movi	r2,1
    b2e4:	1544983a 	sll	r2,r2,r21
    b2e8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    b2ec:	8c400044 	addi	r17,r17,1
    b2f0:	9c7ff62e 	bgeu	r19,r17,b2cc <__alt_data_end+0xf800b2cc>
    b2f4:	00002f06 	br	b3b4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    b2f8:	e0bff517 	ldw	r2,-44(fp)
    b2fc:	10800e17 	ldw	r2,56(r2)
    b300:	10800058 	cmpnei	r2,r2,1
    b304:	10000a1e 	bne	r2,zero,b330 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
    b308:	a445383a 	mul	r2,r20,r17
    b30c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    b310:	00000506 	br	b328 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    b314:	9405883a 	add	r2,r18,r16
    b318:	b007883a 	mov	r3,r22
    b31c:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    b320:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    b324:	a5000044 	addi	r20,r20,1
    b328:	9d3ffa2e 	bgeu	r19,r20,b314 <__alt_data_end+0xf800b314>
    b32c:	00002106 	br	b3b4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    b330:	e0bff517 	ldw	r2,-44(fp)
    b334:	10800e17 	ldw	r2,56(r2)
    b338:	10800098 	cmpnei	r2,r2,2
    b33c:	10000d1e 	bne	r2,zero,b374 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
    b340:	8c45883a 	add	r2,r17,r17
    b344:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    b348:	a445383a 	mul	r2,r20,r17
    b34c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    b350:	00000606 	br	b36c <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    b354:	9485883a 	add	r2,r18,r18
    b358:	1405883a 	add	r2,r2,r16
    b35c:	b007883a 	mov	r3,r22
    b360:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    b364:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    b368:	a5000044 	addi	r20,r20,1
    b36c:	9d3ff92e 	bgeu	r19,r20,b354 <__alt_data_end+0xf800b354>
    b370:	00001006 	br	b3b4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    b374:	8c45883a 	add	r2,r17,r17
    b378:	1085883a 	add	r2,r2,r2
    b37c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    b380:	a445383a 	mul	r2,r20,r17
    b384:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    b388:	00000706 	br	b3a8 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    b38c:	9485883a 	add	r2,r18,r18
    b390:	1085883a 	add	r2,r2,r2
    b394:	1405883a 	add	r2,r2,r16
    b398:	b007883a 	mov	r3,r22
    b39c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    b3a0:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    b3a4:	a5000044 	addi	r20,r20,1
    b3a8:	9d3ff82e 	bgeu	r19,r20,b38c <__alt_data_end+0xf800b38c>
    b3ac:	00000106 	br	b3b4 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    b3b0:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    b3b4:	e6fff904 	addi	sp,fp,-28
    b3b8:	df000717 	ldw	fp,28(sp)
    b3bc:	dd800617 	ldw	r22,24(sp)
    b3c0:	dd400517 	ldw	r21,20(sp)
    b3c4:	dd000417 	ldw	r20,16(sp)
    b3c8:	dcc00317 	ldw	r19,12(sp)
    b3cc:	dc800217 	ldw	r18,8(sp)
    b3d0:	dc400117 	ldw	r17,4(sp)
    b3d4:	dc000017 	ldw	r16,0(sp)
    b3d8:	dec00804 	addi	sp,sp,32
    b3dc:	f800283a 	ret

0000b3e0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    b3e0:	defff804 	addi	sp,sp,-32
    b3e4:	dfc00715 	stw	ra,28(sp)
    b3e8:	df000615 	stw	fp,24(sp)
    b3ec:	df000604 	addi	fp,sp,24
    b3f0:	e13ffc15 	stw	r4,-16(fp)
    b3f4:	e17ffd15 	stw	r5,-12(fp)
    b3f8:	e1bffe15 	stw	r6,-8(fp)
    b3fc:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    b400:	e0800417 	ldw	r2,16(fp)
    b404:	d8800115 	stw	r2,4(sp)
    b408:	e0800317 	ldw	r2,12(fp)
    b40c:	d8800015 	stw	r2,0(sp)
    b410:	e1fffe17 	ldw	r7,-8(fp)
    b414:	e1bfff17 	ldw	r6,-4(fp)
    b418:	e17ffd17 	ldw	r5,-12(fp)
    b41c:	e13ffc17 	ldw	r4,-16(fp)
    b420:	000af840 	call	af84 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    b424:	e0800417 	ldw	r2,16(fp)
    b428:	d8800115 	stw	r2,4(sp)
    b42c:	e0800317 	ldw	r2,12(fp)
    b430:	d8800015 	stw	r2,0(sp)
    b434:	e1c00217 	ldw	r7,8(fp)
    b438:	e1bfff17 	ldw	r6,-4(fp)
    b43c:	e17ffd17 	ldw	r5,-12(fp)
    b440:	e13ffc17 	ldw	r4,-16(fp)
    b444:	000af840 	call	af84 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    b448:	e0800417 	ldw	r2,16(fp)
    b44c:	d8800115 	stw	r2,4(sp)
    b450:	e0800317 	ldw	r2,12(fp)
    b454:	d8800015 	stw	r2,0(sp)
    b458:	e1c00217 	ldw	r7,8(fp)
    b45c:	e1bffe17 	ldw	r6,-8(fp)
    b460:	e17ffd17 	ldw	r5,-12(fp)
    b464:	e13ffc17 	ldw	r4,-16(fp)
    b468:	000b1940 	call	b194 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    b46c:	e0800417 	ldw	r2,16(fp)
    b470:	d8800115 	stw	r2,4(sp)
    b474:	e0800317 	ldw	r2,12(fp)
    b478:	d8800015 	stw	r2,0(sp)
    b47c:	e1c00217 	ldw	r7,8(fp)
    b480:	e1bffe17 	ldw	r6,-8(fp)
    b484:	e17fff17 	ldw	r5,-4(fp)
    b488:	e13ffc17 	ldw	r4,-16(fp)
    b48c:	000b1940 	call	b194 <alt_up_pixel_buffer_dma_draw_vline>
}
    b490:	0001883a 	nop
    b494:	e037883a 	mov	sp,fp
    b498:	dfc00117 	ldw	ra,4(sp)
    b49c:	df000017 	ldw	fp,0(sp)
    b4a0:	dec00204 	addi	sp,sp,8
    b4a4:	f800283a 	ret

0000b4a8 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    b4a8:	deffff04 	addi	sp,sp,-4
    b4ac:	df000015 	stw	fp,0(sp)
    b4b0:	d839883a 	mov	fp,sp
    b4b4:	2005883a 	mov	r2,r4
    b4b8:	3007883a 	mov	r3,r6
    b4bc:	3809883a 	mov	r4,r7
    b4c0:	e1800117 	ldw	r6,4(fp)
    b4c4:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
    b4c8:	3800051e 	bne	r7,zero,b4e0 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    b4cc:	2909383a 	mul	r4,r5,r4
    b4d0:	20c7883a 	add	r3,r4,r3
    b4d4:	1885883a 	add	r2,r3,r2
    b4d8:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
    b4dc:	00000e06 	br	b518 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
    b4e0:	39c00058 	cmpnei	r7,r7,1
    b4e4:	3800061e 	bne	r7,zero,b500 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    b4e8:	2909383a 	mul	r4,r5,r4
    b4ec:	20c7883a 	add	r3,r4,r3
    b4f0:	18c7883a 	add	r3,r3,r3
    b4f4:	1885883a 	add	r2,r3,r2
    b4f8:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
    b4fc:	00000606 	br	b518 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    b500:	2909383a 	mul	r4,r5,r4
    b504:	20c7883a 	add	r3,r4,r3
    b508:	18c7883a 	add	r3,r3,r3
    b50c:	18c7883a 	add	r3,r3,r3
    b510:	1885883a 	add	r2,r3,r2
    b514:	11800035 	stwio	r6,0(r2)
}
    b518:	0001883a 	nop
    b51c:	e037883a 	mov	sp,fp
    b520:	df000017 	ldw	fp,0(sp)
    b524:	dec00104 	addi	sp,sp,4
    b528:	f800283a 	ret

0000b52c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    b52c:	deffeb04 	addi	sp,sp,-84
    b530:	dfc01415 	stw	ra,80(sp)
    b534:	df001315 	stw	fp,76(sp)
    b538:	ddc01215 	stw	r23,72(sp)
    b53c:	dd801115 	stw	r22,68(sp)
    b540:	dd401015 	stw	r21,64(sp)
    b544:	dd000f15 	stw	r20,60(sp)
    b548:	dcc00e15 	stw	r19,56(sp)
    b54c:	dc800d15 	stw	r18,52(sp)
    b550:	dc400c15 	stw	r17,48(sp)
    b554:	dc000b15 	stw	r16,44(sp)
    b558:	df001304 	addi	fp,sp,76
    b55c:	e13fef15 	stw	r4,-68(fp)
    b560:	e17ff015 	stw	r5,-64(fp)
    b564:	e1bff115 	stw	r6,-60(fp)
    b568:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
    b56c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
    b570:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
    b574:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
    b578:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    b57c:	a4c5c83a 	sub	r2,r20,r19
    b580:	1000010e 	bge	r2,zero,b588 <alt_up_pixel_buffer_dma_draw_line+0x5c>
    b584:	0085c83a 	sub	r2,zero,r2
    b588:	1007883a 	mov	r3,r2
    b58c:	9445c83a 	sub	r2,r18,r17
    b590:	1000010e 	bge	r2,zero,b598 <alt_up_pixel_buffer_dma_draw_line+0x6c>
    b594:	0085c83a 	sub	r2,zero,r2
    b598:	10c4803a 	cmplt	r2,r2,r3
    b59c:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    b5a0:	e0bfef17 	ldw	r2,-68(fp)
    b5a4:	10800e17 	ldw	r2,56(r2)
    b5a8:	10800060 	cmpeqi	r2,r2,1
    b5ac:	1000081e 	bne	r2,zero,b5d0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    b5b0:	e0bfef17 	ldw	r2,-68(fp)
    b5b4:	10800e17 	ldw	r2,56(r2)
    b5b8:	10800098 	cmpnei	r2,r2,2
    b5bc:	1000021e 	bne	r2,zero,b5c8 <alt_up_pixel_buffer_dma_draw_line+0x9c>
    b5c0:	00800044 	movi	r2,1
    b5c4:	00000306 	br	b5d4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
    b5c8:	00800084 	movi	r2,2
    b5cc:	00000106 	br	b5d4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    b5d0:	0005883a 	mov	r2,zero
    b5d4:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
    b5d8:	e0800317 	ldw	r2,12(fp)
    b5dc:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    b5e0:	e0bfef17 	ldw	r2,-68(fp)
    b5e4:	10800d17 	ldw	r2,52(r2)
    b5e8:	1000071e 	bne	r2,zero,b608 <alt_up_pixel_buffer_dma_draw_line+0xdc>
    b5ec:	e0bfef17 	ldw	r2,-68(fp)
    b5f0:	10801317 	ldw	r2,76(r2)
    b5f4:	e0fff417 	ldw	r3,-48(fp)
    b5f8:	10c5c83a 	sub	r2,r2,r3
    b5fc:	00c00044 	movi	r3,1
    b600:	1884983a 	sll	r2,r3,r2
    b604:	00000206 	br	b610 <alt_up_pixel_buffer_dma_draw_line+0xe4>
    b608:	e0bfef17 	ldw	r2,-68(fp)
    b60c:	10800f17 	ldw	r2,60(r2)
    b610:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
    b614:	e0800417 	ldw	r2,16(fp)
    b618:	10800058 	cmpnei	r2,r2,1
    b61c:	1000031e 	bne	r2,zero,b62c <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
    b620:	e0bfef17 	ldw	r2,-68(fp)
    b624:	15c00c17 	ldw	r23,48(r2)
    b628:	00000206 	br	b634 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    b62c:	e0bfef17 	ldw	r2,-68(fp)
    b630:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
    b634:	e0bff307 	ldb	r2,-52(fp)
    b638:	0080060e 	bge	zero,r2,b654 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
    b63c:	8821883a 	mov	r16,r17
		x_0 = y_0;
    b640:	9823883a 	mov	r17,r19
		y_0 = error;
    b644:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
    b648:	9021883a 	mov	r16,r18
		x_1 = y_1;
    b64c:	a025883a 	mov	r18,r20
		y_1 = error;
    b650:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
    b654:	9440060e 	bge	r18,r17,b670 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
    b658:	8821883a 	mov	r16,r17
		x_0 = x_1;
    b65c:	9023883a 	mov	r17,r18
		x_1 = error;
    b660:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
    b664:	9821883a 	mov	r16,r19
		y_0 = y_1;
    b668:	a027883a 	mov	r19,r20
		y_1 = error;
    b66c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    b670:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
    b674:	a4c5c83a 	sub	r2,r20,r19
    b678:	1000010e 	bge	r2,zero,b680 <alt_up_pixel_buffer_dma_draw_line+0x154>
    b67c:	0085c83a 	sub	r2,zero,r2
    b680:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
    b684:	a804d7fa 	srli	r2,r21,31
    b688:	1545883a 	add	r2,r2,r21
    b68c:	1005d07a 	srai	r2,r2,1
    b690:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
    b694:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
    b698:	9d00020e 	bge	r19,r20,b6a4 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
    b69c:	04c00044 	movi	r19,1
    b6a0:	00000106 	br	b6a8 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
    b6a4:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    b6a8:	e0bff307 	ldb	r2,-52(fp)
    b6ac:	10800058 	cmpnei	r2,r2,1
    b6b0:	1000211e 	bne	r2,zero,b738 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
    b6b4:	00000f06 	br	b6f4 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    b6b8:	e0bff417 	ldw	r2,-48(fp)
    b6bc:	d8800115 	stw	r2,4(sp)
    b6c0:	e0bff517 	ldw	r2,-44(fp)
    b6c4:	d8800015 	stw	r2,0(sp)
    b6c8:	880f883a 	mov	r7,r17
    b6cc:	b00d883a 	mov	r6,r22
    b6d0:	e17ff617 	ldw	r5,-40(fp)
    b6d4:	b809883a 	mov	r4,r23
    b6d8:	000b4a80 	call	b4a8 <helper_plot_pixel>
			error = error + deltay;
    b6dc:	e0bff717 	ldw	r2,-36(fp)
    b6e0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    b6e4:	0400020e 	bge	zero,r16,b6f0 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
    b6e8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    b6ec:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    b6f0:	8c400044 	addi	r17,r17,1
    b6f4:	947ff00e 	bge	r18,r17,b6b8 <__alt_data_end+0xf800b6b8>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    b6f8:	00001006 	br	b73c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    b6fc:	e0bff417 	ldw	r2,-48(fp)
    b700:	d8800115 	stw	r2,4(sp)
    b704:	e0bff517 	ldw	r2,-44(fp)
    b708:	d8800015 	stw	r2,0(sp)
    b70c:	b00f883a 	mov	r7,r22
    b710:	880d883a 	mov	r6,r17
    b714:	e17ff617 	ldw	r5,-40(fp)
    b718:	b809883a 	mov	r4,r23
    b71c:	000b4a80 	call	b4a8 <helper_plot_pixel>
			error = error + deltay;
    b720:	e0bff717 	ldw	r2,-36(fp)
    b724:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    b728:	0400020e 	bge	zero,r16,b734 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
    b72c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    b730:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    b734:	8c400044 	addi	r17,r17,1
    b738:	947ff00e 	bge	r18,r17,b6fc <__alt_data_end+0xf800b6fc>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    b73c:	0001883a 	nop
    b740:	e6fff804 	addi	sp,fp,-32
    b744:	dfc00917 	ldw	ra,36(sp)
    b748:	df000817 	ldw	fp,32(sp)
    b74c:	ddc00717 	ldw	r23,28(sp)
    b750:	dd800617 	ldw	r22,24(sp)
    b754:	dd400517 	ldw	r21,20(sp)
    b758:	dd000417 	ldw	r20,16(sp)
    b75c:	dcc00317 	ldw	r19,12(sp)
    b760:	dc800217 	ldw	r18,8(sp)
    b764:	dc400117 	ldw	r17,4(sp)
    b768:	dc000017 	ldw	r16,0(sp)
    b76c:	dec00a04 	addi	sp,sp,40
    b770:	f800283a 	ret

0000b774 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b774:	defff504 	addi	sp,sp,-44
    b778:	df000a15 	stw	fp,40(sp)
    b77c:	df000a04 	addi	fp,sp,40
    b780:	e13ffc15 	stw	r4,-16(fp)
    b784:	e17ffd15 	stw	r5,-12(fp)
    b788:	e1bffe15 	stw	r6,-8(fp)
    b78c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b790:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b794:	d0a71b17 	ldw	r2,-25492(gp)
  
  if (alt_ticks_per_second ())
    b798:	10003c26 	beq	r2,zero,b88c <alt_alarm_start+0x118>
  {
    if (alarm)
    b79c:	e0bffc17 	ldw	r2,-16(fp)
    b7a0:	10003826 	beq	r2,zero,b884 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    b7a4:	e0bffc17 	ldw	r2,-16(fp)
    b7a8:	e0fffe17 	ldw	r3,-8(fp)
    b7ac:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b7b0:	e0bffc17 	ldw	r2,-16(fp)
    b7b4:	e0ffff17 	ldw	r3,-4(fp)
    b7b8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b7bc:	0005303a 	rdctl	r2,status
    b7c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b7c4:	e0fff917 	ldw	r3,-28(fp)
    b7c8:	00bfff84 	movi	r2,-2
    b7cc:	1884703a 	and	r2,r3,r2
    b7d0:	1001703a 	wrctl	status,r2
  
  return context;
    b7d4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    b7d8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b7dc:	d0a71c17 	ldw	r2,-25488(gp)
      
      current_nticks = alt_nticks();
    b7e0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b7e4:	e0fffd17 	ldw	r3,-12(fp)
    b7e8:	e0bff617 	ldw	r2,-40(fp)
    b7ec:	1885883a 	add	r2,r3,r2
    b7f0:	10c00044 	addi	r3,r2,1
    b7f4:	e0bffc17 	ldw	r2,-16(fp)
    b7f8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b7fc:	e0bffc17 	ldw	r2,-16(fp)
    b800:	10c00217 	ldw	r3,8(r2)
    b804:	e0bff617 	ldw	r2,-40(fp)
    b808:	1880042e 	bgeu	r3,r2,b81c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    b80c:	e0bffc17 	ldw	r2,-16(fp)
    b810:	00c00044 	movi	r3,1
    b814:	10c00405 	stb	r3,16(r2)
    b818:	00000206 	br	b824 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    b81c:	e0bffc17 	ldw	r2,-16(fp)
    b820:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b824:	e0bffc17 	ldw	r2,-16(fp)
    b828:	d0e00904 	addi	r3,gp,-32732
    b82c:	e0fffa15 	stw	r3,-24(fp)
    b830:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b834:	e0bffb17 	ldw	r2,-20(fp)
    b838:	e0fffa17 	ldw	r3,-24(fp)
    b83c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b840:	e0bffa17 	ldw	r2,-24(fp)
    b844:	10c00017 	ldw	r3,0(r2)
    b848:	e0bffb17 	ldw	r2,-20(fp)
    b84c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b850:	e0bffa17 	ldw	r2,-24(fp)
    b854:	10800017 	ldw	r2,0(r2)
    b858:	e0fffb17 	ldw	r3,-20(fp)
    b85c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b860:	e0bffa17 	ldw	r2,-24(fp)
    b864:	e0fffb17 	ldw	r3,-20(fp)
    b868:	10c00015 	stw	r3,0(r2)
    b86c:	e0bff817 	ldw	r2,-32(fp)
    b870:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b874:	e0bff717 	ldw	r2,-36(fp)
    b878:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b87c:	0005883a 	mov	r2,zero
    b880:	00000306 	br	b890 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    b884:	00bffa84 	movi	r2,-22
    b888:	00000106 	br	b890 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    b88c:	00bfde84 	movi	r2,-134
  }
}
    b890:	e037883a 	mov	sp,fp
    b894:	df000017 	ldw	fp,0(sp)
    b898:	dec00104 	addi	sp,sp,4
    b89c:	f800283a 	ret

0000b8a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b8a0:	defffe04 	addi	sp,sp,-8
    b8a4:	dfc00115 	stw	ra,4(sp)
    b8a8:	df000015 	stw	fp,0(sp)
    b8ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b8b0:	d0a01017 	ldw	r2,-32704(gp)
    b8b4:	10000326 	beq	r2,zero,b8c4 <alt_get_errno+0x24>
    b8b8:	d0a01017 	ldw	r2,-32704(gp)
    b8bc:	103ee83a 	callr	r2
    b8c0:	00000106 	br	b8c8 <alt_get_errno+0x28>
    b8c4:	d0a71204 	addi	r2,gp,-25528
}
    b8c8:	e037883a 	mov	sp,fp
    b8cc:	dfc00117 	ldw	ra,4(sp)
    b8d0:	df000017 	ldw	fp,0(sp)
    b8d4:	dec00204 	addi	sp,sp,8
    b8d8:	f800283a 	ret

0000b8dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b8dc:	defffb04 	addi	sp,sp,-20
    b8e0:	dfc00415 	stw	ra,16(sp)
    b8e4:	df000315 	stw	fp,12(sp)
    b8e8:	df000304 	addi	fp,sp,12
    b8ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b8f0:	e0bfff17 	ldw	r2,-4(fp)
    b8f4:	10000616 	blt	r2,zero,b910 <close+0x34>
    b8f8:	e0bfff17 	ldw	r2,-4(fp)
    b8fc:	10c00324 	muli	r3,r2,12
    b900:	00800074 	movhi	r2,1
    b904:	10bab204 	addi	r2,r2,-5432
    b908:	1885883a 	add	r2,r3,r2
    b90c:	00000106 	br	b914 <close+0x38>
    b910:	0005883a 	mov	r2,zero
    b914:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    b918:	e0bffd17 	ldw	r2,-12(fp)
    b91c:	10001926 	beq	r2,zero,b984 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b920:	e0bffd17 	ldw	r2,-12(fp)
    b924:	10800017 	ldw	r2,0(r2)
    b928:	10800417 	ldw	r2,16(r2)
    b92c:	10000626 	beq	r2,zero,b948 <close+0x6c>
    b930:	e0bffd17 	ldw	r2,-12(fp)
    b934:	10800017 	ldw	r2,0(r2)
    b938:	10800417 	ldw	r2,16(r2)
    b93c:	e13ffd17 	ldw	r4,-12(fp)
    b940:	103ee83a 	callr	r2
    b944:	00000106 	br	b94c <close+0x70>
    b948:	0005883a 	mov	r2,zero
    b94c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b950:	e13fff17 	ldw	r4,-4(fp)
    b954:	000c0180 	call	c018 <alt_release_fd>
    if (rval < 0)
    b958:	e0bffe17 	ldw	r2,-8(fp)
    b95c:	1000070e 	bge	r2,zero,b97c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    b960:	000b8a00 	call	b8a0 <alt_get_errno>
    b964:	1007883a 	mov	r3,r2
    b968:	e0bffe17 	ldw	r2,-8(fp)
    b96c:	0085c83a 	sub	r2,zero,r2
    b970:	18800015 	stw	r2,0(r3)
      return -1;
    b974:	00bfffc4 	movi	r2,-1
    b978:	00000706 	br	b998 <close+0xbc>
    }
    return 0;
    b97c:	0005883a 	mov	r2,zero
    b980:	00000506 	br	b998 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b984:	000b8a00 	call	b8a0 <alt_get_errno>
    b988:	1007883a 	mov	r3,r2
    b98c:	00801444 	movi	r2,81
    b990:	18800015 	stw	r2,0(r3)
    return -1;
    b994:	00bfffc4 	movi	r2,-1
  }
}
    b998:	e037883a 	mov	sp,fp
    b99c:	dfc00117 	ldw	ra,4(sp)
    b9a0:	df000017 	ldw	fp,0(sp)
    b9a4:	dec00204 	addi	sp,sp,8
    b9a8:	f800283a 	ret

0000b9ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b9ac:	defffe04 	addi	sp,sp,-8
    b9b0:	df000115 	stw	fp,4(sp)
    b9b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    b9b8:	e03fff15 	stw	zero,-4(fp)
    b9bc:	00000506 	br	b9d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    b9c0:	e0bfff17 	ldw	r2,-4(fp)
    b9c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    b9c8:	e0bfff17 	ldw	r2,-4(fp)
    b9cc:	10800804 	addi	r2,r2,32
    b9d0:	e0bfff15 	stw	r2,-4(fp)
    b9d4:	e0bfff17 	ldw	r2,-4(fp)
    b9d8:	10820030 	cmpltui	r2,r2,2048
    b9dc:	103ff81e 	bne	r2,zero,b9c0 <__alt_data_end+0xf800b9c0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b9e0:	0001883a 	nop
    b9e4:	e037883a 	mov	sp,fp
    b9e8:	df000017 	ldw	fp,0(sp)
    b9ec:	dec00104 	addi	sp,sp,4
    b9f0:	f800283a 	ret

0000b9f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b9f4:	defffc04 	addi	sp,sp,-16
    b9f8:	df000315 	stw	fp,12(sp)
    b9fc:	df000304 	addi	fp,sp,12
    ba00:	e13ffd15 	stw	r4,-12(fp)
    ba04:	e17ffe15 	stw	r5,-8(fp)
    ba08:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ba0c:	e0bfff17 	ldw	r2,-4(fp)
}
    ba10:	e037883a 	mov	sp,fp
    ba14:	df000017 	ldw	fp,0(sp)
    ba18:	dec00104 	addi	sp,sp,4
    ba1c:	f800283a 	ret

0000ba20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ba20:	defffe04 	addi	sp,sp,-8
    ba24:	dfc00115 	stw	ra,4(sp)
    ba28:	df000015 	stw	fp,0(sp)
    ba2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ba30:	d0a01017 	ldw	r2,-32704(gp)
    ba34:	10000326 	beq	r2,zero,ba44 <alt_get_errno+0x24>
    ba38:	d0a01017 	ldw	r2,-32704(gp)
    ba3c:	103ee83a 	callr	r2
    ba40:	00000106 	br	ba48 <alt_get_errno+0x28>
    ba44:	d0a71204 	addi	r2,gp,-25528
}
    ba48:	e037883a 	mov	sp,fp
    ba4c:	dfc00117 	ldw	ra,4(sp)
    ba50:	df000017 	ldw	fp,0(sp)
    ba54:	dec00204 	addi	sp,sp,8
    ba58:	f800283a 	ret

0000ba5c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ba5c:	defffa04 	addi	sp,sp,-24
    ba60:	dfc00515 	stw	ra,20(sp)
    ba64:	df000415 	stw	fp,16(sp)
    ba68:	df000404 	addi	fp,sp,16
    ba6c:	e13ffe15 	stw	r4,-8(fp)
    ba70:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ba74:	e0bffe17 	ldw	r2,-8(fp)
    ba78:	10000326 	beq	r2,zero,ba88 <alt_dev_llist_insert+0x2c>
    ba7c:	e0bffe17 	ldw	r2,-8(fp)
    ba80:	10800217 	ldw	r2,8(r2)
    ba84:	1000061e 	bne	r2,zero,baa0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ba88:	000ba200 	call	ba20 <alt_get_errno>
    ba8c:	1007883a 	mov	r3,r2
    ba90:	00800584 	movi	r2,22
    ba94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ba98:	00bffa84 	movi	r2,-22
    ba9c:	00001306 	br	baec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    baa0:	e0bffe17 	ldw	r2,-8(fp)
    baa4:	e0ffff17 	ldw	r3,-4(fp)
    baa8:	e0fffc15 	stw	r3,-16(fp)
    baac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bab0:	e0bffd17 	ldw	r2,-12(fp)
    bab4:	e0fffc17 	ldw	r3,-16(fp)
    bab8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    babc:	e0bffc17 	ldw	r2,-16(fp)
    bac0:	10c00017 	ldw	r3,0(r2)
    bac4:	e0bffd17 	ldw	r2,-12(fp)
    bac8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bacc:	e0bffc17 	ldw	r2,-16(fp)
    bad0:	10800017 	ldw	r2,0(r2)
    bad4:	e0fffd17 	ldw	r3,-12(fp)
    bad8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    badc:	e0bffc17 	ldw	r2,-16(fp)
    bae0:	e0fffd17 	ldw	r3,-12(fp)
    bae4:	10c00015 	stw	r3,0(r2)

  return 0;  
    bae8:	0005883a 	mov	r2,zero
}
    baec:	e037883a 	mov	sp,fp
    baf0:	dfc00117 	ldw	ra,4(sp)
    baf4:	df000017 	ldw	fp,0(sp)
    baf8:	dec00204 	addi	sp,sp,8
    bafc:	f800283a 	ret

0000bb00 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bb00:	defffd04 	addi	sp,sp,-12
    bb04:	dfc00215 	stw	ra,8(sp)
    bb08:	df000115 	stw	fp,4(sp)
    bb0c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bb10:	00800074 	movhi	r2,1
    bb14:	10b3ce04 	addi	r2,r2,-12488
    bb18:	e0bfff15 	stw	r2,-4(fp)
    bb1c:	00000606 	br	bb38 <_do_ctors+0x38>
        (*ctor) (); 
    bb20:	e0bfff17 	ldw	r2,-4(fp)
    bb24:	10800017 	ldw	r2,0(r2)
    bb28:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bb2c:	e0bfff17 	ldw	r2,-4(fp)
    bb30:	10bfff04 	addi	r2,r2,-4
    bb34:	e0bfff15 	stw	r2,-4(fp)
    bb38:	e0ffff17 	ldw	r3,-4(fp)
    bb3c:	00800074 	movhi	r2,1
    bb40:	10b3cf04 	addi	r2,r2,-12484
    bb44:	18bff62e 	bgeu	r3,r2,bb20 <__alt_data_end+0xf800bb20>
        (*ctor) (); 
}
    bb48:	0001883a 	nop
    bb4c:	e037883a 	mov	sp,fp
    bb50:	dfc00117 	ldw	ra,4(sp)
    bb54:	df000017 	ldw	fp,0(sp)
    bb58:	dec00204 	addi	sp,sp,8
    bb5c:	f800283a 	ret

0000bb60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bb60:	defffd04 	addi	sp,sp,-12
    bb64:	dfc00215 	stw	ra,8(sp)
    bb68:	df000115 	stw	fp,4(sp)
    bb6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bb70:	00800074 	movhi	r2,1
    bb74:	10b3ce04 	addi	r2,r2,-12488
    bb78:	e0bfff15 	stw	r2,-4(fp)
    bb7c:	00000606 	br	bb98 <_do_dtors+0x38>
        (*dtor) (); 
    bb80:	e0bfff17 	ldw	r2,-4(fp)
    bb84:	10800017 	ldw	r2,0(r2)
    bb88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bb8c:	e0bfff17 	ldw	r2,-4(fp)
    bb90:	10bfff04 	addi	r2,r2,-4
    bb94:	e0bfff15 	stw	r2,-4(fp)
    bb98:	e0ffff17 	ldw	r3,-4(fp)
    bb9c:	00800074 	movhi	r2,1
    bba0:	10b3cf04 	addi	r2,r2,-12484
    bba4:	18bff62e 	bgeu	r3,r2,bb80 <__alt_data_end+0xf800bb80>
        (*dtor) (); 
}
    bba8:	0001883a 	nop
    bbac:	e037883a 	mov	sp,fp
    bbb0:	dfc00117 	ldw	ra,4(sp)
    bbb4:	df000017 	ldw	fp,0(sp)
    bbb8:	dec00204 	addi	sp,sp,8
    bbbc:	f800283a 	ret

0000bbc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    bbc0:	defffa04 	addi	sp,sp,-24
    bbc4:	dfc00515 	stw	ra,20(sp)
    bbc8:	df000415 	stw	fp,16(sp)
    bbcc:	df000404 	addi	fp,sp,16
    bbd0:	e13ffe15 	stw	r4,-8(fp)
    bbd4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    bbd8:	e0bfff17 	ldw	r2,-4(fp)
    bbdc:	10800017 	ldw	r2,0(r2)
    bbe0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    bbe4:	e13ffe17 	ldw	r4,-8(fp)
    bbe8:	000c4ec0 	call	c4ec <strlen>
    bbec:	10800044 	addi	r2,r2,1
    bbf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    bbf4:	00000d06 	br	bc2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    bbf8:	e0bffc17 	ldw	r2,-16(fp)
    bbfc:	10800217 	ldw	r2,8(r2)
    bc00:	e0fffd17 	ldw	r3,-12(fp)
    bc04:	180d883a 	mov	r6,r3
    bc08:	e17ffe17 	ldw	r5,-8(fp)
    bc0c:	1009883a 	mov	r4,r2
    bc10:	000c3280 	call	c328 <memcmp>
    bc14:	1000021e 	bne	r2,zero,bc20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    bc18:	e0bffc17 	ldw	r2,-16(fp)
    bc1c:	00000706 	br	bc3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    bc20:	e0bffc17 	ldw	r2,-16(fp)
    bc24:	10800017 	ldw	r2,0(r2)
    bc28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    bc2c:	e0fffc17 	ldw	r3,-16(fp)
    bc30:	e0bfff17 	ldw	r2,-4(fp)
    bc34:	18bff01e 	bne	r3,r2,bbf8 <__alt_data_end+0xf800bbf8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    bc38:	0005883a 	mov	r2,zero
}
    bc3c:	e037883a 	mov	sp,fp
    bc40:	dfc00117 	ldw	ra,4(sp)
    bc44:	df000017 	ldw	fp,0(sp)
    bc48:	dec00204 	addi	sp,sp,8
    bc4c:	f800283a 	ret

0000bc50 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    bc50:	defffe04 	addi	sp,sp,-8
    bc54:	dfc00115 	stw	ra,4(sp)
    bc58:	df000015 	stw	fp,0(sp)
    bc5c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    bc60:	01440004 	movi	r5,4096
    bc64:	0009883a 	mov	r4,zero
    bc68:	000c24c0 	call	c24c <alt_icache_flush>
#endif
}
    bc6c:	0001883a 	nop
    bc70:	e037883a 	mov	sp,fp
    bc74:	dfc00117 	ldw	ra,4(sp)
    bc78:	df000017 	ldw	fp,0(sp)
    bc7c:	dec00204 	addi	sp,sp,8
    bc80:	f800283a 	ret

0000bc84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bc84:	defff904 	addi	sp,sp,-28
    bc88:	dfc00615 	stw	ra,24(sp)
    bc8c:	df000515 	stw	fp,20(sp)
    bc90:	df000504 	addi	fp,sp,20
    bc94:	e13ffc15 	stw	r4,-16(fp)
    bc98:	e17ffd15 	stw	r5,-12(fp)
    bc9c:	e1bffe15 	stw	r6,-8(fp)
    bca0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    bca4:	e1bfff17 	ldw	r6,-4(fp)
    bca8:	e17ffe17 	ldw	r5,-8(fp)
    bcac:	e13ffd17 	ldw	r4,-12(fp)
    bcb0:	000bec40 	call	bec4 <open>
    bcb4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    bcb8:	e0bffb17 	ldw	r2,-20(fp)
    bcbc:	10001c16 	blt	r2,zero,bd30 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    bcc0:	00800074 	movhi	r2,1
    bcc4:	10bab204 	addi	r2,r2,-5432
    bcc8:	e0fffb17 	ldw	r3,-20(fp)
    bccc:	18c00324 	muli	r3,r3,12
    bcd0:	10c5883a 	add	r2,r2,r3
    bcd4:	10c00017 	ldw	r3,0(r2)
    bcd8:	e0bffc17 	ldw	r2,-16(fp)
    bcdc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bce0:	00800074 	movhi	r2,1
    bce4:	10bab204 	addi	r2,r2,-5432
    bce8:	e0fffb17 	ldw	r3,-20(fp)
    bcec:	18c00324 	muli	r3,r3,12
    bcf0:	10c5883a 	add	r2,r2,r3
    bcf4:	10800104 	addi	r2,r2,4
    bcf8:	10c00017 	ldw	r3,0(r2)
    bcfc:	e0bffc17 	ldw	r2,-16(fp)
    bd00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bd04:	00800074 	movhi	r2,1
    bd08:	10bab204 	addi	r2,r2,-5432
    bd0c:	e0fffb17 	ldw	r3,-20(fp)
    bd10:	18c00324 	muli	r3,r3,12
    bd14:	10c5883a 	add	r2,r2,r3
    bd18:	10800204 	addi	r2,r2,8
    bd1c:	10c00017 	ldw	r3,0(r2)
    bd20:	e0bffc17 	ldw	r2,-16(fp)
    bd24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bd28:	e13ffb17 	ldw	r4,-20(fp)
    bd2c:	000c0180 	call	c018 <alt_release_fd>
  }
} 
    bd30:	0001883a 	nop
    bd34:	e037883a 	mov	sp,fp
    bd38:	dfc00117 	ldw	ra,4(sp)
    bd3c:	df000017 	ldw	fp,0(sp)
    bd40:	dec00204 	addi	sp,sp,8
    bd44:	f800283a 	ret

0000bd48 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bd48:	defffb04 	addi	sp,sp,-20
    bd4c:	dfc00415 	stw	ra,16(sp)
    bd50:	df000315 	stw	fp,12(sp)
    bd54:	df000304 	addi	fp,sp,12
    bd58:	e13ffd15 	stw	r4,-12(fp)
    bd5c:	e17ffe15 	stw	r5,-8(fp)
    bd60:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bd64:	01c07fc4 	movi	r7,511
    bd68:	01800044 	movi	r6,1
    bd6c:	e17ffd17 	ldw	r5,-12(fp)
    bd70:	01000074 	movhi	r4,1
    bd74:	213ab504 	addi	r4,r4,-5420
    bd78:	000bc840 	call	bc84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bd7c:	01c07fc4 	movi	r7,511
    bd80:	000d883a 	mov	r6,zero
    bd84:	e17ffe17 	ldw	r5,-8(fp)
    bd88:	01000074 	movhi	r4,1
    bd8c:	213ab204 	addi	r4,r4,-5432
    bd90:	000bc840 	call	bc84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bd94:	01c07fc4 	movi	r7,511
    bd98:	01800044 	movi	r6,1
    bd9c:	e17fff17 	ldw	r5,-4(fp)
    bda0:	01000074 	movhi	r4,1
    bda4:	213ab804 	addi	r4,r4,-5408
    bda8:	000bc840 	call	bc84 <alt_open_fd>
}  
    bdac:	0001883a 	nop
    bdb0:	e037883a 	mov	sp,fp
    bdb4:	dfc00117 	ldw	ra,4(sp)
    bdb8:	df000017 	ldw	fp,0(sp)
    bdbc:	dec00204 	addi	sp,sp,8
    bdc0:	f800283a 	ret

0000bdc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bdc4:	defffe04 	addi	sp,sp,-8
    bdc8:	dfc00115 	stw	ra,4(sp)
    bdcc:	df000015 	stw	fp,0(sp)
    bdd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bdd4:	d0a01017 	ldw	r2,-32704(gp)
    bdd8:	10000326 	beq	r2,zero,bde8 <alt_get_errno+0x24>
    bddc:	d0a01017 	ldw	r2,-32704(gp)
    bde0:	103ee83a 	callr	r2
    bde4:	00000106 	br	bdec <alt_get_errno+0x28>
    bde8:	d0a71204 	addi	r2,gp,-25528
}
    bdec:	e037883a 	mov	sp,fp
    bdf0:	dfc00117 	ldw	ra,4(sp)
    bdf4:	df000017 	ldw	fp,0(sp)
    bdf8:	dec00204 	addi	sp,sp,8
    bdfc:	f800283a 	ret

0000be00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    be00:	defffd04 	addi	sp,sp,-12
    be04:	df000215 	stw	fp,8(sp)
    be08:	df000204 	addi	fp,sp,8
    be0c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    be10:	e0bfff17 	ldw	r2,-4(fp)
    be14:	10800217 	ldw	r2,8(r2)
    be18:	10d00034 	orhi	r3,r2,16384
    be1c:	e0bfff17 	ldw	r2,-4(fp)
    be20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    be24:	e03ffe15 	stw	zero,-8(fp)
    be28:	00001d06 	br	bea0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    be2c:	00800074 	movhi	r2,1
    be30:	10bab204 	addi	r2,r2,-5432
    be34:	e0fffe17 	ldw	r3,-8(fp)
    be38:	18c00324 	muli	r3,r3,12
    be3c:	10c5883a 	add	r2,r2,r3
    be40:	10c00017 	ldw	r3,0(r2)
    be44:	e0bfff17 	ldw	r2,-4(fp)
    be48:	10800017 	ldw	r2,0(r2)
    be4c:	1880111e 	bne	r3,r2,be94 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    be50:	00800074 	movhi	r2,1
    be54:	10bab204 	addi	r2,r2,-5432
    be58:	e0fffe17 	ldw	r3,-8(fp)
    be5c:	18c00324 	muli	r3,r3,12
    be60:	10c5883a 	add	r2,r2,r3
    be64:	10800204 	addi	r2,r2,8
    be68:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    be6c:	1000090e 	bge	r2,zero,be94 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    be70:	e0bffe17 	ldw	r2,-8(fp)
    be74:	10c00324 	muli	r3,r2,12
    be78:	00800074 	movhi	r2,1
    be7c:	10bab204 	addi	r2,r2,-5432
    be80:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    be84:	e0bfff17 	ldw	r2,-4(fp)
    be88:	18800226 	beq	r3,r2,be94 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    be8c:	00bffcc4 	movi	r2,-13
    be90:	00000806 	br	beb4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    be94:	e0bffe17 	ldw	r2,-8(fp)
    be98:	10800044 	addi	r2,r2,1
    be9c:	e0bffe15 	stw	r2,-8(fp)
    bea0:	d0a00f17 	ldw	r2,-32708(gp)
    bea4:	1007883a 	mov	r3,r2
    bea8:	e0bffe17 	ldw	r2,-8(fp)
    beac:	18bfdf2e 	bgeu	r3,r2,be2c <__alt_data_end+0xf800be2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    beb0:	0005883a 	mov	r2,zero
}
    beb4:	e037883a 	mov	sp,fp
    beb8:	df000017 	ldw	fp,0(sp)
    bebc:	dec00104 	addi	sp,sp,4
    bec0:	f800283a 	ret

0000bec4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bec4:	defff604 	addi	sp,sp,-40
    bec8:	dfc00915 	stw	ra,36(sp)
    becc:	df000815 	stw	fp,32(sp)
    bed0:	df000804 	addi	fp,sp,32
    bed4:	e13ffd15 	stw	r4,-12(fp)
    bed8:	e17ffe15 	stw	r5,-8(fp)
    bedc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bee0:	00bfffc4 	movi	r2,-1
    bee4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    bee8:	00bffb44 	movi	r2,-19
    beec:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    bef0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bef4:	d1600d04 	addi	r5,gp,-32716
    bef8:	e13ffd17 	ldw	r4,-12(fp)
    befc:	000bbc00 	call	bbc0 <alt_find_dev>
    bf00:	e0bff815 	stw	r2,-32(fp)
    bf04:	e0bff817 	ldw	r2,-32(fp)
    bf08:	1000051e 	bne	r2,zero,bf20 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bf0c:	e13ffd17 	ldw	r4,-12(fp)
    bf10:	000c0a00 	call	c0a0 <alt_find_file>
    bf14:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    bf18:	00800044 	movi	r2,1
    bf1c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bf20:	e0bff817 	ldw	r2,-32(fp)
    bf24:	10002926 	beq	r2,zero,bfcc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bf28:	e13ff817 	ldw	r4,-32(fp)
    bf2c:	000c1a80 	call	c1a8 <alt_get_fd>
    bf30:	e0bff915 	stw	r2,-28(fp)
    bf34:	e0bff917 	ldw	r2,-28(fp)
    bf38:	1000030e 	bge	r2,zero,bf48 <open+0x84>
    {
      status = index;
    bf3c:	e0bff917 	ldw	r2,-28(fp)
    bf40:	e0bffa15 	stw	r2,-24(fp)
    bf44:	00002306 	br	bfd4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    bf48:	e0bff917 	ldw	r2,-28(fp)
    bf4c:	10c00324 	muli	r3,r2,12
    bf50:	00800074 	movhi	r2,1
    bf54:	10bab204 	addi	r2,r2,-5432
    bf58:	1885883a 	add	r2,r3,r2
    bf5c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bf60:	e0fffe17 	ldw	r3,-8(fp)
    bf64:	00900034 	movhi	r2,16384
    bf68:	10bfffc4 	addi	r2,r2,-1
    bf6c:	1886703a 	and	r3,r3,r2
    bf70:	e0bffc17 	ldw	r2,-16(fp)
    bf74:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    bf78:	e0bffb17 	ldw	r2,-20(fp)
    bf7c:	1000051e 	bne	r2,zero,bf94 <open+0xd0>
    bf80:	e13ffc17 	ldw	r4,-16(fp)
    bf84:	000be000 	call	be00 <alt_file_locked>
    bf88:	e0bffa15 	stw	r2,-24(fp)
    bf8c:	e0bffa17 	ldw	r2,-24(fp)
    bf90:	10001016 	blt	r2,zero,bfd4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    bf94:	e0bff817 	ldw	r2,-32(fp)
    bf98:	10800317 	ldw	r2,12(r2)
    bf9c:	10000826 	beq	r2,zero,bfc0 <open+0xfc>
    bfa0:	e0bff817 	ldw	r2,-32(fp)
    bfa4:	10800317 	ldw	r2,12(r2)
    bfa8:	e1ffff17 	ldw	r7,-4(fp)
    bfac:	e1bffe17 	ldw	r6,-8(fp)
    bfb0:	e17ffd17 	ldw	r5,-12(fp)
    bfb4:	e13ffc17 	ldw	r4,-16(fp)
    bfb8:	103ee83a 	callr	r2
    bfbc:	00000106 	br	bfc4 <open+0x100>
    bfc0:	0005883a 	mov	r2,zero
    bfc4:	e0bffa15 	stw	r2,-24(fp)
    bfc8:	00000206 	br	bfd4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    bfcc:	00bffb44 	movi	r2,-19
    bfd0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    bfd4:	e0bffa17 	ldw	r2,-24(fp)
    bfd8:	1000090e 	bge	r2,zero,c000 <open+0x13c>
  {
    alt_release_fd (index);  
    bfdc:	e13ff917 	ldw	r4,-28(fp)
    bfe0:	000c0180 	call	c018 <alt_release_fd>
    ALT_ERRNO = -status;
    bfe4:	000bdc40 	call	bdc4 <alt_get_errno>
    bfe8:	1007883a 	mov	r3,r2
    bfec:	e0bffa17 	ldw	r2,-24(fp)
    bff0:	0085c83a 	sub	r2,zero,r2
    bff4:	18800015 	stw	r2,0(r3)
    return -1;
    bff8:	00bfffc4 	movi	r2,-1
    bffc:	00000106 	br	c004 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    c000:	e0bff917 	ldw	r2,-28(fp)
}
    c004:	e037883a 	mov	sp,fp
    c008:	dfc00117 	ldw	ra,4(sp)
    c00c:	df000017 	ldw	fp,0(sp)
    c010:	dec00204 	addi	sp,sp,8
    c014:	f800283a 	ret

0000c018 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c018:	defffe04 	addi	sp,sp,-8
    c01c:	df000115 	stw	fp,4(sp)
    c020:	df000104 	addi	fp,sp,4
    c024:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c028:	e0bfff17 	ldw	r2,-4(fp)
    c02c:	108000d0 	cmplti	r2,r2,3
    c030:	10000d1e 	bne	r2,zero,c068 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    c034:	00800074 	movhi	r2,1
    c038:	10bab204 	addi	r2,r2,-5432
    c03c:	e0ffff17 	ldw	r3,-4(fp)
    c040:	18c00324 	muli	r3,r3,12
    c044:	10c5883a 	add	r2,r2,r3
    c048:	10800204 	addi	r2,r2,8
    c04c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c050:	00800074 	movhi	r2,1
    c054:	10bab204 	addi	r2,r2,-5432
    c058:	e0ffff17 	ldw	r3,-4(fp)
    c05c:	18c00324 	muli	r3,r3,12
    c060:	10c5883a 	add	r2,r2,r3
    c064:	10000015 	stw	zero,0(r2)
  }
}
    c068:	0001883a 	nop
    c06c:	e037883a 	mov	sp,fp
    c070:	df000017 	ldw	fp,0(sp)
    c074:	dec00104 	addi	sp,sp,4
    c078:	f800283a 	ret

0000c07c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    c07c:	deffff04 	addi	sp,sp,-4
    c080:	df000015 	stw	fp,0(sp)
    c084:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c088:	000170fa 	wrctl	ienable,zero
}
    c08c:	0001883a 	nop
    c090:	e037883a 	mov	sp,fp
    c094:	df000017 	ldw	fp,0(sp)
    c098:	dec00104 	addi	sp,sp,4
    c09c:	f800283a 	ret

0000c0a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c0a0:	defffb04 	addi	sp,sp,-20
    c0a4:	dfc00415 	stw	ra,16(sp)
    c0a8:	df000315 	stw	fp,12(sp)
    c0ac:	df000304 	addi	fp,sp,12
    c0b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c0b4:	d0a00b17 	ldw	r2,-32724(gp)
    c0b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c0bc:	00003106 	br	c184 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c0c0:	e0bffd17 	ldw	r2,-12(fp)
    c0c4:	10800217 	ldw	r2,8(r2)
    c0c8:	1009883a 	mov	r4,r2
    c0cc:	000c4ec0 	call	c4ec <strlen>
    c0d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c0d4:	e0bffd17 	ldw	r2,-12(fp)
    c0d8:	10c00217 	ldw	r3,8(r2)
    c0dc:	e0bffe17 	ldw	r2,-8(fp)
    c0e0:	10bfffc4 	addi	r2,r2,-1
    c0e4:	1885883a 	add	r2,r3,r2
    c0e8:	10800003 	ldbu	r2,0(r2)
    c0ec:	10803fcc 	andi	r2,r2,255
    c0f0:	1080201c 	xori	r2,r2,128
    c0f4:	10bfe004 	addi	r2,r2,-128
    c0f8:	10800bd8 	cmpnei	r2,r2,47
    c0fc:	1000031e 	bne	r2,zero,c10c <alt_find_file+0x6c>
    {
      len -= 1;
    c100:	e0bffe17 	ldw	r2,-8(fp)
    c104:	10bfffc4 	addi	r2,r2,-1
    c108:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c10c:	e0bffe17 	ldw	r2,-8(fp)
    c110:	e0ffff17 	ldw	r3,-4(fp)
    c114:	1885883a 	add	r2,r3,r2
    c118:	10800003 	ldbu	r2,0(r2)
    c11c:	10803fcc 	andi	r2,r2,255
    c120:	1080201c 	xori	r2,r2,128
    c124:	10bfe004 	addi	r2,r2,-128
    c128:	10800be0 	cmpeqi	r2,r2,47
    c12c:	1000081e 	bne	r2,zero,c150 <alt_find_file+0xb0>
    c130:	e0bffe17 	ldw	r2,-8(fp)
    c134:	e0ffff17 	ldw	r3,-4(fp)
    c138:	1885883a 	add	r2,r3,r2
    c13c:	10800003 	ldbu	r2,0(r2)
    c140:	10803fcc 	andi	r2,r2,255
    c144:	1080201c 	xori	r2,r2,128
    c148:	10bfe004 	addi	r2,r2,-128
    c14c:	10000a1e 	bne	r2,zero,c178 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c150:	e0bffd17 	ldw	r2,-12(fp)
    c154:	10800217 	ldw	r2,8(r2)
    c158:	e0fffe17 	ldw	r3,-8(fp)
    c15c:	180d883a 	mov	r6,r3
    c160:	e17fff17 	ldw	r5,-4(fp)
    c164:	1009883a 	mov	r4,r2
    c168:	000c3280 	call	c328 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c16c:	1000021e 	bne	r2,zero,c178 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c170:	e0bffd17 	ldw	r2,-12(fp)
    c174:	00000706 	br	c194 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c178:	e0bffd17 	ldw	r2,-12(fp)
    c17c:	10800017 	ldw	r2,0(r2)
    c180:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c184:	e0fffd17 	ldw	r3,-12(fp)
    c188:	d0a00b04 	addi	r2,gp,-32724
    c18c:	18bfcc1e 	bne	r3,r2,c0c0 <__alt_data_end+0xf800c0c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c190:	0005883a 	mov	r2,zero
}
    c194:	e037883a 	mov	sp,fp
    c198:	dfc00117 	ldw	ra,4(sp)
    c19c:	df000017 	ldw	fp,0(sp)
    c1a0:	dec00204 	addi	sp,sp,8
    c1a4:	f800283a 	ret

0000c1a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c1a8:	defffc04 	addi	sp,sp,-16
    c1ac:	df000315 	stw	fp,12(sp)
    c1b0:	df000304 	addi	fp,sp,12
    c1b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    c1b8:	00bffa04 	movi	r2,-24
    c1bc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c1c0:	e03ffd15 	stw	zero,-12(fp)
    c1c4:	00001906 	br	c22c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    c1c8:	00800074 	movhi	r2,1
    c1cc:	10bab204 	addi	r2,r2,-5432
    c1d0:	e0fffd17 	ldw	r3,-12(fp)
    c1d4:	18c00324 	muli	r3,r3,12
    c1d8:	10c5883a 	add	r2,r2,r3
    c1dc:	10800017 	ldw	r2,0(r2)
    c1e0:	10000f1e 	bne	r2,zero,c220 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    c1e4:	00800074 	movhi	r2,1
    c1e8:	10bab204 	addi	r2,r2,-5432
    c1ec:	e0fffd17 	ldw	r3,-12(fp)
    c1f0:	18c00324 	muli	r3,r3,12
    c1f4:	10c5883a 	add	r2,r2,r3
    c1f8:	e0ffff17 	ldw	r3,-4(fp)
    c1fc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c200:	d0e00f17 	ldw	r3,-32708(gp)
    c204:	e0bffd17 	ldw	r2,-12(fp)
    c208:	1880020e 	bge	r3,r2,c214 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    c20c:	e0bffd17 	ldw	r2,-12(fp)
    c210:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
    c214:	e0bffd17 	ldw	r2,-12(fp)
    c218:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    c21c:	00000606 	br	c238 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c220:	e0bffd17 	ldw	r2,-12(fp)
    c224:	10800044 	addi	r2,r2,1
    c228:	e0bffd15 	stw	r2,-12(fp)
    c22c:	e0bffd17 	ldw	r2,-12(fp)
    c230:	10800810 	cmplti	r2,r2,32
    c234:	103fe41e 	bne	r2,zero,c1c8 <__alt_data_end+0xf800c1c8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c238:	e0bffe17 	ldw	r2,-8(fp)
}
    c23c:	e037883a 	mov	sp,fp
    c240:	df000017 	ldw	fp,0(sp)
    c244:	dec00104 	addi	sp,sp,4
    c248:	f800283a 	ret

0000c24c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    c24c:	defffb04 	addi	sp,sp,-20
    c250:	df000415 	stw	fp,16(sp)
    c254:	df000404 	addi	fp,sp,16
    c258:	e13ffe15 	stw	r4,-8(fp)
    c25c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    c260:	e0bfff17 	ldw	r2,-4(fp)
    c264:	10840070 	cmpltui	r2,r2,4097
    c268:	1000021e 	bne	r2,zero,c274 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    c26c:	00840004 	movi	r2,4096
    c270:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    c274:	e0fffe17 	ldw	r3,-8(fp)
    c278:	e0bfff17 	ldw	r2,-4(fp)
    c27c:	1885883a 	add	r2,r3,r2
    c280:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c284:	e0bffe17 	ldw	r2,-8(fp)
    c288:	e0bffc15 	stw	r2,-16(fp)
    c28c:	00000506 	br	c2a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    c290:	e0bffc17 	ldw	r2,-16(fp)
    c294:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    c298:	e0bffc17 	ldw	r2,-16(fp)
    c29c:	10800804 	addi	r2,r2,32
    c2a0:	e0bffc15 	stw	r2,-16(fp)
    c2a4:	e0fffc17 	ldw	r3,-16(fp)
    c2a8:	e0bffd17 	ldw	r2,-12(fp)
    c2ac:	18bff836 	bltu	r3,r2,c290 <__alt_data_end+0xf800c290>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    c2b0:	e0bffe17 	ldw	r2,-8(fp)
    c2b4:	108007cc 	andi	r2,r2,31
    c2b8:	10000226 	beq	r2,zero,c2c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    c2bc:	e0bffc17 	ldw	r2,-16(fp)
    c2c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    c2c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    c2c8:	0001883a 	nop
    c2cc:	e037883a 	mov	sp,fp
    c2d0:	df000017 	ldw	fp,0(sp)
    c2d4:	dec00104 	addi	sp,sp,4
    c2d8:	f800283a 	ret

0000c2dc <atexit>:
    c2dc:	200b883a 	mov	r5,r4
    c2e0:	000f883a 	mov	r7,zero
    c2e4:	000d883a 	mov	r6,zero
    c2e8:	0009883a 	mov	r4,zero
    c2ec:	000c5841 	jmpi	c584 <__register_exitproc>

0000c2f0 <exit>:
    c2f0:	defffe04 	addi	sp,sp,-8
    c2f4:	000b883a 	mov	r5,zero
    c2f8:	dc000015 	stw	r16,0(sp)
    c2fc:	dfc00115 	stw	ra,4(sp)
    c300:	2021883a 	mov	r16,r4
    c304:	000c69c0 	call	c69c <__call_exitprocs>
    c308:	00800074 	movhi	r2,1
    c30c:	10bb1804 	addi	r2,r2,-5024
    c310:	11000017 	ldw	r4,0(r2)
    c314:	20800f17 	ldw	r2,60(r4)
    c318:	10000126 	beq	r2,zero,c320 <exit+0x30>
    c31c:	103ee83a 	callr	r2
    c320:	8009883a 	mov	r4,r16
    c324:	000cf080 	call	cf08 <_exit>

0000c328 <memcmp>:
    c328:	01c000c4 	movi	r7,3
    c32c:	3980192e 	bgeu	r7,r6,c394 <memcmp+0x6c>
    c330:	2144b03a 	or	r2,r4,r5
    c334:	11c4703a 	and	r2,r2,r7
    c338:	10000f26 	beq	r2,zero,c378 <memcmp+0x50>
    c33c:	20800003 	ldbu	r2,0(r4)
    c340:	28c00003 	ldbu	r3,0(r5)
    c344:	10c0151e 	bne	r2,r3,c39c <memcmp+0x74>
    c348:	31bfff84 	addi	r6,r6,-2
    c34c:	01ffffc4 	movi	r7,-1
    c350:	00000406 	br	c364 <memcmp+0x3c>
    c354:	20800003 	ldbu	r2,0(r4)
    c358:	28c00003 	ldbu	r3,0(r5)
    c35c:	31bfffc4 	addi	r6,r6,-1
    c360:	10c00e1e 	bne	r2,r3,c39c <memcmp+0x74>
    c364:	21000044 	addi	r4,r4,1
    c368:	29400044 	addi	r5,r5,1
    c36c:	31fff91e 	bne	r6,r7,c354 <__alt_data_end+0xf800c354>
    c370:	0005883a 	mov	r2,zero
    c374:	f800283a 	ret
    c378:	20c00017 	ldw	r3,0(r4)
    c37c:	28800017 	ldw	r2,0(r5)
    c380:	18bfee1e 	bne	r3,r2,c33c <__alt_data_end+0xf800c33c>
    c384:	31bfff04 	addi	r6,r6,-4
    c388:	21000104 	addi	r4,r4,4
    c38c:	29400104 	addi	r5,r5,4
    c390:	39bff936 	bltu	r7,r6,c378 <__alt_data_end+0xf800c378>
    c394:	303fe91e 	bne	r6,zero,c33c <__alt_data_end+0xf800c33c>
    c398:	003ff506 	br	c370 <__alt_data_end+0xf800c370>
    c39c:	10c5c83a 	sub	r2,r2,r3
    c3a0:	f800283a 	ret

0000c3a4 <memcpy>:
    c3a4:	defffd04 	addi	sp,sp,-12
    c3a8:	dfc00215 	stw	ra,8(sp)
    c3ac:	dc400115 	stw	r17,4(sp)
    c3b0:	dc000015 	stw	r16,0(sp)
    c3b4:	00c003c4 	movi	r3,15
    c3b8:	2005883a 	mov	r2,r4
    c3bc:	1980452e 	bgeu	r3,r6,c4d4 <memcpy+0x130>
    c3c0:	2906b03a 	or	r3,r5,r4
    c3c4:	18c000cc 	andi	r3,r3,3
    c3c8:	1800441e 	bne	r3,zero,c4dc <memcpy+0x138>
    c3cc:	347ffc04 	addi	r17,r6,-16
    c3d0:	8822d13a 	srli	r17,r17,4
    c3d4:	28c00104 	addi	r3,r5,4
    c3d8:	23400104 	addi	r13,r4,4
    c3dc:	8820913a 	slli	r16,r17,4
    c3e0:	2b000204 	addi	r12,r5,8
    c3e4:	22c00204 	addi	r11,r4,8
    c3e8:	84000504 	addi	r16,r16,20
    c3ec:	2a800304 	addi	r10,r5,12
    c3f0:	22400304 	addi	r9,r4,12
    c3f4:	2c21883a 	add	r16,r5,r16
    c3f8:	2811883a 	mov	r8,r5
    c3fc:	200f883a 	mov	r7,r4
    c400:	41000017 	ldw	r4,0(r8)
    c404:	1fc00017 	ldw	ra,0(r3)
    c408:	63c00017 	ldw	r15,0(r12)
    c40c:	39000015 	stw	r4,0(r7)
    c410:	53800017 	ldw	r14,0(r10)
    c414:	6fc00015 	stw	ra,0(r13)
    c418:	5bc00015 	stw	r15,0(r11)
    c41c:	4b800015 	stw	r14,0(r9)
    c420:	18c00404 	addi	r3,r3,16
    c424:	39c00404 	addi	r7,r7,16
    c428:	42000404 	addi	r8,r8,16
    c42c:	6b400404 	addi	r13,r13,16
    c430:	63000404 	addi	r12,r12,16
    c434:	5ac00404 	addi	r11,r11,16
    c438:	52800404 	addi	r10,r10,16
    c43c:	4a400404 	addi	r9,r9,16
    c440:	1c3fef1e 	bne	r3,r16,c400 <__alt_data_end+0xf800c400>
    c444:	89c00044 	addi	r7,r17,1
    c448:	380e913a 	slli	r7,r7,4
    c44c:	310003cc 	andi	r4,r6,15
    c450:	02c000c4 	movi	r11,3
    c454:	11c7883a 	add	r3,r2,r7
    c458:	29cb883a 	add	r5,r5,r7
    c45c:	5900212e 	bgeu	r11,r4,c4e4 <memcpy+0x140>
    c460:	1813883a 	mov	r9,r3
    c464:	2811883a 	mov	r8,r5
    c468:	200f883a 	mov	r7,r4
    c46c:	42800017 	ldw	r10,0(r8)
    c470:	4a400104 	addi	r9,r9,4
    c474:	39ffff04 	addi	r7,r7,-4
    c478:	4abfff15 	stw	r10,-4(r9)
    c47c:	42000104 	addi	r8,r8,4
    c480:	59fffa36 	bltu	r11,r7,c46c <__alt_data_end+0xf800c46c>
    c484:	213fff04 	addi	r4,r4,-4
    c488:	2008d0ba 	srli	r4,r4,2
    c48c:	318000cc 	andi	r6,r6,3
    c490:	21000044 	addi	r4,r4,1
    c494:	2109883a 	add	r4,r4,r4
    c498:	2109883a 	add	r4,r4,r4
    c49c:	1907883a 	add	r3,r3,r4
    c4a0:	290b883a 	add	r5,r5,r4
    c4a4:	30000626 	beq	r6,zero,c4c0 <memcpy+0x11c>
    c4a8:	198d883a 	add	r6,r3,r6
    c4ac:	29c00003 	ldbu	r7,0(r5)
    c4b0:	18c00044 	addi	r3,r3,1
    c4b4:	29400044 	addi	r5,r5,1
    c4b8:	19ffffc5 	stb	r7,-1(r3)
    c4bc:	19bffb1e 	bne	r3,r6,c4ac <__alt_data_end+0xf800c4ac>
    c4c0:	dfc00217 	ldw	ra,8(sp)
    c4c4:	dc400117 	ldw	r17,4(sp)
    c4c8:	dc000017 	ldw	r16,0(sp)
    c4cc:	dec00304 	addi	sp,sp,12
    c4d0:	f800283a 	ret
    c4d4:	2007883a 	mov	r3,r4
    c4d8:	003ff206 	br	c4a4 <__alt_data_end+0xf800c4a4>
    c4dc:	2007883a 	mov	r3,r4
    c4e0:	003ff106 	br	c4a8 <__alt_data_end+0xf800c4a8>
    c4e4:	200d883a 	mov	r6,r4
    c4e8:	003fee06 	br	c4a4 <__alt_data_end+0xf800c4a4>

0000c4ec <strlen>:
    c4ec:	208000cc 	andi	r2,r4,3
    c4f0:	10002026 	beq	r2,zero,c574 <strlen+0x88>
    c4f4:	20800007 	ldb	r2,0(r4)
    c4f8:	10002026 	beq	r2,zero,c57c <strlen+0x90>
    c4fc:	2005883a 	mov	r2,r4
    c500:	00000206 	br	c50c <strlen+0x20>
    c504:	10c00007 	ldb	r3,0(r2)
    c508:	18001826 	beq	r3,zero,c56c <strlen+0x80>
    c50c:	10800044 	addi	r2,r2,1
    c510:	10c000cc 	andi	r3,r2,3
    c514:	183ffb1e 	bne	r3,zero,c504 <__alt_data_end+0xf800c504>
    c518:	10c00017 	ldw	r3,0(r2)
    c51c:	01ffbff4 	movhi	r7,65279
    c520:	39ffbfc4 	addi	r7,r7,-257
    c524:	00ca303a 	nor	r5,zero,r3
    c528:	01a02074 	movhi	r6,32897
    c52c:	19c7883a 	add	r3,r3,r7
    c530:	31a02004 	addi	r6,r6,-32640
    c534:	1946703a 	and	r3,r3,r5
    c538:	1986703a 	and	r3,r3,r6
    c53c:	1800091e 	bne	r3,zero,c564 <strlen+0x78>
    c540:	10800104 	addi	r2,r2,4
    c544:	10c00017 	ldw	r3,0(r2)
    c548:	19cb883a 	add	r5,r3,r7
    c54c:	00c6303a 	nor	r3,zero,r3
    c550:	28c6703a 	and	r3,r5,r3
    c554:	1986703a 	and	r3,r3,r6
    c558:	183ff926 	beq	r3,zero,c540 <__alt_data_end+0xf800c540>
    c55c:	00000106 	br	c564 <strlen+0x78>
    c560:	10800044 	addi	r2,r2,1
    c564:	10c00007 	ldb	r3,0(r2)
    c568:	183ffd1e 	bne	r3,zero,c560 <__alt_data_end+0xf800c560>
    c56c:	1105c83a 	sub	r2,r2,r4
    c570:	f800283a 	ret
    c574:	2005883a 	mov	r2,r4
    c578:	003fe706 	br	c518 <__alt_data_end+0xf800c518>
    c57c:	0005883a 	mov	r2,zero
    c580:	f800283a 	ret

0000c584 <__register_exitproc>:
    c584:	defffa04 	addi	sp,sp,-24
    c588:	dc000315 	stw	r16,12(sp)
    c58c:	04000074 	movhi	r16,1
    c590:	843b1804 	addi	r16,r16,-5024
    c594:	80c00017 	ldw	r3,0(r16)
    c598:	dc400415 	stw	r17,16(sp)
    c59c:	dfc00515 	stw	ra,20(sp)
    c5a0:	18805217 	ldw	r2,328(r3)
    c5a4:	2023883a 	mov	r17,r4
    c5a8:	10003726 	beq	r2,zero,c688 <__register_exitproc+0x104>
    c5ac:	10c00117 	ldw	r3,4(r2)
    c5b0:	010007c4 	movi	r4,31
    c5b4:	20c00e16 	blt	r4,r3,c5f0 <__register_exitproc+0x6c>
    c5b8:	1a000044 	addi	r8,r3,1
    c5bc:	8800221e 	bne	r17,zero,c648 <__register_exitproc+0xc4>
    c5c0:	18c00084 	addi	r3,r3,2
    c5c4:	18c7883a 	add	r3,r3,r3
    c5c8:	18c7883a 	add	r3,r3,r3
    c5cc:	12000115 	stw	r8,4(r2)
    c5d0:	10c7883a 	add	r3,r2,r3
    c5d4:	19400015 	stw	r5,0(r3)
    c5d8:	0005883a 	mov	r2,zero
    c5dc:	dfc00517 	ldw	ra,20(sp)
    c5e0:	dc400417 	ldw	r17,16(sp)
    c5e4:	dc000317 	ldw	r16,12(sp)
    c5e8:	dec00604 	addi	sp,sp,24
    c5ec:	f800283a 	ret
    c5f0:	00800034 	movhi	r2,0
    c5f4:	10800004 	addi	r2,r2,0
    c5f8:	10002626 	beq	r2,zero,c694 <__register_exitproc+0x110>
    c5fc:	01006404 	movi	r4,400
    c600:	d9400015 	stw	r5,0(sp)
    c604:	d9800115 	stw	r6,4(sp)
    c608:	d9c00215 	stw	r7,8(sp)
    c60c:	00000000 	call	0 <__alt_mem_sdram_controller>
    c610:	d9400017 	ldw	r5,0(sp)
    c614:	d9800117 	ldw	r6,4(sp)
    c618:	d9c00217 	ldw	r7,8(sp)
    c61c:	10001d26 	beq	r2,zero,c694 <__register_exitproc+0x110>
    c620:	81000017 	ldw	r4,0(r16)
    c624:	10000115 	stw	zero,4(r2)
    c628:	02000044 	movi	r8,1
    c62c:	22405217 	ldw	r9,328(r4)
    c630:	0007883a 	mov	r3,zero
    c634:	12400015 	stw	r9,0(r2)
    c638:	20805215 	stw	r2,328(r4)
    c63c:	10006215 	stw	zero,392(r2)
    c640:	10006315 	stw	zero,396(r2)
    c644:	883fde26 	beq	r17,zero,c5c0 <__alt_data_end+0xf800c5c0>
    c648:	18c9883a 	add	r4,r3,r3
    c64c:	2109883a 	add	r4,r4,r4
    c650:	1109883a 	add	r4,r2,r4
    c654:	21802215 	stw	r6,136(r4)
    c658:	01800044 	movi	r6,1
    c65c:	12406217 	ldw	r9,392(r2)
    c660:	30cc983a 	sll	r6,r6,r3
    c664:	4992b03a 	or	r9,r9,r6
    c668:	12406215 	stw	r9,392(r2)
    c66c:	21c04215 	stw	r7,264(r4)
    c670:	01000084 	movi	r4,2
    c674:	893fd21e 	bne	r17,r4,c5c0 <__alt_data_end+0xf800c5c0>
    c678:	11006317 	ldw	r4,396(r2)
    c67c:	218cb03a 	or	r6,r4,r6
    c680:	11806315 	stw	r6,396(r2)
    c684:	003fce06 	br	c5c0 <__alt_data_end+0xf800c5c0>
    c688:	18805304 	addi	r2,r3,332
    c68c:	18805215 	stw	r2,328(r3)
    c690:	003fc606 	br	c5ac <__alt_data_end+0xf800c5ac>
    c694:	00bfffc4 	movi	r2,-1
    c698:	003fd006 	br	c5dc <__alt_data_end+0xf800c5dc>

0000c69c <__call_exitprocs>:
    c69c:	defff504 	addi	sp,sp,-44
    c6a0:	df000915 	stw	fp,36(sp)
    c6a4:	dd400615 	stw	r21,24(sp)
    c6a8:	dc800315 	stw	r18,12(sp)
    c6ac:	dfc00a15 	stw	ra,40(sp)
    c6b0:	ddc00815 	stw	r23,32(sp)
    c6b4:	dd800715 	stw	r22,28(sp)
    c6b8:	dd000515 	stw	r20,20(sp)
    c6bc:	dcc00415 	stw	r19,16(sp)
    c6c0:	dc400215 	stw	r17,8(sp)
    c6c4:	dc000115 	stw	r16,4(sp)
    c6c8:	d9000015 	stw	r4,0(sp)
    c6cc:	2839883a 	mov	fp,r5
    c6d0:	04800044 	movi	r18,1
    c6d4:	057fffc4 	movi	r21,-1
    c6d8:	00800074 	movhi	r2,1
    c6dc:	10bb1804 	addi	r2,r2,-5024
    c6e0:	12000017 	ldw	r8,0(r2)
    c6e4:	45005217 	ldw	r20,328(r8)
    c6e8:	44c05204 	addi	r19,r8,328
    c6ec:	a0001c26 	beq	r20,zero,c760 <__call_exitprocs+0xc4>
    c6f0:	a0800117 	ldw	r2,4(r20)
    c6f4:	15ffffc4 	addi	r23,r2,-1
    c6f8:	b8000d16 	blt	r23,zero,c730 <__call_exitprocs+0x94>
    c6fc:	14000044 	addi	r16,r2,1
    c700:	8421883a 	add	r16,r16,r16
    c704:	8421883a 	add	r16,r16,r16
    c708:	84402004 	addi	r17,r16,128
    c70c:	a463883a 	add	r17,r20,r17
    c710:	a421883a 	add	r16,r20,r16
    c714:	e0001e26 	beq	fp,zero,c790 <__call_exitprocs+0xf4>
    c718:	80804017 	ldw	r2,256(r16)
    c71c:	e0801c26 	beq	fp,r2,c790 <__call_exitprocs+0xf4>
    c720:	bdffffc4 	addi	r23,r23,-1
    c724:	843fff04 	addi	r16,r16,-4
    c728:	8c7fff04 	addi	r17,r17,-4
    c72c:	bd7ff91e 	bne	r23,r21,c714 <__alt_data_end+0xf800c714>
    c730:	00800034 	movhi	r2,0
    c734:	10800004 	addi	r2,r2,0
    c738:	10000926 	beq	r2,zero,c760 <__call_exitprocs+0xc4>
    c73c:	a0800117 	ldw	r2,4(r20)
    c740:	1000301e 	bne	r2,zero,c804 <__call_exitprocs+0x168>
    c744:	a0800017 	ldw	r2,0(r20)
    c748:	10003226 	beq	r2,zero,c814 <__call_exitprocs+0x178>
    c74c:	a009883a 	mov	r4,r20
    c750:	98800015 	stw	r2,0(r19)
    c754:	00000000 	call	0 <__alt_mem_sdram_controller>
    c758:	9d000017 	ldw	r20,0(r19)
    c75c:	a03fe41e 	bne	r20,zero,c6f0 <__alt_data_end+0xf800c6f0>
    c760:	dfc00a17 	ldw	ra,40(sp)
    c764:	df000917 	ldw	fp,36(sp)
    c768:	ddc00817 	ldw	r23,32(sp)
    c76c:	dd800717 	ldw	r22,28(sp)
    c770:	dd400617 	ldw	r21,24(sp)
    c774:	dd000517 	ldw	r20,20(sp)
    c778:	dcc00417 	ldw	r19,16(sp)
    c77c:	dc800317 	ldw	r18,12(sp)
    c780:	dc400217 	ldw	r17,8(sp)
    c784:	dc000117 	ldw	r16,4(sp)
    c788:	dec00b04 	addi	sp,sp,44
    c78c:	f800283a 	ret
    c790:	a0800117 	ldw	r2,4(r20)
    c794:	80c00017 	ldw	r3,0(r16)
    c798:	10bfffc4 	addi	r2,r2,-1
    c79c:	15c01426 	beq	r2,r23,c7f0 <__call_exitprocs+0x154>
    c7a0:	80000015 	stw	zero,0(r16)
    c7a4:	183fde26 	beq	r3,zero,c720 <__alt_data_end+0xf800c720>
    c7a8:	95c8983a 	sll	r4,r18,r23
    c7ac:	a0806217 	ldw	r2,392(r20)
    c7b0:	a5800117 	ldw	r22,4(r20)
    c7b4:	2084703a 	and	r2,r4,r2
    c7b8:	10000b26 	beq	r2,zero,c7e8 <__call_exitprocs+0x14c>
    c7bc:	a0806317 	ldw	r2,396(r20)
    c7c0:	2088703a 	and	r4,r4,r2
    c7c4:	20000c1e 	bne	r4,zero,c7f8 <__call_exitprocs+0x15c>
    c7c8:	89400017 	ldw	r5,0(r17)
    c7cc:	d9000017 	ldw	r4,0(sp)
    c7d0:	183ee83a 	callr	r3
    c7d4:	a0800117 	ldw	r2,4(r20)
    c7d8:	15bfbf1e 	bne	r2,r22,c6d8 <__alt_data_end+0xf800c6d8>
    c7dc:	98800017 	ldw	r2,0(r19)
    c7e0:	153fcf26 	beq	r2,r20,c720 <__alt_data_end+0xf800c720>
    c7e4:	003fbc06 	br	c6d8 <__alt_data_end+0xf800c6d8>
    c7e8:	183ee83a 	callr	r3
    c7ec:	003ff906 	br	c7d4 <__alt_data_end+0xf800c7d4>
    c7f0:	a5c00115 	stw	r23,4(r20)
    c7f4:	003feb06 	br	c7a4 <__alt_data_end+0xf800c7a4>
    c7f8:	89000017 	ldw	r4,0(r17)
    c7fc:	183ee83a 	callr	r3
    c800:	003ff406 	br	c7d4 <__alt_data_end+0xf800c7d4>
    c804:	a0800017 	ldw	r2,0(r20)
    c808:	a027883a 	mov	r19,r20
    c80c:	1029883a 	mov	r20,r2
    c810:	003fb606 	br	c6ec <__alt_data_end+0xf800c6ec>
    c814:	0005883a 	mov	r2,zero
    c818:	003ffb06 	br	c808 <__alt_data_end+0xf800c808>

0000c81c <__umoddi3>:
    c81c:	defff404 	addi	sp,sp,-48
    c820:	df000a15 	stw	fp,40(sp)
    c824:	dc400315 	stw	r17,12(sp)
    c828:	dc000215 	stw	r16,8(sp)
    c82c:	dfc00b15 	stw	ra,44(sp)
    c830:	ddc00915 	stw	r23,36(sp)
    c834:	dd800815 	stw	r22,32(sp)
    c838:	dd400715 	stw	r21,28(sp)
    c83c:	dd000615 	stw	r20,24(sp)
    c840:	dcc00515 	stw	r19,20(sp)
    c844:	dc800415 	stw	r18,16(sp)
    c848:	2021883a 	mov	r16,r4
    c84c:	2823883a 	mov	r17,r5
    c850:	2839883a 	mov	fp,r5
    c854:	38003c1e 	bne	r7,zero,c948 <__umoddi3+0x12c>
    c858:	3027883a 	mov	r19,r6
    c85c:	2029883a 	mov	r20,r4
    c860:	2980512e 	bgeu	r5,r6,c9a8 <__umoddi3+0x18c>
    c864:	00bfffd4 	movui	r2,65535
    c868:	11809a36 	bltu	r2,r6,cad4 <__umoddi3+0x2b8>
    c86c:	01003fc4 	movi	r4,255
    c870:	2189803a 	cmpltu	r4,r4,r6
    c874:	200890fa 	slli	r4,r4,3
    c878:	3104d83a 	srl	r2,r6,r4
    c87c:	00c00074 	movhi	r3,1
    c880:	18f3dbc4 	addi	r3,r3,-12433
    c884:	1885883a 	add	r2,r3,r2
    c888:	10c00003 	ldbu	r3,0(r2)
    c88c:	00800804 	movi	r2,32
    c890:	1909883a 	add	r4,r3,r4
    c894:	1125c83a 	sub	r18,r2,r4
    c898:	90000526 	beq	r18,zero,c8b0 <__umoddi3+0x94>
    c89c:	8ca2983a 	sll	r17,r17,r18
    c8a0:	8108d83a 	srl	r4,r16,r4
    c8a4:	34a6983a 	sll	r19,r6,r18
    c8a8:	84a8983a 	sll	r20,r16,r18
    c8ac:	2478b03a 	or	fp,r4,r17
    c8b0:	982ed43a 	srli	r23,r19,16
    c8b4:	e009883a 	mov	r4,fp
    c8b8:	9dbfffcc 	andi	r22,r19,65535
    c8bc:	b80b883a 	mov	r5,r23
    c8c0:	000ceb00 	call	ceb0 <__umodsi3>
    c8c4:	e009883a 	mov	r4,fp
    c8c8:	b80b883a 	mov	r5,r23
    c8cc:	102b883a 	mov	r21,r2
    c8d0:	000ce4c0 	call	ce4c <__udivsi3>
    c8d4:	a806943a 	slli	r3,r21,16
    c8d8:	a008d43a 	srli	r4,r20,16
    c8dc:	b085383a 	mul	r2,r22,r2
    c8e0:	20c8b03a 	or	r4,r4,r3
    c8e4:	2080032e 	bgeu	r4,r2,c8f4 <__umoddi3+0xd8>
    c8e8:	24c9883a 	add	r4,r4,r19
    c8ec:	24c00136 	bltu	r4,r19,c8f4 <__umoddi3+0xd8>
    c8f0:	20811036 	bltu	r4,r2,cd34 <__umoddi3+0x518>
    c8f4:	20abc83a 	sub	r21,r4,r2
    c8f8:	b80b883a 	mov	r5,r23
    c8fc:	a809883a 	mov	r4,r21
    c900:	000ceb00 	call	ceb0 <__umodsi3>
    c904:	1023883a 	mov	r17,r2
    c908:	b80b883a 	mov	r5,r23
    c90c:	a809883a 	mov	r4,r21
    c910:	000ce4c0 	call	ce4c <__udivsi3>
    c914:	8822943a 	slli	r17,r17,16
    c918:	b085383a 	mul	r2,r22,r2
    c91c:	a0ffffcc 	andi	r3,r20,65535
    c920:	1c46b03a 	or	r3,r3,r17
    c924:	1880042e 	bgeu	r3,r2,c938 <__umoddi3+0x11c>
    c928:	1cc7883a 	add	r3,r3,r19
    c92c:	1cc00236 	bltu	r3,r19,c938 <__umoddi3+0x11c>
    c930:	1880012e 	bgeu	r3,r2,c938 <__umoddi3+0x11c>
    c934:	1cc7883a 	add	r3,r3,r19
    c938:	1885c83a 	sub	r2,r3,r2
    c93c:	1484d83a 	srl	r2,r2,r18
    c940:	0007883a 	mov	r3,zero
    c944:	00004f06 	br	ca84 <__umoddi3+0x268>
    c948:	29c04c36 	bltu	r5,r7,ca7c <__umoddi3+0x260>
    c94c:	00bfffd4 	movui	r2,65535
    c950:	11c0582e 	bgeu	r2,r7,cab4 <__umoddi3+0x298>
    c954:	00804034 	movhi	r2,256
    c958:	10bfffc4 	addi	r2,r2,-1
    c95c:	11c0e736 	bltu	r2,r7,ccfc <__umoddi3+0x4e0>
    c960:	01000404 	movi	r4,16
    c964:	3904d83a 	srl	r2,r7,r4
    c968:	00c00074 	movhi	r3,1
    c96c:	18f3dbc4 	addi	r3,r3,-12433
    c970:	1885883a 	add	r2,r3,r2
    c974:	14c00003 	ldbu	r19,0(r2)
    c978:	00c00804 	movi	r3,32
    c97c:	9927883a 	add	r19,r19,r4
    c980:	1ce9c83a 	sub	r20,r3,r19
    c984:	a000581e 	bne	r20,zero,cae8 <__umoddi3+0x2cc>
    c988:	3c400136 	bltu	r7,r17,c990 <__umoddi3+0x174>
    c98c:	8180eb36 	bltu	r16,r6,cd3c <__umoddi3+0x520>
    c990:	8185c83a 	sub	r2,r16,r6
    c994:	89e3c83a 	sub	r17,r17,r7
    c998:	8089803a 	cmpltu	r4,r16,r2
    c99c:	8939c83a 	sub	fp,r17,r4
    c9a0:	e007883a 	mov	r3,fp
    c9a4:	00003706 	br	ca84 <__umoddi3+0x268>
    c9a8:	3000041e 	bne	r6,zero,c9bc <__umoddi3+0x1a0>
    c9ac:	000b883a 	mov	r5,zero
    c9b0:	01000044 	movi	r4,1
    c9b4:	000ce4c0 	call	ce4c <__udivsi3>
    c9b8:	1027883a 	mov	r19,r2
    c9bc:	00bfffd4 	movui	r2,65535
    c9c0:	14c0402e 	bgeu	r2,r19,cac4 <__umoddi3+0x2a8>
    c9c4:	00804034 	movhi	r2,256
    c9c8:	10bfffc4 	addi	r2,r2,-1
    c9cc:	14c0cd36 	bltu	r2,r19,cd04 <__umoddi3+0x4e8>
    c9d0:	00800404 	movi	r2,16
    c9d4:	9886d83a 	srl	r3,r19,r2
    c9d8:	01000074 	movhi	r4,1
    c9dc:	2133dbc4 	addi	r4,r4,-12433
    c9e0:	20c7883a 	add	r3,r4,r3
    c9e4:	18c00003 	ldbu	r3,0(r3)
    c9e8:	1887883a 	add	r3,r3,r2
    c9ec:	00800804 	movi	r2,32
    c9f0:	10e5c83a 	sub	r18,r2,r3
    c9f4:	9000901e 	bne	r18,zero,cc38 <__umoddi3+0x41c>
    c9f8:	982cd43a 	srli	r22,r19,16
    c9fc:	8ce3c83a 	sub	r17,r17,r19
    ca00:	9d7fffcc 	andi	r21,r19,65535
    ca04:	b00b883a 	mov	r5,r22
    ca08:	8809883a 	mov	r4,r17
    ca0c:	000ceb00 	call	ceb0 <__umodsi3>
    ca10:	8809883a 	mov	r4,r17
    ca14:	b00b883a 	mov	r5,r22
    ca18:	1021883a 	mov	r16,r2
    ca1c:	000ce4c0 	call	ce4c <__udivsi3>
    ca20:	8006943a 	slli	r3,r16,16
    ca24:	a008d43a 	srli	r4,r20,16
    ca28:	1545383a 	mul	r2,r2,r21
    ca2c:	20c8b03a 	or	r4,r4,r3
    ca30:	2080042e 	bgeu	r4,r2,ca44 <__umoddi3+0x228>
    ca34:	24c9883a 	add	r4,r4,r19
    ca38:	24c00236 	bltu	r4,r19,ca44 <__umoddi3+0x228>
    ca3c:	2080012e 	bgeu	r4,r2,ca44 <__umoddi3+0x228>
    ca40:	24c9883a 	add	r4,r4,r19
    ca44:	20a1c83a 	sub	r16,r4,r2
    ca48:	b00b883a 	mov	r5,r22
    ca4c:	8009883a 	mov	r4,r16
    ca50:	000ceb00 	call	ceb0 <__umodsi3>
    ca54:	1023883a 	mov	r17,r2
    ca58:	b00b883a 	mov	r5,r22
    ca5c:	8009883a 	mov	r4,r16
    ca60:	000ce4c0 	call	ce4c <__udivsi3>
    ca64:	8822943a 	slli	r17,r17,16
    ca68:	1545383a 	mul	r2,r2,r21
    ca6c:	a53fffcc 	andi	r20,r20,65535
    ca70:	a446b03a 	or	r3,r20,r17
    ca74:	18bfb02e 	bgeu	r3,r2,c938 <__alt_data_end+0xf800c938>
    ca78:	003fab06 	br	c928 <__alt_data_end+0xf800c928>
    ca7c:	2005883a 	mov	r2,r4
    ca80:	2807883a 	mov	r3,r5
    ca84:	dfc00b17 	ldw	ra,44(sp)
    ca88:	df000a17 	ldw	fp,40(sp)
    ca8c:	ddc00917 	ldw	r23,36(sp)
    ca90:	dd800817 	ldw	r22,32(sp)
    ca94:	dd400717 	ldw	r21,28(sp)
    ca98:	dd000617 	ldw	r20,24(sp)
    ca9c:	dcc00517 	ldw	r19,20(sp)
    caa0:	dc800417 	ldw	r18,16(sp)
    caa4:	dc400317 	ldw	r17,12(sp)
    caa8:	dc000217 	ldw	r16,8(sp)
    caac:	dec00c04 	addi	sp,sp,48
    cab0:	f800283a 	ret
    cab4:	04c03fc4 	movi	r19,255
    cab8:	99c9803a 	cmpltu	r4,r19,r7
    cabc:	200890fa 	slli	r4,r4,3
    cac0:	003fa806 	br	c964 <__alt_data_end+0xf800c964>
    cac4:	00803fc4 	movi	r2,255
    cac8:	14c5803a 	cmpltu	r2,r2,r19
    cacc:	100490fa 	slli	r2,r2,3
    cad0:	003fc006 	br	c9d4 <__alt_data_end+0xf800c9d4>
    cad4:	00804034 	movhi	r2,256
    cad8:	10bfffc4 	addi	r2,r2,-1
    cadc:	11808b36 	bltu	r2,r6,cd0c <__umoddi3+0x4f0>
    cae0:	01000404 	movi	r4,16
    cae4:	003f6406 	br	c878 <__alt_data_end+0xf800c878>
    cae8:	34c4d83a 	srl	r2,r6,r19
    caec:	3d0e983a 	sll	r7,r7,r20
    caf0:	8cf8d83a 	srl	fp,r17,r19
    caf4:	8d10983a 	sll	r8,r17,r20
    caf8:	38aab03a 	or	r21,r7,r2
    cafc:	a82cd43a 	srli	r22,r21,16
    cb00:	84e2d83a 	srl	r17,r16,r19
    cb04:	e009883a 	mov	r4,fp
    cb08:	b00b883a 	mov	r5,r22
    cb0c:	8a22b03a 	or	r17,r17,r8
    cb10:	3524983a 	sll	r18,r6,r20
    cb14:	000ceb00 	call	ceb0 <__umodsi3>
    cb18:	e009883a 	mov	r4,fp
    cb1c:	b00b883a 	mov	r5,r22
    cb20:	102f883a 	mov	r23,r2
    cb24:	000ce4c0 	call	ce4c <__udivsi3>
    cb28:	100d883a 	mov	r6,r2
    cb2c:	b808943a 	slli	r4,r23,16
    cb30:	aa3fffcc 	andi	r8,r21,65535
    cb34:	8804d43a 	srli	r2,r17,16
    cb38:	41af383a 	mul	r23,r8,r6
    cb3c:	8520983a 	sll	r16,r16,r20
    cb40:	1104b03a 	or	r2,r2,r4
    cb44:	15c0042e 	bgeu	r2,r23,cb58 <__umoddi3+0x33c>
    cb48:	1545883a 	add	r2,r2,r21
    cb4c:	30ffffc4 	addi	r3,r6,-1
    cb50:	1540742e 	bgeu	r2,r21,cd24 <__umoddi3+0x508>
    cb54:	180d883a 	mov	r6,r3
    cb58:	15efc83a 	sub	r23,r2,r23
    cb5c:	b00b883a 	mov	r5,r22
    cb60:	b809883a 	mov	r4,r23
    cb64:	d9800115 	stw	r6,4(sp)
    cb68:	da000015 	stw	r8,0(sp)
    cb6c:	000ceb00 	call	ceb0 <__umodsi3>
    cb70:	b00b883a 	mov	r5,r22
    cb74:	b809883a 	mov	r4,r23
    cb78:	1039883a 	mov	fp,r2
    cb7c:	000ce4c0 	call	ce4c <__udivsi3>
    cb80:	da000017 	ldw	r8,0(sp)
    cb84:	e038943a 	slli	fp,fp,16
    cb88:	100b883a 	mov	r5,r2
    cb8c:	4089383a 	mul	r4,r8,r2
    cb90:	8a3fffcc 	andi	r8,r17,65535
    cb94:	4710b03a 	or	r8,r8,fp
    cb98:	d9800117 	ldw	r6,4(sp)
    cb9c:	4100042e 	bgeu	r8,r4,cbb0 <__umoddi3+0x394>
    cba0:	4551883a 	add	r8,r8,r21
    cba4:	10bfffc4 	addi	r2,r2,-1
    cba8:	45405a2e 	bgeu	r8,r21,cd14 <__umoddi3+0x4f8>
    cbac:	100b883a 	mov	r5,r2
    cbb0:	300c943a 	slli	r6,r6,16
    cbb4:	91ffffcc 	andi	r7,r18,65535
    cbb8:	9004d43a 	srli	r2,r18,16
    cbbc:	314cb03a 	or	r6,r6,r5
    cbc0:	317fffcc 	andi	r5,r6,65535
    cbc4:	300cd43a 	srli	r6,r6,16
    cbc8:	29d3383a 	mul	r9,r5,r7
    cbcc:	288b383a 	mul	r5,r5,r2
    cbd0:	31cf383a 	mul	r7,r6,r7
    cbd4:	4806d43a 	srli	r3,r9,16
    cbd8:	4111c83a 	sub	r8,r8,r4
    cbdc:	29cb883a 	add	r5,r5,r7
    cbe0:	194b883a 	add	r5,r3,r5
    cbe4:	3085383a 	mul	r2,r6,r2
    cbe8:	29c0022e 	bgeu	r5,r7,cbf4 <__umoddi3+0x3d8>
    cbec:	00c00074 	movhi	r3,1
    cbf0:	10c5883a 	add	r2,r2,r3
    cbf4:	2808d43a 	srli	r4,r5,16
    cbf8:	280a943a 	slli	r5,r5,16
    cbfc:	4a7fffcc 	andi	r9,r9,65535
    cc00:	2085883a 	add	r2,r4,r2
    cc04:	2a4b883a 	add	r5,r5,r9
    cc08:	40803636 	bltu	r8,r2,cce4 <__umoddi3+0x4c8>
    cc0c:	40804d26 	beq	r8,r2,cd44 <__umoddi3+0x528>
    cc10:	4089c83a 	sub	r4,r8,r2
    cc14:	280f883a 	mov	r7,r5
    cc18:	81cfc83a 	sub	r7,r16,r7
    cc1c:	81c7803a 	cmpltu	r3,r16,r7
    cc20:	20c7c83a 	sub	r3,r4,r3
    cc24:	1cc4983a 	sll	r2,r3,r19
    cc28:	3d0ed83a 	srl	r7,r7,r20
    cc2c:	1d06d83a 	srl	r3,r3,r20
    cc30:	11c4b03a 	or	r2,r2,r7
    cc34:	003f9306 	br	ca84 <__alt_data_end+0xf800ca84>
    cc38:	9ca6983a 	sll	r19,r19,r18
    cc3c:	88e8d83a 	srl	r20,r17,r3
    cc40:	80c4d83a 	srl	r2,r16,r3
    cc44:	982cd43a 	srli	r22,r19,16
    cc48:	8ca2983a 	sll	r17,r17,r18
    cc4c:	a009883a 	mov	r4,r20
    cc50:	b00b883a 	mov	r5,r22
    cc54:	1478b03a 	or	fp,r2,r17
    cc58:	000ceb00 	call	ceb0 <__umodsi3>
    cc5c:	a009883a 	mov	r4,r20
    cc60:	b00b883a 	mov	r5,r22
    cc64:	1023883a 	mov	r17,r2
    cc68:	000ce4c0 	call	ce4c <__udivsi3>
    cc6c:	9d7fffcc 	andi	r21,r19,65535
    cc70:	880a943a 	slli	r5,r17,16
    cc74:	e008d43a 	srli	r4,fp,16
    cc78:	a885383a 	mul	r2,r21,r2
    cc7c:	84a8983a 	sll	r20,r16,r18
    cc80:	2148b03a 	or	r4,r4,r5
    cc84:	2080042e 	bgeu	r4,r2,cc98 <__umoddi3+0x47c>
    cc88:	24c9883a 	add	r4,r4,r19
    cc8c:	24c00236 	bltu	r4,r19,cc98 <__umoddi3+0x47c>
    cc90:	2080012e 	bgeu	r4,r2,cc98 <__umoddi3+0x47c>
    cc94:	24c9883a 	add	r4,r4,r19
    cc98:	20a3c83a 	sub	r17,r4,r2
    cc9c:	b00b883a 	mov	r5,r22
    cca0:	8809883a 	mov	r4,r17
    cca4:	000ceb00 	call	ceb0 <__umodsi3>
    cca8:	102f883a 	mov	r23,r2
    ccac:	8809883a 	mov	r4,r17
    ccb0:	b00b883a 	mov	r5,r22
    ccb4:	000ce4c0 	call	ce4c <__udivsi3>
    ccb8:	b82e943a 	slli	r23,r23,16
    ccbc:	a885383a 	mul	r2,r21,r2
    ccc0:	e13fffcc 	andi	r4,fp,65535
    ccc4:	25c8b03a 	or	r4,r4,r23
    ccc8:	2080042e 	bgeu	r4,r2,ccdc <__umoddi3+0x4c0>
    cccc:	24c9883a 	add	r4,r4,r19
    ccd0:	24c00236 	bltu	r4,r19,ccdc <__umoddi3+0x4c0>
    ccd4:	2080012e 	bgeu	r4,r2,ccdc <__umoddi3+0x4c0>
    ccd8:	24c9883a 	add	r4,r4,r19
    ccdc:	20a3c83a 	sub	r17,r4,r2
    cce0:	003f4806 	br	ca04 <__alt_data_end+0xf800ca04>
    cce4:	2c8fc83a 	sub	r7,r5,r18
    cce8:	1545c83a 	sub	r2,r2,r21
    ccec:	29cb803a 	cmpltu	r5,r5,r7
    ccf0:	1145c83a 	sub	r2,r2,r5
    ccf4:	4089c83a 	sub	r4,r8,r2
    ccf8:	003fc706 	br	cc18 <__alt_data_end+0xf800cc18>
    ccfc:	01000604 	movi	r4,24
    cd00:	003f1806 	br	c964 <__alt_data_end+0xf800c964>
    cd04:	00800604 	movi	r2,24
    cd08:	003f3206 	br	c9d4 <__alt_data_end+0xf800c9d4>
    cd0c:	01000604 	movi	r4,24
    cd10:	003ed906 	br	c878 <__alt_data_end+0xf800c878>
    cd14:	413fa52e 	bgeu	r8,r4,cbac <__alt_data_end+0xf800cbac>
    cd18:	297fff84 	addi	r5,r5,-2
    cd1c:	4551883a 	add	r8,r8,r21
    cd20:	003fa306 	br	cbb0 <__alt_data_end+0xf800cbb0>
    cd24:	15ff8b2e 	bgeu	r2,r23,cb54 <__alt_data_end+0xf800cb54>
    cd28:	31bfff84 	addi	r6,r6,-2
    cd2c:	1545883a 	add	r2,r2,r21
    cd30:	003f8906 	br	cb58 <__alt_data_end+0xf800cb58>
    cd34:	24c9883a 	add	r4,r4,r19
    cd38:	003eee06 	br	c8f4 <__alt_data_end+0xf800c8f4>
    cd3c:	8005883a 	mov	r2,r16
    cd40:	003f1706 	br	c9a0 <__alt_data_end+0xf800c9a0>
    cd44:	817fe736 	bltu	r16,r5,cce4 <__alt_data_end+0xf800cce4>
    cd48:	280f883a 	mov	r7,r5
    cd4c:	0009883a 	mov	r4,zero
    cd50:	003fb106 	br	cc18 <__alt_data_end+0xf800cc18>

0000cd54 <__divsi3>:
    cd54:	20001b16 	blt	r4,zero,cdc4 <__divsi3+0x70>
    cd58:	000f883a 	mov	r7,zero
    cd5c:	28001616 	blt	r5,zero,cdb8 <__divsi3+0x64>
    cd60:	200d883a 	mov	r6,r4
    cd64:	29001a2e 	bgeu	r5,r4,cdd0 <__divsi3+0x7c>
    cd68:	00800804 	movi	r2,32
    cd6c:	00c00044 	movi	r3,1
    cd70:	00000106 	br	cd78 <__divsi3+0x24>
    cd74:	10000d26 	beq	r2,zero,cdac <__divsi3+0x58>
    cd78:	294b883a 	add	r5,r5,r5
    cd7c:	10bfffc4 	addi	r2,r2,-1
    cd80:	18c7883a 	add	r3,r3,r3
    cd84:	293ffb36 	bltu	r5,r4,cd74 <__alt_data_end+0xf800cd74>
    cd88:	0005883a 	mov	r2,zero
    cd8c:	18000726 	beq	r3,zero,cdac <__divsi3+0x58>
    cd90:	0005883a 	mov	r2,zero
    cd94:	31400236 	bltu	r6,r5,cda0 <__divsi3+0x4c>
    cd98:	314dc83a 	sub	r6,r6,r5
    cd9c:	10c4b03a 	or	r2,r2,r3
    cda0:	1806d07a 	srli	r3,r3,1
    cda4:	280ad07a 	srli	r5,r5,1
    cda8:	183ffa1e 	bne	r3,zero,cd94 <__alt_data_end+0xf800cd94>
    cdac:	38000126 	beq	r7,zero,cdb4 <__divsi3+0x60>
    cdb0:	0085c83a 	sub	r2,zero,r2
    cdb4:	f800283a 	ret
    cdb8:	014bc83a 	sub	r5,zero,r5
    cdbc:	39c0005c 	xori	r7,r7,1
    cdc0:	003fe706 	br	cd60 <__alt_data_end+0xf800cd60>
    cdc4:	0109c83a 	sub	r4,zero,r4
    cdc8:	01c00044 	movi	r7,1
    cdcc:	003fe306 	br	cd5c <__alt_data_end+0xf800cd5c>
    cdd0:	00c00044 	movi	r3,1
    cdd4:	003fee06 	br	cd90 <__alt_data_end+0xf800cd90>

0000cdd8 <__modsi3>:
    cdd8:	20001716 	blt	r4,zero,ce38 <__modsi3+0x60>
    cddc:	000f883a 	mov	r7,zero
    cde0:	2005883a 	mov	r2,r4
    cde4:	28001216 	blt	r5,zero,ce30 <__modsi3+0x58>
    cde8:	2900162e 	bgeu	r5,r4,ce44 <__modsi3+0x6c>
    cdec:	01800804 	movi	r6,32
    cdf0:	00c00044 	movi	r3,1
    cdf4:	00000106 	br	cdfc <__modsi3+0x24>
    cdf8:	30000a26 	beq	r6,zero,ce24 <__modsi3+0x4c>
    cdfc:	294b883a 	add	r5,r5,r5
    ce00:	31bfffc4 	addi	r6,r6,-1
    ce04:	18c7883a 	add	r3,r3,r3
    ce08:	293ffb36 	bltu	r5,r4,cdf8 <__alt_data_end+0xf800cdf8>
    ce0c:	18000526 	beq	r3,zero,ce24 <__modsi3+0x4c>
    ce10:	1806d07a 	srli	r3,r3,1
    ce14:	11400136 	bltu	r2,r5,ce1c <__modsi3+0x44>
    ce18:	1145c83a 	sub	r2,r2,r5
    ce1c:	280ad07a 	srli	r5,r5,1
    ce20:	183ffb1e 	bne	r3,zero,ce10 <__alt_data_end+0xf800ce10>
    ce24:	38000126 	beq	r7,zero,ce2c <__modsi3+0x54>
    ce28:	0085c83a 	sub	r2,zero,r2
    ce2c:	f800283a 	ret
    ce30:	014bc83a 	sub	r5,zero,r5
    ce34:	003fec06 	br	cde8 <__alt_data_end+0xf800cde8>
    ce38:	0109c83a 	sub	r4,zero,r4
    ce3c:	01c00044 	movi	r7,1
    ce40:	003fe706 	br	cde0 <__alt_data_end+0xf800cde0>
    ce44:	00c00044 	movi	r3,1
    ce48:	003ff106 	br	ce10 <__alt_data_end+0xf800ce10>

0000ce4c <__udivsi3>:
    ce4c:	200d883a 	mov	r6,r4
    ce50:	2900152e 	bgeu	r5,r4,cea8 <__udivsi3+0x5c>
    ce54:	28001416 	blt	r5,zero,cea8 <__udivsi3+0x5c>
    ce58:	00800804 	movi	r2,32
    ce5c:	00c00044 	movi	r3,1
    ce60:	00000206 	br	ce6c <__udivsi3+0x20>
    ce64:	10000e26 	beq	r2,zero,cea0 <__udivsi3+0x54>
    ce68:	28000516 	blt	r5,zero,ce80 <__udivsi3+0x34>
    ce6c:	294b883a 	add	r5,r5,r5
    ce70:	10bfffc4 	addi	r2,r2,-1
    ce74:	18c7883a 	add	r3,r3,r3
    ce78:	293ffa36 	bltu	r5,r4,ce64 <__alt_data_end+0xf800ce64>
    ce7c:	18000826 	beq	r3,zero,cea0 <__udivsi3+0x54>
    ce80:	0005883a 	mov	r2,zero
    ce84:	31400236 	bltu	r6,r5,ce90 <__udivsi3+0x44>
    ce88:	314dc83a 	sub	r6,r6,r5
    ce8c:	10c4b03a 	or	r2,r2,r3
    ce90:	1806d07a 	srli	r3,r3,1
    ce94:	280ad07a 	srli	r5,r5,1
    ce98:	183ffa1e 	bne	r3,zero,ce84 <__alt_data_end+0xf800ce84>
    ce9c:	f800283a 	ret
    cea0:	0005883a 	mov	r2,zero
    cea4:	f800283a 	ret
    cea8:	00c00044 	movi	r3,1
    ceac:	003ff406 	br	ce80 <__alt_data_end+0xf800ce80>

0000ceb0 <__umodsi3>:
    ceb0:	2005883a 	mov	r2,r4
    ceb4:	2900122e 	bgeu	r5,r4,cf00 <__umodsi3+0x50>
    ceb8:	28001116 	blt	r5,zero,cf00 <__umodsi3+0x50>
    cebc:	01800804 	movi	r6,32
    cec0:	00c00044 	movi	r3,1
    cec4:	00000206 	br	ced0 <__umodsi3+0x20>
    cec8:	30000c26 	beq	r6,zero,cefc <__umodsi3+0x4c>
    cecc:	28000516 	blt	r5,zero,cee4 <__umodsi3+0x34>
    ced0:	294b883a 	add	r5,r5,r5
    ced4:	31bfffc4 	addi	r6,r6,-1
    ced8:	18c7883a 	add	r3,r3,r3
    cedc:	293ffa36 	bltu	r5,r4,cec8 <__alt_data_end+0xf800cec8>
    cee0:	18000626 	beq	r3,zero,cefc <__umodsi3+0x4c>
    cee4:	1806d07a 	srli	r3,r3,1
    cee8:	11400136 	bltu	r2,r5,cef0 <__umodsi3+0x40>
    ceec:	1145c83a 	sub	r2,r2,r5
    cef0:	280ad07a 	srli	r5,r5,1
    cef4:	183ffb1e 	bne	r3,zero,cee4 <__alt_data_end+0xf800cee4>
    cef8:	f800283a 	ret
    cefc:	f800283a 	ret
    cf00:	00c00044 	movi	r3,1
    cf04:	003ff706 	br	cee4 <__alt_data_end+0xf800cee4>

0000cf08 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    cf08:	defffd04 	addi	sp,sp,-12
    cf0c:	df000215 	stw	fp,8(sp)
    cf10:	df000204 	addi	fp,sp,8
    cf14:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    cf18:	0001883a 	nop
    cf1c:	e0bfff17 	ldw	r2,-4(fp)
    cf20:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    cf24:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    cf28:	10000226 	beq	r2,zero,cf34 <_exit+0x2c>
    ALT_SIM_FAIL();
    cf2c:	002af070 	cmpltui	zero,zero,43969
    cf30:	00000106 	br	cf38 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    cf34:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    cf38:	003fff06 	br	cf38 <__alt_data_end+0xf800cf38>
