
ECE_178_Project_app.elf:     file format elf32-littlenios2
ECE_178_Project_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000056f0 memsz 0x000056f0 flags r-x
    LOAD off    0x00006710 vaddr 0x00005710 paddr 0x00006e10 align 2**12
         filesz 0x00001700 memsz 0x00001700 flags rw-
    LOAD off    0x00008510 vaddr 0x00008510 paddr 0x00008510 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053d4  000001c0  000001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000017c  00005594  00005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001700  00005710  00006e10  00006710  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  00008510  00008510  00008510  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  00008680  00008680  00007e10  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007e10  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006c8  00000000  00000000  00007e38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000956c  00000000  00000000  00008500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000034d7  00000000  00000000  00011a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000039b2  00000000  00000000  00014f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fec  00000000  00000000  000188f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e79  00000000  00000000  000198e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000022ca  00000000  00000000  0001b75d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001da28  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000608  00000000  00000000  0001da58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0002022f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY
 26 .jdi          00004534  00000000  00000000  00020272  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0008d0b5  00000000  00000000  000247a6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001c0 l    d  .text	00000000 .text
00005594 l    d  .rodata	00000000 .rodata
00005710 l    d  .rwdata	00000000 .rwdata
00008510 l    d  .bss	00000000 .bss
00008680 l    d  .sdram_controller	00000000 .sdram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ECE_178_Project_app_bsp//obj/HAL/src/crt0.o
00000208 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
000002b8 l     F .text	000000b0 timer_0_init
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00002414 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000257c l     F .text	00000034 alt_dev_reg
00005710 l     O .rwdata	00001060 jtag_uart
00006770 l     O .rwdata	00000054 pixel_buffer_dma
000067c4 l     O .rwdata	00000044 pixel_rgb_resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00002b28 l     F .text	0000020c altera_avalon_jtag_uart_irq
00002d34 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000336c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00004440 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00004594 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000045c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004824 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00004964 l     F .text	0000003c alt_get_errno
000049a0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000069b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002500 g     F .text	0000007c alt_main
00003d34 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
00008580 g     O .bss	00000100 alt_irq
00008518 g     O .bss	00000004 vbx
00006e10 g       *ABS*	00000000 __flash_rwdata_start
0000851c g     O .bss	00000004 xb1
00001f7c g     F .text	00000070 .hidden __fixsfsi
0000349c g     F .text	00000194 alt_up_pixel_buffer_dma_draw
000008a4 g     F .text	00000294 updatePaddlePos
00008510 g     O .bss	00000004 scoreL
00003460 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000857c g     O .bss	00000004 errno
00008520 g     O .bss	00000004 xl1
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
0000856c g     O .bss	00000004 alt_argv
0000edd4 g       *ABS*	00000000 _gp
00001a98 g     F .text	000004e4 .hidden __subsf3
00003630 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
00006830 g     O .rwdata	00000180 alt_fd_list
0000046c g     F .text	00000214 resetObjects
00008524 g     O .bss	00000004 xb0
00004760 g     F .text	00000090 alt_find_dev
000050e8 g     F .text	00000148 memcpy
00008528 g     O .bss	00000004 xr0
0000852c g     O .bss	00000004 yb0
000048e8 g     F .text	0000007c alt_io_redirect
00005594 g       *ABS*	00000000 __DTOR_END__
00000b8c g     F .text	00000290 drawBall
000036ec g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00008530 g     O .bss	00000004 vby
00002f2c g     F .text	0000021c altera_avalon_jtag_uart_read
00008534 g     O .bss	00000004 vry
00003b24 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
000019d0 g     F .text	000000c8 .hidden __lesf2
00008538 g     O .bss	00000004 yl0
00004f90 g     F .text	00000090 alt_icache_flush
00004048 g     F .text	00000084 helper_plot_pixel
00006df8 g     O .rwdata	00000004 alt_max_fd
00000e1c g     F .text	00000630 drawPaddles
00003720 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
00006e08 g     O .rwdata	00000004 _global_impure_ptr
00008680 g       *ABS*	00000000 __bss_end
00002324 g     F .text	000000f0 alt_iic_isr_register
00003848 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
00004cb8 g     F .text	00000108 alt_tick
000022d8 g     F .text	0000004c alt_ic_irq_enabled
00004c1c g     F .text	0000009c alt_alarm_stop
00008564 g     O .bss	00000004 alt_irq_active
0000853c g     O .bss	00000004 xl0
000000ec g     F .exceptions	000000d4 alt_irq_handler
00006808 g     O .rwdata	00000028 alt_dev_null
00008540 g     O .bss	00000004 vrx
0000454c g     F .text	00000048 alt_dcache_flush_all
00003f80 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
00006e10 g       *ABS*	00000000 __ram_rwdata_end
00006df0 g     O .rwdata	00000008 alt_dev_list
000040cc g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
00001914 g     F .text	000000bc .hidden __gtsf2
00005710 g       *ABS*	00000000 __ram_rodata_end
00006de0 g     O .rwdata	00000004 ballSize
00008680 g       *ABS*	00000000 end
00002a68 g     F .text	000000c0 altera_avalon_jtag_uart_init
00008544 g     O .bss	00000004 yb1
00005594 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
000033e4 g     F .text	0000007c alt_avalon_timer_sc_init
00002110 g     F .text	00000064 .hidden __clzsi2
00003148 g     F .text	00000224 altera_avalon_jtag_uart_write
000053e0 g     F .text	00000180 __call_exitprocs
000001c0 g     F .text	0000004c _start
00008574 g     O .bss	00000004 _alt_tick_rate
00008578 g     O .bss	00000004 _alt_nticks
000025e8 g     F .text	0000031c alt_sys_init
00001fec g     F .text	00000124 .hidden __floatsisf
000052c8 g     F .text	00000118 __register_exitproc
00002dd4 g     F .text	00000068 altera_avalon_jtag_uart_close
00005710 g       *ABS*	00000000 __ram_rwdata_start
00005594 g       *ABS*	00000000 __ram_rodata_start
00002904 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00004eec g     F .text	000000a4 alt_get_fd
0000506c g     F .text	0000007c memcmp
000029c4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00008680 g       *ABS*	00000000 __alt_stack_base
00002a14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004de4 g     F .text	00000108 alt_find_file
000045fc g     F .text	000000a4 alt_dev_llist_insert
00008510 g       *ABS*	00000000 __bss_start
0000020c g     F .text	000000ac main
00008570 g     O .bss	00000004 alt_envp
0000368c g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
00002964 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000019d0 g     F .text	000000c8 .hidden __ltsf2
00006dfc g     O .rwdata	00000004 alt_errno
00005594 g       *ABS*	00000000 __CTOR_END__
00005594 g       *ABS*	00000000 __flash_rodata_start
00005594 g       *ABS*	00000000 __DTOR_LIST__
000025b0 g     F .text	00000038 alt_irq_init
00004bb8 g     F .text	00000064 alt_release_fd
000055aa g     O .rodata	00000100 .hidden __clz_tab
00008548 g     O .bss	00000004 pixel_buffer
00005020 g     F .text	00000014 atexit
00001914 g     F .text	000000bc .hidden __gesf2
00006e0c g     O .rwdata	00000004 _impure_ptr
00008568 g     O .bss	00000004 alt_argc
00004700 g     F .text	00000060 _do_dtors
0000854c g     O .bss	00000004 xr1
00008550 g     O .bss	00000004 yl1
00000020 g       .exceptions	00000000 alt_irq_entry
00006de8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002174 g     F .text	00000050 alt_ic_isr_register
00006e10 g       *ABS*	00000000 _edata
00008680 g       *ABS*	00000000 _end
000001c0 g       *ABS*	00000000 __ram_exceptions_end
00000680 g     F .text	00000224 updateBallPos
00002e3c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000224c g     F .text	0000008c alt_ic_irq_disable
00008554 g     O .bss	00000004 vlx
00004dc0 g     F .text	00000024 altera_nios2_qsys_irq_init
00008558 g     O .bss	00000004 yr0
00005034 g     F .text	00000038 exit
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000b38 g     F .text	00000054 draw
00005560 g     F .text	00000034 _exit
0000855c g     O .bss	00000004 vly
00000368 g     F .text	00000048 timer_isr
00004314 g     F .text	0000012c alt_alarm_start
00008560 g     O .bss	00000004 yr1
00005230 g     F .text	00000098 strlen
00004a64 g     F .text	00000154 open
00006dd4 g     O .rwdata	00000004 paddleW
000047f0 g     F .text	00000034 alt_icache_flush_all
000003b0 g     F .text	000000bc inPaddleBound
00006de4 g     O .rwdata	00000004 alt_priority_mask
000021c4 g     F .text	00000088 alt_ic_irq_enable
00008514 g     O .bss	00000004 scoreR
00006e00 g     O .rwdata	00000008 alt_alarm_list
000046a0 g     F .text	00000060 _do_ctors
0000447c g     F .text	000000d0 close
0000144c g     F .text	000004c8 .hidden __addsf3
00006dd8 g     O .rwdata	00000004 paddleH
0000247c g     F .text	00000084 alt_load
00006ddc g     O .rwdata	00000004 paddleSpeed



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08407014 	ori	at,at,448
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001426 	beq	r2,zero,17c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00800074 	movhi	r2,1
 130:	10a16004 	addi	r2,r2,-31360
 134:	e0fffd17 	ldw	r3,-12(fp)
 138:	180690fa 	slli	r3,r3,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	10c00017 	ldw	r3,0(r2)
 144:	00800074 	movhi	r2,1
 148:	10a16004 	addi	r2,r2,-31360
 14c:	e13ffd17 	ldw	r4,-12(fp)
 150:	200890fa 	slli	r4,r4,3
 154:	1105883a 	add	r2,r2,r4
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	00000706 	br	198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 17c:	e0bffc17 	ldw	r2,-16(fp)
 180:	1085883a 	add	r2,r2,r2
 184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 188:	e0bffd17 	ldw	r2,-12(fp)
 18c:	10800044 	addi	r2,r2,1
 190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 194:	003fe106 	br	11c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
 198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 19c:	e0bffb17 	ldw	r2,-20(fp)
 1a0:	103fdb1e 	bne	r2,zero,110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1a4:	0001883a 	nop
}
 1a8:	0001883a 	nop
 1ac:	e037883a 	mov	sp,fp
 1b0:	dfc00117 	ldw	ra,4(sp)
 1b4:	df000017 	ldw	fp,0(sp)
 1b8:	dec00204 	addi	sp,sp,8
 1bc:	f800283a 	ret

Disassembly of section .text:

000001c0 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1c0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1c4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1cc:	00bffd16 	blt	zero,r2,1c4 <__alt_data_end+0xf80001c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1d0:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1d4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1d8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1dc:	d6bb7514 	ori	gp,gp,60884
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1e0:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1e4:	10a14414 	ori	r2,r2,34064

    movhi r3, %hi(__bss_end)
     1e8:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1ec:	18e1a014 	ori	r3,r3,34432

    beq r2, r3, 1f
     1f0:	10c00326 	beq	r2,r3,200 <_start+0x40>

0:
    stw zero, (r2)
     1f4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1fc:	10fffd36 	bltu	r2,r3,1f4 <__alt_data_end+0xf80001f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     200:	000247c0 	call	247c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     204:	00025000 	call	2500 <alt_main>

00000208 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     208:	003fff06 	br	208 <__alt_data_end+0xf8000208>

0000020c <main>:
void drawPaddles();
void draw();

alt_up_pixel_buffer_dma_dev *pixel_buffer;

int main() {
     20c:	defffe04 	addi	sp,sp,-8
     210:	dfc00115 	stw	ra,4(sp)
     214:	df000015 	stw	fp,0(sp)
     218:	d839883a 	mov	fp,sp
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
     21c:	01000034 	movhi	r4,0
     220:	21156504 	addi	r4,r4,21908
     224:	00034600 	call	3460 <alt_up_pixel_buffer_dma_open_dev>
     228:	d0a5dd15 	stw	r2,-26764(gp)
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
     22c:	d0a5dd17 	ldw	r2,-26764(gp)
     230:	000b883a 	mov	r5,zero
     234:	1009883a 	mov	r4,r2
     238:	00037200 	call	3720 <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 1);
     23c:	d0a5dd17 	ldw	r2,-26764(gp)
     240:	01400044 	movi	r5,1
     244:	1009883a 	mov	r4,r2
     248:	00037200 	call	3720 <alt_up_pixel_buffer_dma_clear_screen>
	xl1 = paddleW/2;
     24c:	d0a00017 	ldw	r2,-32768(gp)
     250:	1006d7fa 	srli	r3,r2,31
     254:	1885883a 	add	r2,r3,r2
     258:	1005d07a 	srai	r2,r2,1
     25c:	1009883a 	mov	r4,r2
     260:	0001fec0 	call	1fec <__floatsisf>
     264:	1007883a 	mov	r3,r2
     268:	d0e5d315 	stw	r3,-26804(gp)
	yl1 = HEIGHT/2;
     26c:	0090bc34 	movhi	r2,17136
     270:	d0a5df15 	stw	r2,-26756(gp)
	xr1 = WIDTH-(paddleW/2);
     274:	d0a00017 	ldw	r2,-32768(gp)
     278:	1006d7fa 	srli	r3,r2,31
     27c:	1885883a 	add	r2,r3,r2
     280:	1005d07a 	srai	r2,r2,1
     284:	1007883a 	mov	r3,r2
     288:	00805004 	movi	r2,320
     28c:	10c5c83a 	sub	r2,r2,r3
     290:	1009883a 	mov	r4,r2
     294:	0001fec0 	call	1fec <__floatsisf>
     298:	1007883a 	mov	r3,r2
     29c:	d0e5de15 	stw	r3,-26760(gp)
	yr1 = HEIGHT/2;
     2a0:	0090bc34 	movhi	r2,17136
     2a4:	d0a5e315 	stw	r2,-26740(gp)
	timer_0_init(1000/60);
     2a8:	01000404 	movi	r4,16
     2ac:	00002b80 	call	2b8 <timer_0_init>
	resetObjects();
     2b0:	000046c0 	call	46c <resetObjects>
	while(1)
	{
	}
     2b4:	003fff06 	br	2b4 <__alt_data_end+0xf80002b4>

000002b8 <timer_0_init>:
//
	return 0;
}

static void timer_0_init(int period_arg) {
     2b8:	defff904 	addi	sp,sp,-28
     2bc:	dfc00615 	stw	ra,24(sp)
     2c0:	df000515 	stw	fp,20(sp)
     2c4:	df000504 	addi	fp,sp,20
     2c8:	e13fff15 	stw	r4,-4(fp)
	// stop the timer first
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
     2cc:	00c00204 	movi	r3,8
     2d0:	00820834 	movhi	r2,2080
     2d4:	10841104 	addi	r2,r2,4164
     2d8:	10c00035 	stwio	r3,0(r2)

	// set the period to 1000 ms, TIMER_LOAD_VALUE is scalar for 1ms in the native clk freq
	int period = period_arg * TIMER_0_LOAD_VALUE;
     2dc:	e0ffff17 	ldw	r3,-4(fp)
     2e0:	00b0d3d4 	movui	r2,49999
     2e4:	1885383a 	mul	r2,r3,r2
     2e8:	e0bffc15 	stw	r2,-16(fp)
	int periodlo = period & 0xffff;
     2ec:	e0bffc17 	ldw	r2,-16(fp)
     2f0:	10bfffcc 	andi	r2,r2,65535
     2f4:	e0bffd15 	stw	r2,-12(fp)
	int periodhi = period >> 16;
     2f8:	e0bffc17 	ldw	r2,-16(fp)
     2fc:	1005d43a 	srai	r2,r2,16
     300:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, periodlo);
     304:	00820834 	movhi	r2,2080
     308:	10841204 	addi	r2,r2,4168
     30c:	e0fffd17 	ldw	r3,-12(fp)
     310:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, periodhi);
     314:	00820834 	movhi	r2,2080
     318:	10841304 	addi	r2,r2,4172
     31c:	e0fffe17 	ldw	r3,-8(fp)
     320:	10c00035 	stwio	r3,0(r2)

	//enable ITO, CONT, and START bits
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0b111);
     324:	00c001c4 	movi	r3,7
     328:	00820834 	movhi	r2,2080
     32c:	10841104 	addi	r2,r2,4164
     330:	10c00035 	stwio	r3,0(r2)

	// timer interrupt handler
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ,
     334:	d8000015 	stw	zero,0(sp)
     338:	000f883a 	mov	r7,zero
     33c:	01800034 	movhi	r6,0
     340:	3180da04 	addi	r6,r6,872
     344:	014000c4 	movi	r5,3
     348:	0009883a 	mov	r4,zero
     34c:	00021740 	call	2174 <alt_ic_isr_register>
							timer_isr, NULL, NULL);
}
     350:	0001883a 	nop
     354:	e037883a 	mov	sp,fp
     358:	dfc00117 	ldw	ra,4(sp)
     35c:	df000017 	ldw	fp,0(sp)
     360:	dec00204 	addi	sp,sp,8
     364:	f800283a 	ret

00000368 <timer_isr>:
void timer_isr() {
     368:	defffe04 	addi	sp,sp,-8
     36c:	dfc00115 	stw	ra,4(sp)
     370:	df000015 	stw	fp,0(sp)
     374:	d839883a 	mov	fp,sp
	// clear the TO bit
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     378:	0007883a 	mov	r3,zero
     37c:	00820834 	movhi	r2,2080
     380:	10841004 	addi	r2,r2,4160
     384:	10c00035 	stwio	r3,0(r2)

	draw();
     388:	0000b380 	call	b38 <draw>

	// dummy instruction to synchronize
	IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE);
     38c:	00820834 	movhi	r2,2080
     390:	10841004 	addi	r2,r2,4160
     394:	10800037 	ldwio	r2,0(r2)
	return;
     398:	0001883a 	nop
}
     39c:	e037883a 	mov	sp,fp
     3a0:	dfc00117 	ldw	ra,4(sp)
     3a4:	df000017 	ldw	fp,0(sp)
     3a8:	dec00204 	addi	sp,sp,8
     3ac:	f800283a 	ret

000003b0 <inPaddleBound>:

bool inPaddleBound(float y, float yp)
{
     3b0:	defffc04 	addi	sp,sp,-16
     3b4:	dfc00315 	stw	ra,12(sp)
     3b8:	df000215 	stw	fp,8(sp)
     3bc:	df000204 	addi	fp,sp,8
     3c0:	e13ffe15 	stw	r4,-8(fp)
     3c4:	e17fff15 	stw	r5,-4(fp)
	return (y >= (yp-paddleH/2)) && (y <= (yp+paddleH/2));
     3c8:	d0a00117 	ldw	r2,-32764(gp)
     3cc:	1006d7fa 	srli	r3,r2,31
     3d0:	1885883a 	add	r2,r3,r2
     3d4:	1005d07a 	srai	r2,r2,1
     3d8:	1009883a 	mov	r4,r2
     3dc:	0001fec0 	call	1fec <__floatsisf>
     3e0:	1007883a 	mov	r3,r2
     3e4:	180b883a 	mov	r5,r3
     3e8:	e13fff17 	ldw	r4,-4(fp)
     3ec:	0001a980 	call	1a98 <__subsf3>
     3f0:	1007883a 	mov	r3,r2
     3f4:	1805883a 	mov	r2,r3
     3f8:	e17ffe17 	ldw	r5,-8(fp)
     3fc:	1009883a 	mov	r4,r2
     400:	00019d00 	call	19d0 <__lesf2>
     404:	00801216 	blt	zero,r2,450 <inPaddleBound+0xa0>
     408:	d0a00117 	ldw	r2,-32764(gp)
     40c:	1006d7fa 	srli	r3,r2,31
     410:	1885883a 	add	r2,r3,r2
     414:	1005d07a 	srai	r2,r2,1
     418:	1009883a 	mov	r4,r2
     41c:	0001fec0 	call	1fec <__floatsisf>
     420:	1007883a 	mov	r3,r2
     424:	e17fff17 	ldw	r5,-4(fp)
     428:	1809883a 	mov	r4,r3
     42c:	000144c0 	call	144c <__addsf3>
     430:	1007883a 	mov	r3,r2
     434:	1805883a 	mov	r2,r3
     438:	e17ffe17 	ldw	r5,-8(fp)
     43c:	1009883a 	mov	r4,r2
     440:	00019140 	call	1914 <__gesf2>
     444:	10000216 	blt	r2,zero,450 <inPaddleBound+0xa0>
     448:	00800044 	movi	r2,1
     44c:	00000106 	br	454 <inPaddleBound+0xa4>
     450:	0005883a 	mov	r2,zero
     454:	1080004c 	andi	r2,r2,1
}
     458:	e037883a 	mov	sp,fp
     45c:	dfc00117 	ldw	ra,4(sp)
     460:	df000017 	ldw	fp,0(sp)
     464:	dec00204 	addi	sp,sp,8
     468:	f800283a 	ret

0000046c <resetObjects>:

void resetObjects()
{
     46c:	defff704 	addi	sp,sp,-36
     470:	dfc00815 	stw	ra,32(sp)
     474:	df000715 	stw	fp,28(sp)
     478:	dcc00615 	stw	r19,24(sp)
     47c:	dc800515 	stw	r18,20(sp)
     480:	dc400415 	stw	r17,16(sp)
     484:	dc000315 	stw	r16,12(sp)
     488:	df000704 	addi	fp,sp,28
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, 0, 0, WIDTH-1, HEIGHT-1, COLOR_BLACK, 0);
     48c:	d0e5dd17 	ldw	r3,-26764(gp)
     490:	d8000215 	stw	zero,8(sp)
     494:	d8000115 	stw	zero,4(sp)
     498:	00803bc4 	movi	r2,239
     49c:	d8800015 	stw	r2,0(sp)
     4a0:	01c04fc4 	movi	r7,319
     4a4:	000d883a 	mov	r6,zero
     4a8:	000b883a 	mov	r5,zero
     4ac:	1809883a 	mov	r4,r3
     4b0:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
	xb1 = WIDTH/2;
     4b4:	0090c834 	movhi	r2,17184
     4b8:	d0a5d215 	stw	r2,-26808(gp)
	yb1 = HEIGHT/2;
     4bc:	0090bc34 	movhi	r2,17136
     4c0:	d0a5dc15 	stw	r2,-26768(gp)
	vbx = 2;
     4c4:	00900034 	movhi	r2,16384
     4c8:	d0a5d115 	stw	r2,-26812(gp)
	vby = 0.3;
     4cc:	008fa6b4 	movhi	r2,16026
     4d0:	10a66684 	addi	r2,r2,-26214
     4d4:	d0a5d715 	stw	r2,-26788(gp)
	vlx = 0;
     4d8:	d025e015 	stw	zero,-26752(gp)
	vly = 0;
     4dc:	d025e215 	stw	zero,-26744(gp)
	vrx = 0;
     4e0:	d025db15 	stw	zero,-26772(gp)
	vry = 0;
     4e4:	d025d815 	stw	zero,-26784(gp)
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xl1-paddleW/2, (int) yl1-paddleH/2, (int) xl1+paddleW/2, (int) yl1+paddleH/2, COLOR_WHITE, 0);
     4e8:	d425dd17 	ldw	r16,-26764(gp)
     4ec:	d0a5d317 	ldw	r2,-26804(gp)
     4f0:	1009883a 	mov	r4,r2
     4f4:	0001f7c0 	call	1f7c <__fixsfsi>
     4f8:	1009883a 	mov	r4,r2
     4fc:	d0a00017 	ldw	r2,-32768(gp)
     500:	1006d7fa 	srli	r3,r2,31
     504:	1885883a 	add	r2,r3,r2
     508:	1005d07a 	srai	r2,r2,1
     50c:	20a3c83a 	sub	r17,r4,r2
     510:	d0a5df17 	ldw	r2,-26756(gp)
     514:	1009883a 	mov	r4,r2
     518:	0001f7c0 	call	1f7c <__fixsfsi>
     51c:	1009883a 	mov	r4,r2
     520:	d0a00117 	ldw	r2,-32764(gp)
     524:	1006d7fa 	srli	r3,r2,31
     528:	1885883a 	add	r2,r3,r2
     52c:	1005d07a 	srai	r2,r2,1
     530:	20a5c83a 	sub	r18,r4,r2
     534:	d0a5d317 	ldw	r2,-26804(gp)
     538:	1009883a 	mov	r4,r2
     53c:	0001f7c0 	call	1f7c <__fixsfsi>
     540:	1009883a 	mov	r4,r2
     544:	d0a00017 	ldw	r2,-32768(gp)
     548:	1006d7fa 	srli	r3,r2,31
     54c:	1885883a 	add	r2,r3,r2
     550:	1005d07a 	srai	r2,r2,1
     554:	20a7883a 	add	r19,r4,r2
     558:	d0a5df17 	ldw	r2,-26756(gp)
     55c:	1009883a 	mov	r4,r2
     560:	0001f7c0 	call	1f7c <__fixsfsi>
     564:	1009883a 	mov	r4,r2
     568:	d0a00117 	ldw	r2,-32764(gp)
     56c:	1006d7fa 	srli	r3,r2,31
     570:	1885883a 	add	r2,r3,r2
     574:	1005d07a 	srai	r2,r2,1
     578:	2085883a 	add	r2,r4,r2
     57c:	d8000215 	stw	zero,8(sp)
     580:	00ffffd4 	movui	r3,65535
     584:	d8c00115 	stw	r3,4(sp)
     588:	d8800015 	stw	r2,0(sp)
     58c:	980f883a 	mov	r7,r19
     590:	900d883a 	mov	r6,r18
     594:	880b883a 	mov	r5,r17
     598:	8009883a 	mov	r4,r16
     59c:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr1-paddleW/2, (int) yr1-paddleH/2, (int) xr1+paddleW/2, (int) yr1+paddleH/2, COLOR_WHITE, 0);
     5a0:	d425dd17 	ldw	r16,-26764(gp)
     5a4:	d0a5de17 	ldw	r2,-26760(gp)
     5a8:	1009883a 	mov	r4,r2
     5ac:	0001f7c0 	call	1f7c <__fixsfsi>
     5b0:	1009883a 	mov	r4,r2
     5b4:	d0a00017 	ldw	r2,-32768(gp)
     5b8:	1006d7fa 	srli	r3,r2,31
     5bc:	1885883a 	add	r2,r3,r2
     5c0:	1005d07a 	srai	r2,r2,1
     5c4:	20a3c83a 	sub	r17,r4,r2
     5c8:	d0a5e317 	ldw	r2,-26740(gp)
     5cc:	1009883a 	mov	r4,r2
     5d0:	0001f7c0 	call	1f7c <__fixsfsi>
     5d4:	1009883a 	mov	r4,r2
     5d8:	d0a00117 	ldw	r2,-32764(gp)
     5dc:	1006d7fa 	srli	r3,r2,31
     5e0:	1885883a 	add	r2,r3,r2
     5e4:	1005d07a 	srai	r2,r2,1
     5e8:	20a5c83a 	sub	r18,r4,r2
     5ec:	d0a5de17 	ldw	r2,-26760(gp)
     5f0:	1009883a 	mov	r4,r2
     5f4:	0001f7c0 	call	1f7c <__fixsfsi>
     5f8:	1009883a 	mov	r4,r2
     5fc:	d0a00017 	ldw	r2,-32768(gp)
     600:	1006d7fa 	srli	r3,r2,31
     604:	1885883a 	add	r2,r3,r2
     608:	1005d07a 	srai	r2,r2,1
     60c:	20a7883a 	add	r19,r4,r2
     610:	d0a5e317 	ldw	r2,-26740(gp)
     614:	1009883a 	mov	r4,r2
     618:	0001f7c0 	call	1f7c <__fixsfsi>
     61c:	1009883a 	mov	r4,r2
     620:	d0a00117 	ldw	r2,-32764(gp)
     624:	1006d7fa 	srli	r3,r2,31
     628:	1885883a 	add	r2,r3,r2
     62c:	1005d07a 	srai	r2,r2,1
     630:	2085883a 	add	r2,r4,r2
     634:	d8000215 	stw	zero,8(sp)
     638:	00ffffd4 	movui	r3,65535
     63c:	d8c00115 	stw	r3,4(sp)
     640:	d8800015 	stw	r2,0(sp)
     644:	980f883a 	mov	r7,r19
     648:	900d883a 	mov	r6,r18
     64c:	880b883a 	mov	r5,r17
     650:	8009883a 	mov	r4,r16
     654:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
}
     658:	0001883a 	nop
     65c:	e6fffc04 	addi	sp,fp,-16
     660:	dfc00517 	ldw	ra,20(sp)
     664:	df000417 	ldw	fp,16(sp)
     668:	dcc00317 	ldw	r19,12(sp)
     66c:	dc800217 	ldw	r18,8(sp)
     670:	dc400117 	ldw	r17,4(sp)
     674:	dc000017 	ldw	r16,0(sp)
     678:	dec00604 	addi	sp,sp,24
     67c:	f800283a 	ret

00000680 <updateBallPos>:

void updateBallPos()
{
     680:	defffe04 	addi	sp,sp,-8
     684:	dfc00115 	stw	ra,4(sp)
     688:	df000015 	stw	fp,0(sp)
     68c:	d839883a 	mov	fp,sp
	xb0 = xb1;
     690:	d0a5d217 	ldw	r2,-26808(gp)
     694:	d0a5d415 	stw	r2,-26800(gp)
	yb0 = yb1;
     698:	d0a5dc17 	ldw	r2,-26768(gp)
     69c:	d0a5d615 	stw	r2,-26792(gp)
	xb1 += vbx;
     6a0:	d0a5d217 	ldw	r2,-26808(gp)
     6a4:	d0e5d117 	ldw	r3,-26812(gp)
     6a8:	180b883a 	mov	r5,r3
     6ac:	1009883a 	mov	r4,r2
     6b0:	000144c0 	call	144c <__addsf3>
     6b4:	1007883a 	mov	r3,r2
     6b8:	1805883a 	mov	r2,r3
     6bc:	d0a5d215 	stw	r2,-26808(gp)
	yb1 += vby;
     6c0:	d0a5dc17 	ldw	r2,-26768(gp)
     6c4:	d0e5d717 	ldw	r3,-26788(gp)
     6c8:	180b883a 	mov	r5,r3
     6cc:	1009883a 	mov	r4,r2
     6d0:	000144c0 	call	144c <__addsf3>
     6d4:	1007883a 	mov	r3,r2
     6d8:	1805883a 	mov	r2,r3
     6dc:	d0a5dc15 	stw	r2,-26768(gp)
	if (xb1 <= paddleW)
     6e0:	d0a00017 	ldw	r2,-32768(gp)
     6e4:	1009883a 	mov	r4,r2
     6e8:	0001fec0 	call	1fec <__floatsisf>
     6ec:	1007883a 	mov	r3,r2
     6f0:	d0a5d217 	ldw	r2,-26808(gp)
     6f4:	100b883a 	mov	r5,r2
     6f8:	1809883a 	mov	r4,r3
     6fc:	00019140 	call	1914 <__gesf2>
     700:	10001d16 	blt	r2,zero,778 <updateBallPos+0xf8>
	{
		if (!inPaddleBound(yb1, yl1))
     704:	d0a5dc17 	ldw	r2,-26768(gp)
     708:	d0e5df17 	ldw	r3,-26756(gp)
     70c:	180b883a 	mov	r5,r3
     710:	1009883a 	mov	r4,r2
     714:	00003b00 	call	3b0 <inPaddleBound>
     718:	1080005c 	xori	r2,r2,1
     71c:	10803fcc 	andi	r2,r2,255
     720:	10000526 	beq	r2,zero,738 <updateBallPos+0xb8>
		{
			scoreR += 1;
     724:	d0a5d017 	ldw	r2,-26816(gp)
     728:	10800044 	addi	r2,r2,1
     72c:	d0a5d015 	stw	r2,-26816(gp)
			resetObjects();
     730:	000046c0 	call	46c <resetObjects>
     734:	00003906 	br	81c <updateBallPos+0x19c>
		}
		else
		{
			xb1 = 2*(paddleW) - xb1;
     738:	d0a00017 	ldw	r2,-32768(gp)
     73c:	1085883a 	add	r2,r2,r2
     740:	1009883a 	mov	r4,r2
     744:	0001fec0 	call	1fec <__floatsisf>
     748:	1007883a 	mov	r3,r2
     74c:	d0a5d217 	ldw	r2,-26808(gp)
     750:	100b883a 	mov	r5,r2
     754:	1809883a 	mov	r4,r3
     758:	0001a980 	call	1a98 <__subsf3>
     75c:	1007883a 	mov	r3,r2
     760:	1805883a 	mov	r2,r3
     764:	d0a5d215 	stw	r2,-26808(gp)
			vbx *= -1;
     768:	d0a5d117 	ldw	r2,-26812(gp)
     76c:	10a0003c 	xorhi	r2,r2,32768
     770:	d0a5d115 	stw	r2,-26812(gp)
     774:	00002906 	br	81c <updateBallPos+0x19c>
		}
	} else if (xb1 >= WIDTH-paddleW-1)
     778:	d0a00017 	ldw	r2,-32768(gp)
     77c:	00c04fc4 	movi	r3,319
     780:	1885c83a 	sub	r2,r3,r2
     784:	1009883a 	mov	r4,r2
     788:	0001fec0 	call	1fec <__floatsisf>
     78c:	1007883a 	mov	r3,r2
     790:	d0a5d217 	ldw	r2,-26808(gp)
     794:	100b883a 	mov	r5,r2
     798:	1809883a 	mov	r4,r3
     79c:	00019d00 	call	19d0 <__lesf2>
     7a0:	00801e16 	blt	zero,r2,81c <updateBallPos+0x19c>
	{
		if (!inPaddleBound(yb1, yr1))
     7a4:	d0a5dc17 	ldw	r2,-26768(gp)
     7a8:	d0e5e317 	ldw	r3,-26740(gp)
     7ac:	180b883a 	mov	r5,r3
     7b0:	1009883a 	mov	r4,r2
     7b4:	00003b00 	call	3b0 <inPaddleBound>
     7b8:	1080005c 	xori	r2,r2,1
     7bc:	10803fcc 	andi	r2,r2,255
     7c0:	10000526 	beq	r2,zero,7d8 <updateBallPos+0x158>
		{
			scoreL += 1;
     7c4:	d0a5cf17 	ldw	r2,-26820(gp)
     7c8:	10800044 	addi	r2,r2,1
     7cc:	d0a5cf15 	stw	r2,-26820(gp)
			resetObjects();
     7d0:	000046c0 	call	46c <resetObjects>
     7d4:	00001106 	br	81c <updateBallPos+0x19c>
		}
		else
		{
			xb1 = 2*(WIDTH-paddleW-1) - xb1;
     7d8:	d0a00017 	ldw	r2,-32768(gp)
     7dc:	00c04fc4 	movi	r3,319
     7e0:	1885c83a 	sub	r2,r3,r2
     7e4:	1085883a 	add	r2,r2,r2
     7e8:	1009883a 	mov	r4,r2
     7ec:	0001fec0 	call	1fec <__floatsisf>
     7f0:	1007883a 	mov	r3,r2
     7f4:	d0a5d217 	ldw	r2,-26808(gp)
     7f8:	100b883a 	mov	r5,r2
     7fc:	1809883a 	mov	r4,r3
     800:	0001a980 	call	1a98 <__subsf3>
     804:	1007883a 	mov	r3,r2
     808:	1805883a 	mov	r2,r3
     80c:	d0a5d215 	stw	r2,-26808(gp)
			vbx *= -1;
     810:	d0a5d117 	ldw	r2,-26812(gp)
     814:	10a0003c 	xorhi	r2,r2,32768
     818:	d0a5d115 	stw	r2,-26812(gp)
		}
	}
	if (yb1 <= 0)
     81c:	d0a5dc17 	ldw	r2,-26768(gp)
     820:	000b883a 	mov	r5,zero
     824:	1009883a 	mov	r4,r2
     828:	00019d00 	call	19d0 <__lesf2>
     82c:	00800716 	blt	zero,r2,84c <updateBallPos+0x1cc>
	{
		yb1 = -yb1;
     830:	d0a5dc17 	ldw	r2,-26768(gp)
     834:	10a0003c 	xorhi	r2,r2,32768
     838:	d0a5dc15 	stw	r2,-26768(gp)
		vby *= -1;
     83c:	d0a5d717 	ldw	r2,-26788(gp)
     840:	10a0003c 	xorhi	r2,r2,32768
     844:	d0a5d715 	stw	r2,-26788(gp)
	} else if (yb1 >= HEIGHT-1)
	{
		yb1 = 2*(HEIGHT-1) - yb1;
		vby *= -1;
	}
}
     848:	00001006 	br	88c <updateBallPos+0x20c>
	}
	if (yb1 <= 0)
	{
		yb1 = -yb1;
		vby *= -1;
	} else if (yb1 >= HEIGHT-1)
     84c:	d0a5dc17 	ldw	r2,-26768(gp)
     850:	0150dbf4 	movhi	r5,17263
     854:	1009883a 	mov	r4,r2
     858:	00019140 	call	1914 <__gesf2>
     85c:	1000010e 	bge	r2,zero,864 <updateBallPos+0x1e4>
	{
		yb1 = 2*(HEIGHT-1) - yb1;
		vby *= -1;
	}
}
     860:	00000a06 	br	88c <updateBallPos+0x20c>
	{
		yb1 = -yb1;
		vby *= -1;
	} else if (yb1 >= HEIGHT-1)
	{
		yb1 = 2*(HEIGHT-1) - yb1;
     864:	d0a5dc17 	ldw	r2,-26768(gp)
     868:	100b883a 	mov	r5,r2
     86c:	0110fbf4 	movhi	r4,17391
     870:	0001a980 	call	1a98 <__subsf3>
     874:	1007883a 	mov	r3,r2
     878:	1805883a 	mov	r2,r3
     87c:	d0a5dc15 	stw	r2,-26768(gp)
		vby *= -1;
     880:	d0a5d717 	ldw	r2,-26788(gp)
     884:	10a0003c 	xorhi	r2,r2,32768
     888:	d0a5d715 	stw	r2,-26788(gp)
	}
}
     88c:	0001883a 	nop
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <updatePaddlePos>:

void updatePaddlePos()
{
     8a4:	defffe04 	addi	sp,sp,-8
     8a8:	dfc00115 	stw	ra,4(sp)
     8ac:	df000015 	stw	fp,0(sp)
     8b0:	d839883a 	mov	fp,sp
	xl0 = xl1;
     8b4:	d0a5d317 	ldw	r2,-26804(gp)
     8b8:	d0a5da15 	stw	r2,-26776(gp)
	yl0 = yl1;
     8bc:	d0a5df17 	ldw	r2,-26756(gp)
     8c0:	d0a5d915 	stw	r2,-26780(gp)
	xr0 = xr1;
     8c4:	d0a5de17 	ldw	r2,-26760(gp)
     8c8:	d0a5d515 	stw	r2,-26796(gp)
	yr0 = yr1;
     8cc:	d0a5e317 	ldw	r2,-26740(gp)
     8d0:	d0a5e115 	stw	r2,-26748(gp)
	if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x1)
     8d4:	00820834 	movhi	r2,2080
     8d8:	10842004 	addi	r2,r2,4224
     8dc:	10800037 	ldwio	r2,0(r2)
     8e0:	1080004c 	andi	r2,r2,1
     8e4:	10000326 	beq	r2,zero,8f4 <updatePaddlePos+0x50>
		vry = paddleSpeed;
     8e8:	d0a00217 	ldw	r2,-32760(gp)
     8ec:	d0a5d815 	stw	r2,-26784(gp)
     8f0:	00000a06 	br	91c <updatePaddlePos+0x78>
	else if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & 0x2)
     8f4:	00820834 	movhi	r2,2080
     8f8:	10842004 	addi	r2,r2,4224
     8fc:	10800037 	ldwio	r2,0(r2)
     900:	1080008c 	andi	r2,r2,2
     904:	10000426 	beq	r2,zero,918 <updatePaddlePos+0x74>
		vry = -paddleSpeed;
     908:	d0a00217 	ldw	r2,-32760(gp)
     90c:	10a0003c 	xorhi	r2,r2,32768
     910:	d0a5d815 	stw	r2,-26784(gp)
     914:	00000106 	br	91c <updatePaddlePos+0x78>
	else
		vry = 0;
     918:	d025d815 	stw	zero,-26784(gp)
	if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & (0x1 << 16))
     91c:	00820834 	movhi	r2,2080
     920:	10842004 	addi	r2,r2,4224
     924:	10800037 	ldwio	r2,0(r2)
     928:	1080006c 	andhi	r2,r2,1
     92c:	10000326 	beq	r2,zero,93c <updatePaddlePos+0x98>
		vly = paddleSpeed;
     930:	d0a00217 	ldw	r2,-32760(gp)
     934:	d0a5e215 	stw	r2,-26744(gp)
     938:	00000a06 	br	964 <updatePaddlePos+0xc0>
	else if (IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE) & (0x2 << 16))
     93c:	00820834 	movhi	r2,2080
     940:	10842004 	addi	r2,r2,4224
     944:	10800037 	ldwio	r2,0(r2)
     948:	108000ac 	andhi	r2,r2,2
     94c:	10000426 	beq	r2,zero,960 <updatePaddlePos+0xbc>
		vly = -paddleSpeed;
     950:	d0a00217 	ldw	r2,-32760(gp)
     954:	10a0003c 	xorhi	r2,r2,32768
     958:	d0a5e215 	stw	r2,-26744(gp)
     95c:	00000106 	br	964 <updatePaddlePos+0xc0>
	else
		vly = 0;
     960:	d025e215 	stw	zero,-26744(gp)
	yl1 += vly;
     964:	d0a5df17 	ldw	r2,-26756(gp)
     968:	d0e5e217 	ldw	r3,-26744(gp)
     96c:	180b883a 	mov	r5,r3
     970:	1009883a 	mov	r4,r2
     974:	000144c0 	call	144c <__addsf3>
     978:	1007883a 	mov	r3,r2
     97c:	1805883a 	mov	r2,r3
     980:	d0a5df15 	stw	r2,-26756(gp)
	if (yl1 < paddleH/2) yl1 = paddleH/2;
     984:	d0a00117 	ldw	r2,-32764(gp)
     988:	1006d7fa 	srli	r3,r2,31
     98c:	1885883a 	add	r2,r3,r2
     990:	1005d07a 	srai	r2,r2,1
     994:	1009883a 	mov	r4,r2
     998:	0001fec0 	call	1fec <__floatsisf>
     99c:	1007883a 	mov	r3,r2
     9a0:	d0a5df17 	ldw	r2,-26756(gp)
     9a4:	100b883a 	mov	r5,r2
     9a8:	1809883a 	mov	r4,r3
     9ac:	00019140 	call	1914 <__gesf2>
     9b0:	0080090e 	bge	zero,r2,9d8 <updatePaddlePos+0x134>
     9b4:	d0a00117 	ldw	r2,-32764(gp)
     9b8:	1006d7fa 	srli	r3,r2,31
     9bc:	1885883a 	add	r2,r3,r2
     9c0:	1005d07a 	srai	r2,r2,1
     9c4:	1009883a 	mov	r4,r2
     9c8:	0001fec0 	call	1fec <__floatsisf>
     9cc:	1007883a 	mov	r3,r2
     9d0:	d0e5df15 	stw	r3,-26756(gp)
     9d4:	00001a06 	br	a40 <updatePaddlePos+0x19c>
	else if (yl1 > HEIGHT-1-paddleH/2) yl1 = HEIGHT-1-paddleH/2;
     9d8:	d0a00117 	ldw	r2,-32764(gp)
     9dc:	1006d7fa 	srli	r3,r2,31
     9e0:	1885883a 	add	r2,r3,r2
     9e4:	1005d07a 	srai	r2,r2,1
     9e8:	1007883a 	mov	r3,r2
     9ec:	00803bc4 	movi	r2,239
     9f0:	10c5c83a 	sub	r2,r2,r3
     9f4:	1009883a 	mov	r4,r2
     9f8:	0001fec0 	call	1fec <__floatsisf>
     9fc:	1007883a 	mov	r3,r2
     a00:	d0a5df17 	ldw	r2,-26756(gp)
     a04:	100b883a 	mov	r5,r2
     a08:	1809883a 	mov	r4,r3
     a0c:	00019d00 	call	19d0 <__lesf2>
     a10:	10000b0e 	bge	r2,zero,a40 <updatePaddlePos+0x19c>
     a14:	d0a00117 	ldw	r2,-32764(gp)
     a18:	1006d7fa 	srli	r3,r2,31
     a1c:	1885883a 	add	r2,r3,r2
     a20:	1005d07a 	srai	r2,r2,1
     a24:	1007883a 	mov	r3,r2
     a28:	00803bc4 	movi	r2,239
     a2c:	10c5c83a 	sub	r2,r2,r3
     a30:	1009883a 	mov	r4,r2
     a34:	0001fec0 	call	1fec <__floatsisf>
     a38:	1007883a 	mov	r3,r2
     a3c:	d0e5df15 	stw	r3,-26756(gp)
	yr1 += vry;
     a40:	d0a5e317 	ldw	r2,-26740(gp)
     a44:	d0e5d817 	ldw	r3,-26784(gp)
     a48:	180b883a 	mov	r5,r3
     a4c:	1009883a 	mov	r4,r2
     a50:	000144c0 	call	144c <__addsf3>
     a54:	1007883a 	mov	r3,r2
     a58:	1805883a 	mov	r2,r3
     a5c:	d0a5e315 	stw	r2,-26740(gp)
	if (yr1 < paddleH/2) yr1 = paddleH/2;
     a60:	d0a00117 	ldw	r2,-32764(gp)
     a64:	1006d7fa 	srli	r3,r2,31
     a68:	1885883a 	add	r2,r3,r2
     a6c:	1005d07a 	srai	r2,r2,1
     a70:	1009883a 	mov	r4,r2
     a74:	0001fec0 	call	1fec <__floatsisf>
     a78:	1007883a 	mov	r3,r2
     a7c:	d0a5e317 	ldw	r2,-26740(gp)
     a80:	100b883a 	mov	r5,r2
     a84:	1809883a 	mov	r4,r3
     a88:	00019140 	call	1914 <__gesf2>
     a8c:	0080090e 	bge	zero,r2,ab4 <updatePaddlePos+0x210>
     a90:	d0a00117 	ldw	r2,-32764(gp)
     a94:	1006d7fa 	srli	r3,r2,31
     a98:	1885883a 	add	r2,r3,r2
     a9c:	1005d07a 	srai	r2,r2,1
     aa0:	1009883a 	mov	r4,r2
     aa4:	0001fec0 	call	1fec <__floatsisf>
     aa8:	1007883a 	mov	r3,r2
     aac:	d0e5e315 	stw	r3,-26740(gp)
	else if (yr1 > HEIGHT-1-paddleH/2) yr1 = HEIGHT-1-paddleH/2;
}
     ab0:	00001b06 	br	b20 <updatePaddlePos+0x27c>
	yl1 += vly;
	if (yl1 < paddleH/2) yl1 = paddleH/2;
	else if (yl1 > HEIGHT-1-paddleH/2) yl1 = HEIGHT-1-paddleH/2;
	yr1 += vry;
	if (yr1 < paddleH/2) yr1 = paddleH/2;
	else if (yr1 > HEIGHT-1-paddleH/2) yr1 = HEIGHT-1-paddleH/2;
     ab4:	d0a00117 	ldw	r2,-32764(gp)
     ab8:	1006d7fa 	srli	r3,r2,31
     abc:	1885883a 	add	r2,r3,r2
     ac0:	1005d07a 	srai	r2,r2,1
     ac4:	1007883a 	mov	r3,r2
     ac8:	00803bc4 	movi	r2,239
     acc:	10c5c83a 	sub	r2,r2,r3
     ad0:	1009883a 	mov	r4,r2
     ad4:	0001fec0 	call	1fec <__floatsisf>
     ad8:	1007883a 	mov	r3,r2
     adc:	d0a5e317 	ldw	r2,-26740(gp)
     ae0:	100b883a 	mov	r5,r2
     ae4:	1809883a 	mov	r4,r3
     ae8:	00019d00 	call	19d0 <__lesf2>
     aec:	10000116 	blt	r2,zero,af4 <updatePaddlePos+0x250>
}
     af0:	00000b06 	br	b20 <updatePaddlePos+0x27c>
	yl1 += vly;
	if (yl1 < paddleH/2) yl1 = paddleH/2;
	else if (yl1 > HEIGHT-1-paddleH/2) yl1 = HEIGHT-1-paddleH/2;
	yr1 += vry;
	if (yr1 < paddleH/2) yr1 = paddleH/2;
	else if (yr1 > HEIGHT-1-paddleH/2) yr1 = HEIGHT-1-paddleH/2;
     af4:	d0a00117 	ldw	r2,-32764(gp)
     af8:	1006d7fa 	srli	r3,r2,31
     afc:	1885883a 	add	r2,r3,r2
     b00:	1005d07a 	srai	r2,r2,1
     b04:	1007883a 	mov	r3,r2
     b08:	00803bc4 	movi	r2,239
     b0c:	10c5c83a 	sub	r2,r2,r3
     b10:	1009883a 	mov	r4,r2
     b14:	0001fec0 	call	1fec <__floatsisf>
     b18:	1007883a 	mov	r3,r2
     b1c:	d0e5e315 	stw	r3,-26740(gp)
}
     b20:	0001883a 	nop
     b24:	e037883a 	mov	sp,fp
     b28:	dfc00117 	ldw	ra,4(sp)
     b2c:	df000017 	ldw	fp,0(sp)
     b30:	dec00204 	addi	sp,sp,8
     b34:	f800283a 	ret

00000b38 <draw>:

void draw()
{
     b38:	defffe04 	addi	sp,sp,-8
     b3c:	dfc00115 	stw	ra,4(sp)
     b40:	df000015 	stw	fp,0(sp)
     b44:	d839883a 	mov	fp,sp
	updateBallPos();
     b48:	00006800 	call	680 <updateBallPos>
	updatePaddlePos();
     b4c:	00008a40 	call	8a4 <updatePaddlePos>
	drawBall();
     b50:	0000b8c0 	call	b8c <drawBall>
	drawPaddles();
     b54:	0000e1c0 	call	e1c <drawPaddles>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DISPLAYS_BASE, (scoreL << 16) + scoreR);
     b58:	d0a5cf17 	ldw	r2,-26820(gp)
     b5c:	1006943a 	slli	r3,r2,16
     b60:	d0a5d017 	ldw	r2,-26816(gp)
     b64:	1887883a 	add	r3,r3,r2
     b68:	00820834 	movhi	r2,2080
     b6c:	10842804 	addi	r2,r2,4256
     b70:	10c00035 	stwio	r3,0(r2)
}
     b74:	0001883a 	nop
     b78:	e037883a 	mov	sp,fp
     b7c:	dfc00117 	ldw	ra,4(sp)
     b80:	df000017 	ldw	fp,0(sp)
     b84:	dec00204 	addi	sp,sp,8
     b88:	f800283a 	ret

00000b8c <drawBall>:

void drawBall()
{
     b8c:	defff704 	addi	sp,sp,-36
     b90:	dfc00815 	stw	ra,32(sp)
     b94:	df000715 	stw	fp,28(sp)
     b98:	dcc00615 	stw	r19,24(sp)
     b9c:	dc800515 	stw	r18,20(sp)
     ba0:	dc400415 	stw	r17,16(sp)
     ba4:	dc000315 	stw	r16,12(sp)
     ba8:	df000704 	addi	fp,sp,28
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) (xb0-ballSize/2), (int) (yb0-ballSize/2), (int) (xb0+ballSize/2), (int) (yb0+ballSize/2), COLOR_BLACK, 0);
     bac:	d425dd17 	ldw	r16,-26764(gp)
     bb0:	d465d417 	ldw	r17,-26800(gp)
     bb4:	d0a00317 	ldw	r2,-32756(gp)
     bb8:	1006d7fa 	srli	r3,r2,31
     bbc:	1885883a 	add	r2,r3,r2
     bc0:	1005d07a 	srai	r2,r2,1
     bc4:	1009883a 	mov	r4,r2
     bc8:	0001fec0 	call	1fec <__floatsisf>
     bcc:	1007883a 	mov	r3,r2
     bd0:	180b883a 	mov	r5,r3
     bd4:	8809883a 	mov	r4,r17
     bd8:	0001a980 	call	1a98 <__subsf3>
     bdc:	1007883a 	mov	r3,r2
     be0:	1805883a 	mov	r2,r3
     be4:	1009883a 	mov	r4,r2
     be8:	0001f7c0 	call	1f7c <__fixsfsi>
     bec:	1025883a 	mov	r18,r2
     bf0:	d465d617 	ldw	r17,-26792(gp)
     bf4:	d0a00317 	ldw	r2,-32756(gp)
     bf8:	1006d7fa 	srli	r3,r2,31
     bfc:	1885883a 	add	r2,r3,r2
     c00:	1005d07a 	srai	r2,r2,1
     c04:	1009883a 	mov	r4,r2
     c08:	0001fec0 	call	1fec <__floatsisf>
     c0c:	1007883a 	mov	r3,r2
     c10:	180b883a 	mov	r5,r3
     c14:	8809883a 	mov	r4,r17
     c18:	0001a980 	call	1a98 <__subsf3>
     c1c:	1007883a 	mov	r3,r2
     c20:	1805883a 	mov	r2,r3
     c24:	1009883a 	mov	r4,r2
     c28:	0001f7c0 	call	1f7c <__fixsfsi>
     c2c:	1023883a 	mov	r17,r2
     c30:	d0a00317 	ldw	r2,-32756(gp)
     c34:	1006d7fa 	srli	r3,r2,31
     c38:	1885883a 	add	r2,r3,r2
     c3c:	1005d07a 	srai	r2,r2,1
     c40:	1009883a 	mov	r4,r2
     c44:	0001fec0 	call	1fec <__floatsisf>
     c48:	1007883a 	mov	r3,r2
     c4c:	d0a5d417 	ldw	r2,-26800(gp)
     c50:	100b883a 	mov	r5,r2
     c54:	1809883a 	mov	r4,r3
     c58:	000144c0 	call	144c <__addsf3>
     c5c:	1007883a 	mov	r3,r2
     c60:	1805883a 	mov	r2,r3
     c64:	1009883a 	mov	r4,r2
     c68:	0001f7c0 	call	1f7c <__fixsfsi>
     c6c:	1027883a 	mov	r19,r2
     c70:	d0a00317 	ldw	r2,-32756(gp)
     c74:	1006d7fa 	srli	r3,r2,31
     c78:	1885883a 	add	r2,r3,r2
     c7c:	1005d07a 	srai	r2,r2,1
     c80:	1009883a 	mov	r4,r2
     c84:	0001fec0 	call	1fec <__floatsisf>
     c88:	1007883a 	mov	r3,r2
     c8c:	d0a5d617 	ldw	r2,-26792(gp)
     c90:	100b883a 	mov	r5,r2
     c94:	1809883a 	mov	r4,r3
     c98:	000144c0 	call	144c <__addsf3>
     c9c:	1007883a 	mov	r3,r2
     ca0:	1805883a 	mov	r2,r3
     ca4:	1009883a 	mov	r4,r2
     ca8:	0001f7c0 	call	1f7c <__fixsfsi>
     cac:	d8000215 	stw	zero,8(sp)
     cb0:	d8000115 	stw	zero,4(sp)
     cb4:	d8800015 	stw	r2,0(sp)
     cb8:	980f883a 	mov	r7,r19
     cbc:	880d883a 	mov	r6,r17
     cc0:	900b883a 	mov	r5,r18
     cc4:	8009883a 	mov	r4,r16
     cc8:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) (xb1-ballSize/2), (int) (yb1-ballSize/2), (int) (xb1+ballSize/2), (int) (yb1+ballSize/2), COLOR_WHITE, 0);
     ccc:	d425dd17 	ldw	r16,-26764(gp)
     cd0:	d465d217 	ldw	r17,-26808(gp)
     cd4:	d0a00317 	ldw	r2,-32756(gp)
     cd8:	1006d7fa 	srli	r3,r2,31
     cdc:	1885883a 	add	r2,r3,r2
     ce0:	1005d07a 	srai	r2,r2,1
     ce4:	1009883a 	mov	r4,r2
     ce8:	0001fec0 	call	1fec <__floatsisf>
     cec:	1007883a 	mov	r3,r2
     cf0:	180b883a 	mov	r5,r3
     cf4:	8809883a 	mov	r4,r17
     cf8:	0001a980 	call	1a98 <__subsf3>
     cfc:	1007883a 	mov	r3,r2
     d00:	1805883a 	mov	r2,r3
     d04:	1009883a 	mov	r4,r2
     d08:	0001f7c0 	call	1f7c <__fixsfsi>
     d0c:	1025883a 	mov	r18,r2
     d10:	d465dc17 	ldw	r17,-26768(gp)
     d14:	d0a00317 	ldw	r2,-32756(gp)
     d18:	1006d7fa 	srli	r3,r2,31
     d1c:	1885883a 	add	r2,r3,r2
     d20:	1005d07a 	srai	r2,r2,1
     d24:	1009883a 	mov	r4,r2
     d28:	0001fec0 	call	1fec <__floatsisf>
     d2c:	1007883a 	mov	r3,r2
     d30:	180b883a 	mov	r5,r3
     d34:	8809883a 	mov	r4,r17
     d38:	0001a980 	call	1a98 <__subsf3>
     d3c:	1007883a 	mov	r3,r2
     d40:	1805883a 	mov	r2,r3
     d44:	1009883a 	mov	r4,r2
     d48:	0001f7c0 	call	1f7c <__fixsfsi>
     d4c:	1023883a 	mov	r17,r2
     d50:	d0a00317 	ldw	r2,-32756(gp)
     d54:	1006d7fa 	srli	r3,r2,31
     d58:	1885883a 	add	r2,r3,r2
     d5c:	1005d07a 	srai	r2,r2,1
     d60:	1009883a 	mov	r4,r2
     d64:	0001fec0 	call	1fec <__floatsisf>
     d68:	1007883a 	mov	r3,r2
     d6c:	d0a5d217 	ldw	r2,-26808(gp)
     d70:	100b883a 	mov	r5,r2
     d74:	1809883a 	mov	r4,r3
     d78:	000144c0 	call	144c <__addsf3>
     d7c:	1007883a 	mov	r3,r2
     d80:	1805883a 	mov	r2,r3
     d84:	1009883a 	mov	r4,r2
     d88:	0001f7c0 	call	1f7c <__fixsfsi>
     d8c:	1027883a 	mov	r19,r2
     d90:	d0a00317 	ldw	r2,-32756(gp)
     d94:	1006d7fa 	srli	r3,r2,31
     d98:	1885883a 	add	r2,r3,r2
     d9c:	1005d07a 	srai	r2,r2,1
     da0:	1009883a 	mov	r4,r2
     da4:	0001fec0 	call	1fec <__floatsisf>
     da8:	1007883a 	mov	r3,r2
     dac:	d0a5dc17 	ldw	r2,-26768(gp)
     db0:	100b883a 	mov	r5,r2
     db4:	1809883a 	mov	r4,r3
     db8:	000144c0 	call	144c <__addsf3>
     dbc:	1007883a 	mov	r3,r2
     dc0:	1805883a 	mov	r2,r3
     dc4:	1009883a 	mov	r4,r2
     dc8:	0001f7c0 	call	1f7c <__fixsfsi>
     dcc:	1007883a 	mov	r3,r2
     dd0:	d8000215 	stw	zero,8(sp)
     dd4:	00bfffd4 	movui	r2,65535
     dd8:	d8800115 	stw	r2,4(sp)
     ddc:	d8c00015 	stw	r3,0(sp)
     de0:	980f883a 	mov	r7,r19
     de4:	880d883a 	mov	r6,r17
     de8:	900b883a 	mov	r5,r18
     dec:	8009883a 	mov	r4,r16
     df0:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
}
     df4:	0001883a 	nop
     df8:	e6fffc04 	addi	sp,fp,-16
     dfc:	dfc00517 	ldw	ra,20(sp)
     e00:	df000417 	ldw	fp,16(sp)
     e04:	dcc00317 	ldw	r19,12(sp)
     e08:	dc800217 	ldw	r18,8(sp)
     e0c:	dc400117 	ldw	r17,4(sp)
     e10:	dc000017 	ldw	r16,0(sp)
     e14:	dec00604 	addi	sp,sp,24
     e18:	f800283a 	ret

00000e1c <drawPaddles>:

void drawPaddles()
{
     e1c:	defff704 	addi	sp,sp,-36
     e20:	dfc00815 	stw	ra,32(sp)
     e24:	df000715 	stw	fp,28(sp)
     e28:	dcc00615 	stw	r19,24(sp)
     e2c:	dc800515 	stw	r18,20(sp)
     e30:	dc400415 	stw	r17,16(sp)
     e34:	dc000315 	stw	r16,12(sp)
     e38:	df000704 	addi	fp,sp,28
	if (yl1 > yl0)
     e3c:	d0a5df17 	ldw	r2,-26756(gp)
     e40:	d0e5d917 	ldw	r3,-26780(gp)
     e44:	180b883a 	mov	r5,r3
     e48:	1009883a 	mov	r4,r2
     e4c:	00019140 	call	1914 <__gesf2>
     e50:	00805c0e 	bge	zero,r2,fc4 <drawPaddles+0x1a8>
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xl0-paddleW/2, (int) yl0-paddleH/2, (int) xl0+paddleW/2, (int) yl1-paddleH/2, COLOR_BLACK, 0);
     e54:	d425dd17 	ldw	r16,-26764(gp)
     e58:	d0a5da17 	ldw	r2,-26776(gp)
     e5c:	1009883a 	mov	r4,r2
     e60:	0001f7c0 	call	1f7c <__fixsfsi>
     e64:	1009883a 	mov	r4,r2
     e68:	d0a00017 	ldw	r2,-32768(gp)
     e6c:	1006d7fa 	srli	r3,r2,31
     e70:	1885883a 	add	r2,r3,r2
     e74:	1005d07a 	srai	r2,r2,1
     e78:	20a3c83a 	sub	r17,r4,r2
     e7c:	d0a5d917 	ldw	r2,-26780(gp)
     e80:	1009883a 	mov	r4,r2
     e84:	0001f7c0 	call	1f7c <__fixsfsi>
     e88:	1009883a 	mov	r4,r2
     e8c:	d0a00117 	ldw	r2,-32764(gp)
     e90:	1006d7fa 	srli	r3,r2,31
     e94:	1885883a 	add	r2,r3,r2
     e98:	1005d07a 	srai	r2,r2,1
     e9c:	20a5c83a 	sub	r18,r4,r2
     ea0:	d0a5da17 	ldw	r2,-26776(gp)
     ea4:	1009883a 	mov	r4,r2
     ea8:	0001f7c0 	call	1f7c <__fixsfsi>
     eac:	1009883a 	mov	r4,r2
     eb0:	d0a00017 	ldw	r2,-32768(gp)
     eb4:	1006d7fa 	srli	r3,r2,31
     eb8:	1885883a 	add	r2,r3,r2
     ebc:	1005d07a 	srai	r2,r2,1
     ec0:	20a7883a 	add	r19,r4,r2
     ec4:	d0a5df17 	ldw	r2,-26756(gp)
     ec8:	1009883a 	mov	r4,r2
     ecc:	0001f7c0 	call	1f7c <__fixsfsi>
     ed0:	1009883a 	mov	r4,r2
     ed4:	d0a00117 	ldw	r2,-32764(gp)
     ed8:	1006d7fa 	srli	r3,r2,31
     edc:	1885883a 	add	r2,r3,r2
     ee0:	1005d07a 	srai	r2,r2,1
     ee4:	2085c83a 	sub	r2,r4,r2
     ee8:	d8000215 	stw	zero,8(sp)
     eec:	d8000115 	stw	zero,4(sp)
     ef0:	d8800015 	stw	r2,0(sp)
     ef4:	980f883a 	mov	r7,r19
     ef8:	900d883a 	mov	r6,r18
     efc:	880b883a 	mov	r5,r17
     f00:	8009883a 	mov	r4,r16
     f04:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xl0-paddleW/2, (int) yl0+paddleH/2, (int) xl0+paddleW/2, (int) yl1+paddleH/2, COLOR_WHITE, 0);
     f08:	d425dd17 	ldw	r16,-26764(gp)
     f0c:	d0a5da17 	ldw	r2,-26776(gp)
     f10:	1009883a 	mov	r4,r2
     f14:	0001f7c0 	call	1f7c <__fixsfsi>
     f18:	1009883a 	mov	r4,r2
     f1c:	d0a00017 	ldw	r2,-32768(gp)
     f20:	1006d7fa 	srli	r3,r2,31
     f24:	1885883a 	add	r2,r3,r2
     f28:	1005d07a 	srai	r2,r2,1
     f2c:	20a3c83a 	sub	r17,r4,r2
     f30:	d0a5d917 	ldw	r2,-26780(gp)
     f34:	1009883a 	mov	r4,r2
     f38:	0001f7c0 	call	1f7c <__fixsfsi>
     f3c:	1009883a 	mov	r4,r2
     f40:	d0a00117 	ldw	r2,-32764(gp)
     f44:	1006d7fa 	srli	r3,r2,31
     f48:	1885883a 	add	r2,r3,r2
     f4c:	1005d07a 	srai	r2,r2,1
     f50:	20a5883a 	add	r18,r4,r2
     f54:	d0a5da17 	ldw	r2,-26776(gp)
     f58:	1009883a 	mov	r4,r2
     f5c:	0001f7c0 	call	1f7c <__fixsfsi>
     f60:	1009883a 	mov	r4,r2
     f64:	d0a00017 	ldw	r2,-32768(gp)
     f68:	1006d7fa 	srli	r3,r2,31
     f6c:	1885883a 	add	r2,r3,r2
     f70:	1005d07a 	srai	r2,r2,1
     f74:	20a7883a 	add	r19,r4,r2
     f78:	d0a5df17 	ldw	r2,-26756(gp)
     f7c:	1009883a 	mov	r4,r2
     f80:	0001f7c0 	call	1f7c <__fixsfsi>
     f84:	1009883a 	mov	r4,r2
     f88:	d0a00117 	ldw	r2,-32764(gp)
     f8c:	1006d7fa 	srli	r3,r2,31
     f90:	1885883a 	add	r2,r3,r2
     f94:	1005d07a 	srai	r2,r2,1
     f98:	2085883a 	add	r2,r4,r2
     f9c:	d8000215 	stw	zero,8(sp)
     fa0:	00ffffd4 	movui	r3,65535
     fa4:	d8c00115 	stw	r3,4(sp)
     fa8:	d8800015 	stw	r2,0(sp)
     fac:	980f883a 	mov	r7,r19
     fb0:	900d883a 	mov	r6,r18
     fb4:	880b883a 	mov	r5,r17
     fb8:	8009883a 	mov	r4,r16
     fbc:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
     fc0:	00005b06 	br	1130 <drawPaddles+0x314>
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xl0-paddleW/2, (int) yl1+paddleH/2, (int) xl0+paddleW/2, (int) yl0+paddleH/2, COLOR_BLACK, 0);
     fc4:	d425dd17 	ldw	r16,-26764(gp)
     fc8:	d0a5da17 	ldw	r2,-26776(gp)
     fcc:	1009883a 	mov	r4,r2
     fd0:	0001f7c0 	call	1f7c <__fixsfsi>
     fd4:	1009883a 	mov	r4,r2
     fd8:	d0a00017 	ldw	r2,-32768(gp)
     fdc:	1006d7fa 	srli	r3,r2,31
     fe0:	1885883a 	add	r2,r3,r2
     fe4:	1005d07a 	srai	r2,r2,1
     fe8:	20a3c83a 	sub	r17,r4,r2
     fec:	d0a5df17 	ldw	r2,-26756(gp)
     ff0:	1009883a 	mov	r4,r2
     ff4:	0001f7c0 	call	1f7c <__fixsfsi>
     ff8:	1009883a 	mov	r4,r2
     ffc:	d0a00117 	ldw	r2,-32764(gp)
    1000:	1006d7fa 	srli	r3,r2,31
    1004:	1885883a 	add	r2,r3,r2
    1008:	1005d07a 	srai	r2,r2,1
    100c:	20a5883a 	add	r18,r4,r2
    1010:	d0a5da17 	ldw	r2,-26776(gp)
    1014:	1009883a 	mov	r4,r2
    1018:	0001f7c0 	call	1f7c <__fixsfsi>
    101c:	1009883a 	mov	r4,r2
    1020:	d0a00017 	ldw	r2,-32768(gp)
    1024:	1006d7fa 	srli	r3,r2,31
    1028:	1885883a 	add	r2,r3,r2
    102c:	1005d07a 	srai	r2,r2,1
    1030:	20a7883a 	add	r19,r4,r2
    1034:	d0a5d917 	ldw	r2,-26780(gp)
    1038:	1009883a 	mov	r4,r2
    103c:	0001f7c0 	call	1f7c <__fixsfsi>
    1040:	1009883a 	mov	r4,r2
    1044:	d0a00117 	ldw	r2,-32764(gp)
    1048:	1006d7fa 	srli	r3,r2,31
    104c:	1885883a 	add	r2,r3,r2
    1050:	1005d07a 	srai	r2,r2,1
    1054:	2085883a 	add	r2,r4,r2
    1058:	d8000215 	stw	zero,8(sp)
    105c:	d8000115 	stw	zero,4(sp)
    1060:	d8800015 	stw	r2,0(sp)
    1064:	980f883a 	mov	r7,r19
    1068:	900d883a 	mov	r6,r18
    106c:	880b883a 	mov	r5,r17
    1070:	8009883a 	mov	r4,r16
    1074:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xl0-paddleW/2, (int) yl1-paddleH/2, (int) xl0+paddleW/2, (int) yl0-paddleH/2, COLOR_WHITE, 0);
    1078:	d425dd17 	ldw	r16,-26764(gp)
    107c:	d0a5da17 	ldw	r2,-26776(gp)
    1080:	1009883a 	mov	r4,r2
    1084:	0001f7c0 	call	1f7c <__fixsfsi>
    1088:	1009883a 	mov	r4,r2
    108c:	d0a00017 	ldw	r2,-32768(gp)
    1090:	1006d7fa 	srli	r3,r2,31
    1094:	1885883a 	add	r2,r3,r2
    1098:	1005d07a 	srai	r2,r2,1
    109c:	20a3c83a 	sub	r17,r4,r2
    10a0:	d0a5df17 	ldw	r2,-26756(gp)
    10a4:	1009883a 	mov	r4,r2
    10a8:	0001f7c0 	call	1f7c <__fixsfsi>
    10ac:	1009883a 	mov	r4,r2
    10b0:	d0a00117 	ldw	r2,-32764(gp)
    10b4:	1006d7fa 	srli	r3,r2,31
    10b8:	1885883a 	add	r2,r3,r2
    10bc:	1005d07a 	srai	r2,r2,1
    10c0:	20a5c83a 	sub	r18,r4,r2
    10c4:	d0a5da17 	ldw	r2,-26776(gp)
    10c8:	1009883a 	mov	r4,r2
    10cc:	0001f7c0 	call	1f7c <__fixsfsi>
    10d0:	1009883a 	mov	r4,r2
    10d4:	d0a00017 	ldw	r2,-32768(gp)
    10d8:	1006d7fa 	srli	r3,r2,31
    10dc:	1885883a 	add	r2,r3,r2
    10e0:	1005d07a 	srai	r2,r2,1
    10e4:	20a7883a 	add	r19,r4,r2
    10e8:	d0a5d917 	ldw	r2,-26780(gp)
    10ec:	1009883a 	mov	r4,r2
    10f0:	0001f7c0 	call	1f7c <__fixsfsi>
    10f4:	1009883a 	mov	r4,r2
    10f8:	d0a00117 	ldw	r2,-32764(gp)
    10fc:	1006d7fa 	srli	r3,r2,31
    1100:	1885883a 	add	r2,r3,r2
    1104:	1005d07a 	srai	r2,r2,1
    1108:	2085c83a 	sub	r2,r4,r2
    110c:	d8000215 	stw	zero,8(sp)
    1110:	00ffffd4 	movui	r3,65535
    1114:	d8c00115 	stw	r3,4(sp)
    1118:	d8800015 	stw	r2,0(sp)
    111c:	980f883a 	mov	r7,r19
    1120:	900d883a 	mov	r6,r18
    1124:	880b883a 	mov	r5,r17
    1128:	8009883a 	mov	r4,r16
    112c:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
	}
	if (yr1 > yr0)
    1130:	d0a5e317 	ldw	r2,-26740(gp)
    1134:	d0e5e117 	ldw	r3,-26748(gp)
    1138:	180b883a 	mov	r5,r3
    113c:	1009883a 	mov	r4,r2
    1140:	00019140 	call	1914 <__gesf2>
    1144:	00805c0e 	bge	zero,r2,12b8 <drawPaddles+0x49c>
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr0-paddleH/2, (int) xr0+paddleW/2, (int) yr1-paddleH/2, COLOR_BLACK, 0);
    1148:	d425dd17 	ldw	r16,-26764(gp)
    114c:	d0a5d517 	ldw	r2,-26796(gp)
    1150:	1009883a 	mov	r4,r2
    1154:	0001f7c0 	call	1f7c <__fixsfsi>
    1158:	1009883a 	mov	r4,r2
    115c:	d0a00017 	ldw	r2,-32768(gp)
    1160:	1006d7fa 	srli	r3,r2,31
    1164:	1885883a 	add	r2,r3,r2
    1168:	1005d07a 	srai	r2,r2,1
    116c:	20a3c83a 	sub	r17,r4,r2
    1170:	d0a5e117 	ldw	r2,-26748(gp)
    1174:	1009883a 	mov	r4,r2
    1178:	0001f7c0 	call	1f7c <__fixsfsi>
    117c:	1009883a 	mov	r4,r2
    1180:	d0a00117 	ldw	r2,-32764(gp)
    1184:	1006d7fa 	srli	r3,r2,31
    1188:	1885883a 	add	r2,r3,r2
    118c:	1005d07a 	srai	r2,r2,1
    1190:	20a5c83a 	sub	r18,r4,r2
    1194:	d0a5d517 	ldw	r2,-26796(gp)
    1198:	1009883a 	mov	r4,r2
    119c:	0001f7c0 	call	1f7c <__fixsfsi>
    11a0:	1009883a 	mov	r4,r2
    11a4:	d0a00017 	ldw	r2,-32768(gp)
    11a8:	1006d7fa 	srli	r3,r2,31
    11ac:	1885883a 	add	r2,r3,r2
    11b0:	1005d07a 	srai	r2,r2,1
    11b4:	20a7883a 	add	r19,r4,r2
    11b8:	d0a5e317 	ldw	r2,-26740(gp)
    11bc:	1009883a 	mov	r4,r2
    11c0:	0001f7c0 	call	1f7c <__fixsfsi>
    11c4:	1009883a 	mov	r4,r2
    11c8:	d0a00117 	ldw	r2,-32764(gp)
    11cc:	1006d7fa 	srli	r3,r2,31
    11d0:	1885883a 	add	r2,r3,r2
    11d4:	1005d07a 	srai	r2,r2,1
    11d8:	2085c83a 	sub	r2,r4,r2
    11dc:	d8000215 	stw	zero,8(sp)
    11e0:	d8000115 	stw	zero,4(sp)
    11e4:	d8800015 	stw	r2,0(sp)
    11e8:	980f883a 	mov	r7,r19
    11ec:	900d883a 	mov	r6,r18
    11f0:	880b883a 	mov	r5,r17
    11f4:	8009883a 	mov	r4,r16
    11f8:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr0+paddleH/2, (int) xr0+paddleW/2, (int) yr1+paddleH/2, COLOR_WHITE, 0);
    11fc:	d425dd17 	ldw	r16,-26764(gp)
    1200:	d0a5d517 	ldw	r2,-26796(gp)
    1204:	1009883a 	mov	r4,r2
    1208:	0001f7c0 	call	1f7c <__fixsfsi>
    120c:	1009883a 	mov	r4,r2
    1210:	d0a00017 	ldw	r2,-32768(gp)
    1214:	1006d7fa 	srli	r3,r2,31
    1218:	1885883a 	add	r2,r3,r2
    121c:	1005d07a 	srai	r2,r2,1
    1220:	20a3c83a 	sub	r17,r4,r2
    1224:	d0a5e117 	ldw	r2,-26748(gp)
    1228:	1009883a 	mov	r4,r2
    122c:	0001f7c0 	call	1f7c <__fixsfsi>
    1230:	1009883a 	mov	r4,r2
    1234:	d0a00117 	ldw	r2,-32764(gp)
    1238:	1006d7fa 	srli	r3,r2,31
    123c:	1885883a 	add	r2,r3,r2
    1240:	1005d07a 	srai	r2,r2,1
    1244:	20a5883a 	add	r18,r4,r2
    1248:	d0a5d517 	ldw	r2,-26796(gp)
    124c:	1009883a 	mov	r4,r2
    1250:	0001f7c0 	call	1f7c <__fixsfsi>
    1254:	1009883a 	mov	r4,r2
    1258:	d0a00017 	ldw	r2,-32768(gp)
    125c:	1006d7fa 	srli	r3,r2,31
    1260:	1885883a 	add	r2,r3,r2
    1264:	1005d07a 	srai	r2,r2,1
    1268:	20a7883a 	add	r19,r4,r2
    126c:	d0a5e317 	ldw	r2,-26740(gp)
    1270:	1009883a 	mov	r4,r2
    1274:	0001f7c0 	call	1f7c <__fixsfsi>
    1278:	1009883a 	mov	r4,r2
    127c:	d0a00117 	ldw	r2,-32764(gp)
    1280:	1006d7fa 	srli	r3,r2,31
    1284:	1885883a 	add	r2,r3,r2
    1288:	1005d07a 	srai	r2,r2,1
    128c:	2085883a 	add	r2,r4,r2
    1290:	d8000215 	stw	zero,8(sp)
    1294:	00ffffd4 	movui	r3,65535
    1298:	d8c00115 	stw	r3,4(sp)
    129c:	d8800015 	stw	r2,0(sp)
    12a0:	980f883a 	mov	r7,r19
    12a4:	900d883a 	mov	r6,r18
    12a8:	880b883a 	mov	r5,r17
    12ac:	8009883a 	mov	r4,r16
    12b0:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
	else
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr1+paddleH/2, (int) xr0+paddleW/2, (int) yr0+paddleH/2, COLOR_BLACK, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr1-paddleH/2, (int) xr0+paddleW/2, (int) yr0-paddleH/2, COLOR_WHITE, 0);
	}
}
    12b4:	00005b06 	br	1424 <drawPaddles+0x608>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr0-paddleH/2, (int) xr0+paddleW/2, (int) yr1-paddleH/2, COLOR_BLACK, 0);
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr0+paddleH/2, (int) xr0+paddleW/2, (int) yr1+paddleH/2, COLOR_WHITE, 0);
	}
	else
	{
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr1+paddleH/2, (int) xr0+paddleW/2, (int) yr0+paddleH/2, COLOR_BLACK, 0);
    12b8:	d425dd17 	ldw	r16,-26764(gp)
    12bc:	d0a5d517 	ldw	r2,-26796(gp)
    12c0:	1009883a 	mov	r4,r2
    12c4:	0001f7c0 	call	1f7c <__fixsfsi>
    12c8:	1009883a 	mov	r4,r2
    12cc:	d0a00017 	ldw	r2,-32768(gp)
    12d0:	1006d7fa 	srli	r3,r2,31
    12d4:	1885883a 	add	r2,r3,r2
    12d8:	1005d07a 	srai	r2,r2,1
    12dc:	20a3c83a 	sub	r17,r4,r2
    12e0:	d0a5e317 	ldw	r2,-26740(gp)
    12e4:	1009883a 	mov	r4,r2
    12e8:	0001f7c0 	call	1f7c <__fixsfsi>
    12ec:	1009883a 	mov	r4,r2
    12f0:	d0a00117 	ldw	r2,-32764(gp)
    12f4:	1006d7fa 	srli	r3,r2,31
    12f8:	1885883a 	add	r2,r3,r2
    12fc:	1005d07a 	srai	r2,r2,1
    1300:	20a5883a 	add	r18,r4,r2
    1304:	d0a5d517 	ldw	r2,-26796(gp)
    1308:	1009883a 	mov	r4,r2
    130c:	0001f7c0 	call	1f7c <__fixsfsi>
    1310:	1009883a 	mov	r4,r2
    1314:	d0a00017 	ldw	r2,-32768(gp)
    1318:	1006d7fa 	srli	r3,r2,31
    131c:	1885883a 	add	r2,r3,r2
    1320:	1005d07a 	srai	r2,r2,1
    1324:	20a7883a 	add	r19,r4,r2
    1328:	d0a5e117 	ldw	r2,-26748(gp)
    132c:	1009883a 	mov	r4,r2
    1330:	0001f7c0 	call	1f7c <__fixsfsi>
    1334:	1009883a 	mov	r4,r2
    1338:	d0a00117 	ldw	r2,-32764(gp)
    133c:	1006d7fa 	srli	r3,r2,31
    1340:	1885883a 	add	r2,r3,r2
    1344:	1005d07a 	srai	r2,r2,1
    1348:	2085883a 	add	r2,r4,r2
    134c:	d8000215 	stw	zero,8(sp)
    1350:	d8000115 	stw	zero,4(sp)
    1354:	d8800015 	stw	r2,0(sp)
    1358:	980f883a 	mov	r7,r19
    135c:	900d883a 	mov	r6,r18
    1360:	880b883a 	mov	r5,r17
    1364:	8009883a 	mov	r4,r16
    1368:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
		alt_up_pixel_buffer_dma_draw_box(pixel_buffer, (int) xr0-paddleW/2, (int) yr1-paddleH/2, (int) xr0+paddleW/2, (int) yr0-paddleH/2, COLOR_WHITE, 0);
    136c:	d425dd17 	ldw	r16,-26764(gp)
    1370:	d0a5d517 	ldw	r2,-26796(gp)
    1374:	1009883a 	mov	r4,r2
    1378:	0001f7c0 	call	1f7c <__fixsfsi>
    137c:	1009883a 	mov	r4,r2
    1380:	d0a00017 	ldw	r2,-32768(gp)
    1384:	1006d7fa 	srli	r3,r2,31
    1388:	1885883a 	add	r2,r3,r2
    138c:	1005d07a 	srai	r2,r2,1
    1390:	20a3c83a 	sub	r17,r4,r2
    1394:	d0a5e317 	ldw	r2,-26740(gp)
    1398:	1009883a 	mov	r4,r2
    139c:	0001f7c0 	call	1f7c <__fixsfsi>
    13a0:	1009883a 	mov	r4,r2
    13a4:	d0a00117 	ldw	r2,-32764(gp)
    13a8:	1006d7fa 	srli	r3,r2,31
    13ac:	1885883a 	add	r2,r3,r2
    13b0:	1005d07a 	srai	r2,r2,1
    13b4:	20a5c83a 	sub	r18,r4,r2
    13b8:	d0a5d517 	ldw	r2,-26796(gp)
    13bc:	1009883a 	mov	r4,r2
    13c0:	0001f7c0 	call	1f7c <__fixsfsi>
    13c4:	1009883a 	mov	r4,r2
    13c8:	d0a00017 	ldw	r2,-32768(gp)
    13cc:	1006d7fa 	srli	r3,r2,31
    13d0:	1885883a 	add	r2,r3,r2
    13d4:	1005d07a 	srai	r2,r2,1
    13d8:	20a7883a 	add	r19,r4,r2
    13dc:	d0a5e117 	ldw	r2,-26748(gp)
    13e0:	1009883a 	mov	r4,r2
    13e4:	0001f7c0 	call	1f7c <__fixsfsi>
    13e8:	1009883a 	mov	r4,r2
    13ec:	d0a00117 	ldw	r2,-32764(gp)
    13f0:	1006d7fa 	srli	r3,r2,31
    13f4:	1885883a 	add	r2,r3,r2
    13f8:	1005d07a 	srai	r2,r2,1
    13fc:	2085c83a 	sub	r2,r4,r2
    1400:	d8000215 	stw	zero,8(sp)
    1404:	00ffffd4 	movui	r3,65535
    1408:	d8c00115 	stw	r3,4(sp)
    140c:	d8800015 	stw	r2,0(sp)
    1410:	980f883a 	mov	r7,r19
    1414:	900d883a 	mov	r6,r18
    1418:	880b883a 	mov	r5,r17
    141c:	8009883a 	mov	r4,r16
    1420:	00038480 	call	3848 <alt_up_pixel_buffer_dma_draw_box>
	}
}
    1424:	0001883a 	nop
    1428:	e6fffc04 	addi	sp,fp,-16
    142c:	dfc00517 	ldw	ra,20(sp)
    1430:	df000417 	ldw	fp,16(sp)
    1434:	dcc00317 	ldw	r19,12(sp)
    1438:	dc800217 	ldw	r18,8(sp)
    143c:	dc400117 	ldw	r17,4(sp)
    1440:	dc000017 	ldw	r16,0(sp)
    1444:	dec00604 	addi	sp,sp,24
    1448:	f800283a 	ret

0000144c <__addsf3>:
    144c:	defffc04 	addi	sp,sp,-16
    1450:	2004d7fa 	srli	r2,r4,31
    1454:	280cd5fa 	srli	r6,r5,23
    1458:	dc000015 	stw	r16,0(sp)
    145c:	00c02034 	movhi	r3,128
    1460:	2020d5fa 	srli	r16,r4,23
    1464:	280ed7fa 	srli	r7,r5,31
    1468:	18ffffc4 	addi	r3,r3,-1
    146c:	dc400115 	stw	r17,4(sp)
    1470:	1908703a 	and	r4,r3,r4
    1474:	194a703a 	and	r5,r3,r5
    1478:	dfc00315 	stw	ra,12(sp)
    147c:	dc800215 	stw	r18,8(sp)
    1480:	14403fcc 	andi	r17,r2,255
    1484:	84003fcc 	andi	r16,r16,255
    1488:	200890fa 	slli	r4,r4,3
    148c:	31803fcc 	andi	r6,r6,255
    1490:	280a90fa 	slli	r5,r5,3
    1494:	89c05026 	beq	r17,r7,15d8 <__addsf3+0x18c>
    1498:	8185c83a 	sub	r2,r16,r6
    149c:	00807a0e 	bge	zero,r2,1688 <__addsf3+0x23c>
    14a0:	30001e1e 	bne	r6,zero,151c <__addsf3+0xd0>
    14a4:	28006d1e 	bne	r5,zero,165c <__addsf3+0x210>
    14a8:	208001cc 	andi	r2,r4,7
    14ac:	10000426 	beq	r2,zero,14c0 <__addsf3+0x74>
    14b0:	208003cc 	andi	r2,r4,15
    14b4:	00c00104 	movi	r3,4
    14b8:	10c00126 	beq	r2,r3,14c0 <__addsf3+0x74>
    14bc:	20c9883a 	add	r4,r4,r3
    14c0:	2081002c 	andhi	r2,r4,1024
    14c4:	10003926 	beq	r2,zero,15ac <__addsf3+0x160>
    14c8:	84000044 	addi	r16,r16,1
    14cc:	00803fc4 	movi	r2,255
    14d0:	80807826 	beq	r16,r2,16b4 <__addsf3+0x268>
    14d4:	200891ba 	slli	r4,r4,6
    14d8:	8805883a 	mov	r2,r17
    14dc:	2008d27a 	srli	r4,r4,9
    14e0:	84003fcc 	andi	r16,r16,255
    14e4:	800695fa 	slli	r3,r16,23
    14e8:	10803fcc 	andi	r2,r2,255
    14ec:	04002034 	movhi	r16,128
    14f0:	843fffc4 	addi	r16,r16,-1
    14f4:	100497fa 	slli	r2,r2,31
    14f8:	2408703a 	and	r4,r4,r16
    14fc:	20e0b03a 	or	r16,r4,r3
    1500:	8084b03a 	or	r2,r16,r2
    1504:	dfc00317 	ldw	ra,12(sp)
    1508:	dc800217 	ldw	r18,8(sp)
    150c:	dc400117 	ldw	r17,4(sp)
    1510:	dc000017 	ldw	r16,0(sp)
    1514:	dec00404 	addi	sp,sp,16
    1518:	f800283a 	ret
    151c:	00c03fc4 	movi	r3,255
    1520:	80ffe126 	beq	r16,r3,14a8 <__alt_data_end+0xf80014a8>
    1524:	29410034 	orhi	r5,r5,1024
    1528:	00c006c4 	movi	r3,27
    152c:	18807516 	blt	r3,r2,1704 <__addsf3+0x2b8>
    1530:	00c00804 	movi	r3,32
    1534:	1887c83a 	sub	r3,r3,r2
    1538:	28c6983a 	sll	r3,r5,r3
    153c:	288ad83a 	srl	r5,r5,r2
    1540:	1804c03a 	cmpne	r2,r3,zero
    1544:	288ab03a 	or	r5,r5,r2
    1548:	2149c83a 	sub	r4,r4,r5
    154c:	2081002c 	andhi	r2,r4,1024
    1550:	10001426 	beq	r2,zero,15a4 <__addsf3+0x158>
    1554:	04810034 	movhi	r18,1024
    1558:	94bfffc4 	addi	r18,r18,-1
    155c:	24a4703a 	and	r18,r4,r18
    1560:	9009883a 	mov	r4,r18
    1564:	00021100 	call	2110 <__clzsi2>
    1568:	10bffec4 	addi	r2,r2,-5
    156c:	90a4983a 	sll	r18,r18,r2
    1570:	14005416 	blt	r2,r16,16c4 <__addsf3+0x278>
    1574:	1405c83a 	sub	r2,r2,r16
    1578:	11000044 	addi	r4,r2,1
    157c:	00800804 	movi	r2,32
    1580:	1105c83a 	sub	r2,r2,r4
    1584:	9084983a 	sll	r2,r18,r2
    1588:	9124d83a 	srl	r18,r18,r4
    158c:	0021883a 	mov	r16,zero
    1590:	1008c03a 	cmpne	r4,r2,zero
    1594:	9108b03a 	or	r4,r18,r4
    1598:	003fc306 	br	14a8 <__alt_data_end+0xf80014a8>
    159c:	1000db26 	beq	r2,zero,190c <__addsf3+0x4c0>
    15a0:	1009883a 	mov	r4,r2
    15a4:	208001cc 	andi	r2,r4,7
    15a8:	103fc11e 	bne	r2,zero,14b0 <__alt_data_end+0xf80014b0>
    15ac:	2006d0fa 	srli	r3,r4,3
    15b0:	01003fc4 	movi	r4,255
    15b4:	8805883a 	mov	r2,r17
    15b8:	8100241e 	bne	r16,r4,164c <__addsf3+0x200>
    15bc:	18006e26 	beq	r3,zero,1778 <__addsf3+0x32c>
    15c0:	19001034 	orhi	r4,r3,64
    15c4:	00c02034 	movhi	r3,128
    15c8:	18ffffc4 	addi	r3,r3,-1
    15cc:	043fffc4 	movi	r16,-1
    15d0:	20c8703a 	and	r4,r4,r3
    15d4:	003fc206 	br	14e0 <__alt_data_end+0xf80014e0>
    15d8:	8187c83a 	sub	r3,r16,r6
    15dc:	00c03e0e 	bge	zero,r3,16d8 <__addsf3+0x28c>
    15e0:	30002326 	beq	r6,zero,1670 <__addsf3+0x224>
    15e4:	01803fc4 	movi	r6,255
    15e8:	81bfaf26 	beq	r16,r6,14a8 <__alt_data_end+0xf80014a8>
    15ec:	29410034 	orhi	r5,r5,1024
    15f0:	018006c4 	movi	r6,27
    15f4:	30c07416 	blt	r6,r3,17c8 <__addsf3+0x37c>
    15f8:	01800804 	movi	r6,32
    15fc:	30cdc83a 	sub	r6,r6,r3
    1600:	298c983a 	sll	r6,r5,r6
    1604:	28cad83a 	srl	r5,r5,r3
    1608:	3006c03a 	cmpne	r3,r6,zero
    160c:	28cab03a 	or	r5,r5,r3
    1610:	2149883a 	add	r4,r4,r5
    1614:	20c1002c 	andhi	r3,r4,1024
    1618:	183fe226 	beq	r3,zero,15a4 <__alt_data_end+0xf80015a4>
    161c:	84000044 	addi	r16,r16,1
    1620:	00c03fc4 	movi	r3,255
    1624:	80c05426 	beq	r16,r3,1778 <__addsf3+0x32c>
    1628:	00bf0034 	movhi	r2,64512
    162c:	10bfffc4 	addi	r2,r2,-1
    1630:	20c0004c 	andi	r3,r4,1
    1634:	2088703a 	and	r4,r4,r2
    1638:	2008d07a 	srli	r4,r4,1
    163c:	20c8b03a 	or	r4,r4,r3
    1640:	003f9906 	br	14a8 <__alt_data_end+0xf80014a8>
    1644:	0007883a 	mov	r3,zero
    1648:	0005883a 	mov	r2,zero
    164c:	01002034 	movhi	r4,128
    1650:	213fffc4 	addi	r4,r4,-1
    1654:	1908703a 	and	r4,r3,r4
    1658:	003fa106 	br	14e0 <__alt_data_end+0xf80014e0>
    165c:	10bfffc4 	addi	r2,r2,-1
    1660:	103fb926 	beq	r2,zero,1548 <__alt_data_end+0xf8001548>
    1664:	00c03fc4 	movi	r3,255
    1668:	80ffaf1e 	bne	r16,r3,1528 <__alt_data_end+0xf8001528>
    166c:	003f8e06 	br	14a8 <__alt_data_end+0xf80014a8>
    1670:	283f8d26 	beq	r5,zero,14a8 <__alt_data_end+0xf80014a8>
    1674:	18ffffc4 	addi	r3,r3,-1
    1678:	183fe526 	beq	r3,zero,1610 <__alt_data_end+0xf8001610>
    167c:	01803fc4 	movi	r6,255
    1680:	81bfdb1e 	bne	r16,r6,15f0 <__alt_data_end+0xf80015f0>
    1684:	003f8806 	br	14a8 <__alt_data_end+0xf80014a8>
    1688:	1000201e 	bne	r2,zero,170c <__addsf3+0x2c0>
    168c:	80800044 	addi	r2,r16,1
    1690:	10803fcc 	andi	r2,r2,255
    1694:	01800044 	movi	r6,1
    1698:	3080450e 	bge	r6,r2,17b0 <__addsf3+0x364>
    169c:	2165c83a 	sub	r18,r4,r5
    16a0:	90c1002c 	andhi	r3,r18,1024
    16a4:	18002b26 	beq	r3,zero,1754 <__addsf3+0x308>
    16a8:	2925c83a 	sub	r18,r5,r4
    16ac:	3823883a 	mov	r17,r7
    16b0:	003fab06 	br	1560 <__alt_data_end+0xf8001560>
    16b4:	8805883a 	mov	r2,r17
    16b8:	043fffc4 	movi	r16,-1
    16bc:	0009883a 	mov	r4,zero
    16c0:	003f8706 	br	14e0 <__alt_data_end+0xf80014e0>
    16c4:	013f0034 	movhi	r4,64512
    16c8:	213fffc4 	addi	r4,r4,-1
    16cc:	80a1c83a 	sub	r16,r16,r2
    16d0:	9108703a 	and	r4,r18,r4
    16d4:	003f7406 	br	14a8 <__alt_data_end+0xf80014a8>
    16d8:	1800411e 	bne	r3,zero,17e0 <__addsf3+0x394>
    16dc:	80c00044 	addi	r3,r16,1
    16e0:	19c03fcc 	andi	r7,r3,255
    16e4:	01800044 	movi	r6,1
    16e8:	31c0260e 	bge	r6,r7,1784 <__addsf3+0x338>
    16ec:	01803fc4 	movi	r6,255
    16f0:	19802126 	beq	r3,r6,1778 <__addsf3+0x32c>
    16f4:	2149883a 	add	r4,r4,r5
    16f8:	2008d07a 	srli	r4,r4,1
    16fc:	1821883a 	mov	r16,r3
    1700:	003f6906 	br	14a8 <__alt_data_end+0xf80014a8>
    1704:	01400044 	movi	r5,1
    1708:	003f8f06 	br	1548 <__alt_data_end+0xf8001548>
    170c:	8000151e 	bne	r16,zero,1764 <__addsf3+0x318>
    1710:	20002f26 	beq	r4,zero,17d0 <__addsf3+0x384>
    1714:	0084303a 	nor	r2,zero,r2
    1718:	10000a26 	beq	r2,zero,1744 <__addsf3+0x2f8>
    171c:	00c03fc4 	movi	r3,255
    1720:	30c02b26 	beq	r6,r3,17d0 <__addsf3+0x384>
    1724:	00c006c4 	movi	r3,27
    1728:	18806d16 	blt	r3,r2,18e0 <__addsf3+0x494>
    172c:	00c00804 	movi	r3,32
    1730:	1887c83a 	sub	r3,r3,r2
    1734:	20c6983a 	sll	r3,r4,r3
    1738:	2084d83a 	srl	r2,r4,r2
    173c:	1808c03a 	cmpne	r4,r3,zero
    1740:	1108b03a 	or	r4,r2,r4
    1744:	2909c83a 	sub	r4,r5,r4
    1748:	3021883a 	mov	r16,r6
    174c:	3823883a 	mov	r17,r7
    1750:	003f7e06 	br	154c <__alt_data_end+0xf800154c>
    1754:	903f821e 	bne	r18,zero,1560 <__alt_data_end+0xf8001560>
    1758:	0005883a 	mov	r2,zero
    175c:	0021883a 	mov	r16,zero
    1760:	003fba06 	br	164c <__alt_data_end+0xf800164c>
    1764:	00c03fc4 	movi	r3,255
    1768:	30c01926 	beq	r6,r3,17d0 <__addsf3+0x384>
    176c:	0085c83a 	sub	r2,zero,r2
    1770:	21010034 	orhi	r4,r4,1024
    1774:	003feb06 	br	1724 <__alt_data_end+0xf8001724>
    1778:	043fffc4 	movi	r16,-1
    177c:	0009883a 	mov	r4,zero
    1780:	003f5706 	br	14e0 <__alt_data_end+0xf80014e0>
    1784:	80004a1e 	bne	r16,zero,18b0 <__addsf3+0x464>
    1788:	20005926 	beq	r4,zero,18f0 <__addsf3+0x4a4>
    178c:	283f4626 	beq	r5,zero,14a8 <__alt_data_end+0xf80014a8>
    1790:	2149883a 	add	r4,r4,r5
    1794:	2081002c 	andhi	r2,r4,1024
    1798:	103f8226 	beq	r2,zero,15a4 <__alt_data_end+0xf80015a4>
    179c:	00bf0034 	movhi	r2,64512
    17a0:	10bfffc4 	addi	r2,r2,-1
    17a4:	3021883a 	mov	r16,r6
    17a8:	2088703a 	and	r4,r4,r2
    17ac:	003f3e06 	br	14a8 <__alt_data_end+0xf80014a8>
    17b0:	8000121e 	bne	r16,zero,17fc <__addsf3+0x3b0>
    17b4:	2000261e 	bne	r4,zero,1850 <__addsf3+0x404>
    17b8:	283fa226 	beq	r5,zero,1644 <__alt_data_end+0xf8001644>
    17bc:	2809883a 	mov	r4,r5
    17c0:	3823883a 	mov	r17,r7
    17c4:	003f3806 	br	14a8 <__alt_data_end+0xf80014a8>
    17c8:	01400044 	movi	r5,1
    17cc:	003f9006 	br	1610 <__alt_data_end+0xf8001610>
    17d0:	2809883a 	mov	r4,r5
    17d4:	3021883a 	mov	r16,r6
    17d8:	3823883a 	mov	r17,r7
    17dc:	003f3206 	br	14a8 <__alt_data_end+0xf80014a8>
    17e0:	80000c1e 	bne	r16,zero,1814 <__addsf3+0x3c8>
    17e4:	20002f26 	beq	r4,zero,18a4 <__addsf3+0x458>
    17e8:	00c6303a 	nor	r3,zero,r3
    17ec:	18002b1e 	bne	r3,zero,189c <__addsf3+0x450>
    17f0:	2149883a 	add	r4,r4,r5
    17f4:	3021883a 	mov	r16,r6
    17f8:	003f8606 	br	1614 <__alt_data_end+0xf8001614>
    17fc:	20001b1e 	bne	r4,zero,186c <__addsf3+0x420>
    1800:	28003926 	beq	r5,zero,18e8 <__addsf3+0x49c>
    1804:	2809883a 	mov	r4,r5
    1808:	3823883a 	mov	r17,r7
    180c:	04003fc4 	movi	r16,255
    1810:	003f2506 	br	14a8 <__alt_data_end+0xf80014a8>
    1814:	01c03fc4 	movi	r7,255
    1818:	31c02226 	beq	r6,r7,18a4 <__addsf3+0x458>
    181c:	00c7c83a 	sub	r3,zero,r3
    1820:	21010034 	orhi	r4,r4,1024
    1824:	01c006c4 	movi	r7,27
    1828:	38c03616 	blt	r7,r3,1904 <__addsf3+0x4b8>
    182c:	01c00804 	movi	r7,32
    1830:	38cfc83a 	sub	r7,r7,r3
    1834:	21ce983a 	sll	r7,r4,r7
    1838:	20c6d83a 	srl	r3,r4,r3
    183c:	3808c03a 	cmpne	r4,r7,zero
    1840:	1906b03a 	or	r3,r3,r4
    1844:	1949883a 	add	r4,r3,r5
    1848:	3021883a 	mov	r16,r6
    184c:	003f7106 	br	1614 <__alt_data_end+0xf8001614>
    1850:	283f1526 	beq	r5,zero,14a8 <__alt_data_end+0xf80014a8>
    1854:	2145c83a 	sub	r2,r4,r5
    1858:	10c1002c 	andhi	r3,r2,1024
    185c:	183f4f26 	beq	r3,zero,159c <__alt_data_end+0xf800159c>
    1860:	2909c83a 	sub	r4,r5,r4
    1864:	3823883a 	mov	r17,r7
    1868:	003f0f06 	br	14a8 <__alt_data_end+0xf80014a8>
    186c:	28001a26 	beq	r5,zero,18d8 <__addsf3+0x48c>
    1870:	2008d0fa 	srli	r4,r4,3
    1874:	2080102c 	andhi	r2,r4,64
    1878:	10000526 	beq	r2,zero,1890 <__addsf3+0x444>
    187c:	280ad0fa 	srli	r5,r5,3
    1880:	2880102c 	andhi	r2,r5,64
    1884:	1000021e 	bne	r2,zero,1890 <__addsf3+0x444>
    1888:	2809883a 	mov	r4,r5
    188c:	3823883a 	mov	r17,r7
    1890:	200890fa 	slli	r4,r4,3
    1894:	04003fc4 	movi	r16,255
    1898:	003f0306 	br	14a8 <__alt_data_end+0xf80014a8>
    189c:	01c03fc4 	movi	r7,255
    18a0:	31ffe01e 	bne	r6,r7,1824 <__alt_data_end+0xf8001824>
    18a4:	2809883a 	mov	r4,r5
    18a8:	3021883a 	mov	r16,r6
    18ac:	003efe06 	br	14a8 <__alt_data_end+0xf80014a8>
    18b0:	20001126 	beq	r4,zero,18f8 <__addsf3+0x4ac>
    18b4:	28000826 	beq	r5,zero,18d8 <__addsf3+0x48c>
    18b8:	2008d0fa 	srli	r4,r4,3
    18bc:	2080102c 	andhi	r2,r4,64
    18c0:	103ff326 	beq	r2,zero,1890 <__alt_data_end+0xf8001890>
    18c4:	280ad0fa 	srli	r5,r5,3
    18c8:	2880102c 	andhi	r2,r5,64
    18cc:	103ff01e 	bne	r2,zero,1890 <__alt_data_end+0xf8001890>
    18d0:	2809883a 	mov	r4,r5
    18d4:	003fee06 	br	1890 <__alt_data_end+0xf8001890>
    18d8:	04003fc4 	movi	r16,255
    18dc:	003ef206 	br	14a8 <__alt_data_end+0xf80014a8>
    18e0:	01000044 	movi	r4,1
    18e4:	003f9706 	br	1744 <__alt_data_end+0xf8001744>
    18e8:	0005883a 	mov	r2,zero
    18ec:	003f3406 	br	15c0 <__alt_data_end+0xf80015c0>
    18f0:	2809883a 	mov	r4,r5
    18f4:	003eec06 	br	14a8 <__alt_data_end+0xf80014a8>
    18f8:	2809883a 	mov	r4,r5
    18fc:	04003fc4 	movi	r16,255
    1900:	003ee906 	br	14a8 <__alt_data_end+0xf80014a8>
    1904:	00c00044 	movi	r3,1
    1908:	003fce06 	br	1844 <__alt_data_end+0xf8001844>
    190c:	0005883a 	mov	r2,zero
    1910:	003f4e06 	br	164c <__alt_data_end+0xf800164c>

00001914 <__gesf2>:
    1914:	2004d5fa 	srli	r2,r4,23
    1918:	2806d5fa 	srli	r3,r5,23
    191c:	01802034 	movhi	r6,128
    1920:	31bfffc4 	addi	r6,r6,-1
    1924:	10803fcc 	andi	r2,r2,255
    1928:	01c03fc4 	movi	r7,255
    192c:	3110703a 	and	r8,r6,r4
    1930:	18c03fcc 	andi	r3,r3,255
    1934:	314c703a 	and	r6,r6,r5
    1938:	2008d7fa 	srli	r4,r4,31
    193c:	280ad7fa 	srli	r5,r5,31
    1940:	11c01926 	beq	r2,r7,19a8 <__gesf2+0x94>
    1944:	01c03fc4 	movi	r7,255
    1948:	19c00f26 	beq	r3,r7,1988 <__gesf2+0x74>
    194c:	1000061e 	bne	r2,zero,1968 <__gesf2+0x54>
    1950:	400f003a 	cmpeq	r7,r8,zero
    1954:	1800071e 	bne	r3,zero,1974 <__gesf2+0x60>
    1958:	3000061e 	bne	r6,zero,1974 <__gesf2+0x60>
    195c:	0005883a 	mov	r2,zero
    1960:	40000e1e 	bne	r8,zero,199c <__gesf2+0x88>
    1964:	f800283a 	ret
    1968:	18000a1e 	bne	r3,zero,1994 <__gesf2+0x80>
    196c:	30000b26 	beq	r6,zero,199c <__gesf2+0x88>
    1970:	000f883a 	mov	r7,zero
    1974:	29403fcc 	andi	r5,r5,255
    1978:	38000726 	beq	r7,zero,1998 <__gesf2+0x84>
    197c:	28000826 	beq	r5,zero,19a0 <__gesf2+0x8c>
    1980:	00800044 	movi	r2,1
    1984:	f800283a 	ret
    1988:	303ff026 	beq	r6,zero,194c <__alt_data_end+0xf800194c>
    198c:	00bfff84 	movi	r2,-2
    1990:	f800283a 	ret
    1994:	29403fcc 	andi	r5,r5,255
    1998:	21400526 	beq	r4,r5,19b0 <__gesf2+0x9c>
    199c:	203ff826 	beq	r4,zero,1980 <__alt_data_end+0xf8001980>
    19a0:	00bfffc4 	movi	r2,-1
    19a4:	f800283a 	ret
    19a8:	403fe626 	beq	r8,zero,1944 <__alt_data_end+0xf8001944>
    19ac:	003ff706 	br	198c <__alt_data_end+0xf800198c>
    19b0:	18bffa16 	blt	r3,r2,199c <__alt_data_end+0xf800199c>
    19b4:	10c00216 	blt	r2,r3,19c0 <__gesf2+0xac>
    19b8:	323ff836 	bltu	r6,r8,199c <__alt_data_end+0xf800199c>
    19bc:	4180022e 	bgeu	r8,r6,19c8 <__gesf2+0xb4>
    19c0:	203fef1e 	bne	r4,zero,1980 <__alt_data_end+0xf8001980>
    19c4:	003ff606 	br	19a0 <__alt_data_end+0xf80019a0>
    19c8:	0005883a 	mov	r2,zero
    19cc:	f800283a 	ret

000019d0 <__lesf2>:
    19d0:	2004d5fa 	srli	r2,r4,23
    19d4:	280cd5fa 	srli	r6,r5,23
    19d8:	00c02034 	movhi	r3,128
    19dc:	18ffffc4 	addi	r3,r3,-1
    19e0:	10803fcc 	andi	r2,r2,255
    19e4:	01c03fc4 	movi	r7,255
    19e8:	1910703a 	and	r8,r3,r4
    19ec:	31803fcc 	andi	r6,r6,255
    19f0:	1946703a 	and	r3,r3,r5
    19f4:	2008d7fa 	srli	r4,r4,31
    19f8:	280ad7fa 	srli	r5,r5,31
    19fc:	11c01b26 	beq	r2,r7,1a6c <__lesf2+0x9c>
    1a00:	01c03fc4 	movi	r7,255
    1a04:	31c01126 	beq	r6,r7,1a4c <__lesf2+0x7c>
    1a08:	1000071e 	bne	r2,zero,1a28 <__lesf2+0x58>
    1a0c:	400f003a 	cmpeq	r7,r8,zero
    1a10:	21003fcc 	andi	r4,r4,255
    1a14:	3000081e 	bne	r6,zero,1a38 <__lesf2+0x68>
    1a18:	1800071e 	bne	r3,zero,1a38 <__lesf2+0x68>
    1a1c:	0005883a 	mov	r2,zero
    1a20:	40000f1e 	bne	r8,zero,1a60 <__lesf2+0x90>
    1a24:	f800283a 	ret
    1a28:	21003fcc 	andi	r4,r4,255
    1a2c:	30000a1e 	bne	r6,zero,1a58 <__lesf2+0x88>
    1a30:	18000b26 	beq	r3,zero,1a60 <__lesf2+0x90>
    1a34:	000f883a 	mov	r7,zero
    1a38:	29403fcc 	andi	r5,r5,255
    1a3c:	38000726 	beq	r7,zero,1a5c <__lesf2+0x8c>
    1a40:	28000826 	beq	r5,zero,1a64 <__lesf2+0x94>
    1a44:	00800044 	movi	r2,1
    1a48:	f800283a 	ret
    1a4c:	183fee26 	beq	r3,zero,1a08 <__alt_data_end+0xf8001a08>
    1a50:	00800084 	movi	r2,2
    1a54:	f800283a 	ret
    1a58:	29403fcc 	andi	r5,r5,255
    1a5c:	21400626 	beq	r4,r5,1a78 <__lesf2+0xa8>
    1a60:	203ff826 	beq	r4,zero,1a44 <__alt_data_end+0xf8001a44>
    1a64:	00bfffc4 	movi	r2,-1
    1a68:	f800283a 	ret
    1a6c:	403fe426 	beq	r8,zero,1a00 <__alt_data_end+0xf8001a00>
    1a70:	00800084 	movi	r2,2
    1a74:	f800283a 	ret
    1a78:	30bff916 	blt	r6,r2,1a60 <__alt_data_end+0xf8001a60>
    1a7c:	11800216 	blt	r2,r6,1a88 <__lesf2+0xb8>
    1a80:	1a3ff736 	bltu	r3,r8,1a60 <__alt_data_end+0xf8001a60>
    1a84:	40c0022e 	bgeu	r8,r3,1a90 <__lesf2+0xc0>
    1a88:	203fee1e 	bne	r4,zero,1a44 <__alt_data_end+0xf8001a44>
    1a8c:	003ff506 	br	1a64 <__alt_data_end+0xf8001a64>
    1a90:	0005883a 	mov	r2,zero
    1a94:	f800283a 	ret

00001a98 <__subsf3>:
    1a98:	defffc04 	addi	sp,sp,-16
    1a9c:	280cd5fa 	srli	r6,r5,23
    1aa0:	dc000015 	stw	r16,0(sp)
    1aa4:	01c02034 	movhi	r7,128
    1aa8:	2020d5fa 	srli	r16,r4,23
    1aac:	39ffffc4 	addi	r7,r7,-1
    1ab0:	3906703a 	and	r3,r7,r4
    1ab4:	dc400115 	stw	r17,4(sp)
    1ab8:	394e703a 	and	r7,r7,r5
    1abc:	2022d7fa 	srli	r17,r4,31
    1ac0:	dfc00315 	stw	ra,12(sp)
    1ac4:	dc800215 	stw	r18,8(sp)
    1ac8:	31803fcc 	andi	r6,r6,255
    1acc:	01003fc4 	movi	r4,255
    1ad0:	84003fcc 	andi	r16,r16,255
    1ad4:	180690fa 	slli	r3,r3,3
    1ad8:	2804d7fa 	srli	r2,r5,31
    1adc:	380e90fa 	slli	r7,r7,3
    1ae0:	31006d26 	beq	r6,r4,1c98 <__subsf3+0x200>
    1ae4:	1080005c 	xori	r2,r2,1
    1ae8:	8189c83a 	sub	r4,r16,r6
    1aec:	14404f26 	beq	r2,r17,1c2c <__subsf3+0x194>
    1af0:	0100770e 	bge	zero,r4,1cd0 <__subsf3+0x238>
    1af4:	30001e1e 	bne	r6,zero,1b70 <__subsf3+0xd8>
    1af8:	38006a1e 	bne	r7,zero,1ca4 <__subsf3+0x20c>
    1afc:	188001cc 	andi	r2,r3,7
    1b00:	10000426 	beq	r2,zero,1b14 <__subsf3+0x7c>
    1b04:	188003cc 	andi	r2,r3,15
    1b08:	01000104 	movi	r4,4
    1b0c:	11000126 	beq	r2,r4,1b14 <__subsf3+0x7c>
    1b10:	1907883a 	add	r3,r3,r4
    1b14:	1881002c 	andhi	r2,r3,1024
    1b18:	10003926 	beq	r2,zero,1c00 <__subsf3+0x168>
    1b1c:	84000044 	addi	r16,r16,1
    1b20:	00803fc4 	movi	r2,255
    1b24:	80807526 	beq	r16,r2,1cfc <__subsf3+0x264>
    1b28:	180691ba 	slli	r3,r3,6
    1b2c:	8880004c 	andi	r2,r17,1
    1b30:	180ad27a 	srli	r5,r3,9
    1b34:	84003fcc 	andi	r16,r16,255
    1b38:	800695fa 	slli	r3,r16,23
    1b3c:	10803fcc 	andi	r2,r2,255
    1b40:	01002034 	movhi	r4,128
    1b44:	213fffc4 	addi	r4,r4,-1
    1b48:	100497fa 	slli	r2,r2,31
    1b4c:	2920703a 	and	r16,r5,r4
    1b50:	80e0b03a 	or	r16,r16,r3
    1b54:	8084b03a 	or	r2,r16,r2
    1b58:	dfc00317 	ldw	ra,12(sp)
    1b5c:	dc800217 	ldw	r18,8(sp)
    1b60:	dc400117 	ldw	r17,4(sp)
    1b64:	dc000017 	ldw	r16,0(sp)
    1b68:	dec00404 	addi	sp,sp,16
    1b6c:	f800283a 	ret
    1b70:	00803fc4 	movi	r2,255
    1b74:	80bfe126 	beq	r16,r2,1afc <__alt_data_end+0xf8001afc>
    1b78:	39c10034 	orhi	r7,r7,1024
    1b7c:	008006c4 	movi	r2,27
    1b80:	11007416 	blt	r2,r4,1d54 <__subsf3+0x2bc>
    1b84:	00800804 	movi	r2,32
    1b88:	1105c83a 	sub	r2,r2,r4
    1b8c:	3884983a 	sll	r2,r7,r2
    1b90:	390ed83a 	srl	r7,r7,r4
    1b94:	1008c03a 	cmpne	r4,r2,zero
    1b98:	390eb03a 	or	r7,r7,r4
    1b9c:	19c7c83a 	sub	r3,r3,r7
    1ba0:	1881002c 	andhi	r2,r3,1024
    1ba4:	10001426 	beq	r2,zero,1bf8 <__subsf3+0x160>
    1ba8:	04810034 	movhi	r18,1024
    1bac:	94bfffc4 	addi	r18,r18,-1
    1bb0:	1ca4703a 	and	r18,r3,r18
    1bb4:	9009883a 	mov	r4,r18
    1bb8:	00021100 	call	2110 <__clzsi2>
    1bbc:	10bffec4 	addi	r2,r2,-5
    1bc0:	90a4983a 	sll	r18,r18,r2
    1bc4:	14005116 	blt	r2,r16,1d0c <__subsf3+0x274>
    1bc8:	1405c83a 	sub	r2,r2,r16
    1bcc:	10c00044 	addi	r3,r2,1
    1bd0:	00800804 	movi	r2,32
    1bd4:	10c5c83a 	sub	r2,r2,r3
    1bd8:	9084983a 	sll	r2,r18,r2
    1bdc:	90e4d83a 	srl	r18,r18,r3
    1be0:	0021883a 	mov	r16,zero
    1be4:	1006c03a 	cmpne	r3,r2,zero
    1be8:	90c6b03a 	or	r3,r18,r3
    1bec:	003fc306 	br	1afc <__alt_data_end+0xf8001afc>
    1bf0:	2000e026 	beq	r4,zero,1f74 <__subsf3+0x4dc>
    1bf4:	2007883a 	mov	r3,r4
    1bf8:	188001cc 	andi	r2,r3,7
    1bfc:	103fc11e 	bne	r2,zero,1b04 <__alt_data_end+0xf8001b04>
    1c00:	180ad0fa 	srli	r5,r3,3
    1c04:	00c03fc4 	movi	r3,255
    1c08:	8880004c 	andi	r2,r17,1
    1c0c:	80c0031e 	bne	r16,r3,1c1c <__subsf3+0x184>
    1c10:	28006d26 	beq	r5,zero,1dc8 <__subsf3+0x330>
    1c14:	29401034 	orhi	r5,r5,64
    1c18:	043fffc4 	movi	r16,-1
    1c1c:	00c02034 	movhi	r3,128
    1c20:	18ffffc4 	addi	r3,r3,-1
    1c24:	28ca703a 	and	r5,r5,r3
    1c28:	003fc206 	br	1b34 <__alt_data_end+0xf8001b34>
    1c2c:	01003c0e 	bge	zero,r4,1d20 <__subsf3+0x288>
    1c30:	30002126 	beq	r6,zero,1cb8 <__subsf3+0x220>
    1c34:	01403fc4 	movi	r5,255
    1c38:	817fb026 	beq	r16,r5,1afc <__alt_data_end+0xf8001afc>
    1c3c:	39c10034 	orhi	r7,r7,1024
    1c40:	014006c4 	movi	r5,27
    1c44:	29007416 	blt	r5,r4,1e18 <__subsf3+0x380>
    1c48:	01400804 	movi	r5,32
    1c4c:	290bc83a 	sub	r5,r5,r4
    1c50:	394a983a 	sll	r5,r7,r5
    1c54:	390ed83a 	srl	r7,r7,r4
    1c58:	2808c03a 	cmpne	r4,r5,zero
    1c5c:	390eb03a 	or	r7,r7,r4
    1c60:	19c7883a 	add	r3,r3,r7
    1c64:	1901002c 	andhi	r4,r3,1024
    1c68:	20003826 	beq	r4,zero,1d4c <__subsf3+0x2b4>
    1c6c:	84000044 	addi	r16,r16,1
    1c70:	01003fc4 	movi	r4,255
    1c74:	81005426 	beq	r16,r4,1dc8 <__subsf3+0x330>
    1c78:	1023883a 	mov	r17,r2
    1c7c:	00bf0034 	movhi	r2,64512
    1c80:	10bfffc4 	addi	r2,r2,-1
    1c84:	1900004c 	andi	r4,r3,1
    1c88:	1886703a 	and	r3,r3,r2
    1c8c:	1806d07a 	srli	r3,r3,1
    1c90:	1906b03a 	or	r3,r3,r4
    1c94:	003f9906 	br	1afc <__alt_data_end+0xf8001afc>
    1c98:	383f9226 	beq	r7,zero,1ae4 <__alt_data_end+0xf8001ae4>
    1c9c:	10803fcc 	andi	r2,r2,255
    1ca0:	003f9106 	br	1ae8 <__alt_data_end+0xf8001ae8>
    1ca4:	213fffc4 	addi	r4,r4,-1
    1ca8:	203fbc26 	beq	r4,zero,1b9c <__alt_data_end+0xf8001b9c>
    1cac:	00803fc4 	movi	r2,255
    1cb0:	80bfb21e 	bne	r16,r2,1b7c <__alt_data_end+0xf8001b7c>
    1cb4:	003f9106 	br	1afc <__alt_data_end+0xf8001afc>
    1cb8:	383f9026 	beq	r7,zero,1afc <__alt_data_end+0xf8001afc>
    1cbc:	213fffc4 	addi	r4,r4,-1
    1cc0:	203fe726 	beq	r4,zero,1c60 <__alt_data_end+0xf8001c60>
    1cc4:	01403fc4 	movi	r5,255
    1cc8:	817fdd1e 	bne	r16,r5,1c40 <__alt_data_end+0xf8001c40>
    1ccc:	003f8b06 	br	1afc <__alt_data_end+0xf8001afc>
    1cd0:	2000221e 	bne	r4,zero,1d5c <__subsf3+0x2c4>
    1cd4:	81000044 	addi	r4,r16,1
    1cd8:	21003fcc 	andi	r4,r4,255
    1cdc:	01400044 	movi	r5,1
    1ce0:	2900470e 	bge	r5,r4,1e00 <__subsf3+0x368>
    1ce4:	19e5c83a 	sub	r18,r3,r7
    1ce8:	9141002c 	andhi	r5,r18,1024
    1cec:	28002d26 	beq	r5,zero,1da4 <__subsf3+0x30c>
    1cf0:	38e5c83a 	sub	r18,r7,r3
    1cf4:	1023883a 	mov	r17,r2
    1cf8:	003fae06 	br	1bb4 <__alt_data_end+0xf8001bb4>
    1cfc:	8880004c 	andi	r2,r17,1
    1d00:	043fffc4 	movi	r16,-1
    1d04:	000b883a 	mov	r5,zero
    1d08:	003f8a06 	br	1b34 <__alt_data_end+0xf8001b34>
    1d0c:	00ff0034 	movhi	r3,64512
    1d10:	18ffffc4 	addi	r3,r3,-1
    1d14:	80a1c83a 	sub	r16,r16,r2
    1d18:	90c6703a 	and	r3,r18,r3
    1d1c:	003f7706 	br	1afc <__alt_data_end+0xf8001afc>
    1d20:	2000431e 	bne	r4,zero,1e30 <__subsf3+0x398>
    1d24:	81000044 	addi	r4,r16,1
    1d28:	21803fcc 	andi	r6,r4,255
    1d2c:	01400044 	movi	r5,1
    1d30:	2980280e 	bge	r5,r6,1dd4 <__subsf3+0x33c>
    1d34:	01403fc4 	movi	r5,255
    1d38:	21402326 	beq	r4,r5,1dc8 <__subsf3+0x330>
    1d3c:	19c7883a 	add	r3,r3,r7
    1d40:	1806d07a 	srli	r3,r3,1
    1d44:	2021883a 	mov	r16,r4
    1d48:	003f6c06 	br	1afc <__alt_data_end+0xf8001afc>
    1d4c:	1023883a 	mov	r17,r2
    1d50:	003fa906 	br	1bf8 <__alt_data_end+0xf8001bf8>
    1d54:	01c00044 	movi	r7,1
    1d58:	003f9006 	br	1b9c <__alt_data_end+0xf8001b9c>
    1d5c:	8000151e 	bne	r16,zero,1db4 <__subsf3+0x31c>
    1d60:	18002f26 	beq	r3,zero,1e20 <__subsf3+0x388>
    1d64:	0108303a 	nor	r4,zero,r4
    1d68:	20000a26 	beq	r4,zero,1d94 <__subsf3+0x2fc>
    1d6c:	01403fc4 	movi	r5,255
    1d70:	31402b26 	beq	r6,r5,1e20 <__subsf3+0x388>
    1d74:	014006c4 	movi	r5,27
    1d78:	29006e16 	blt	r5,r4,1f34 <__subsf3+0x49c>
    1d7c:	01400804 	movi	r5,32
    1d80:	290bc83a 	sub	r5,r5,r4
    1d84:	194a983a 	sll	r5,r3,r5
    1d88:	1908d83a 	srl	r4,r3,r4
    1d8c:	2806c03a 	cmpne	r3,r5,zero
    1d90:	20c6b03a 	or	r3,r4,r3
    1d94:	38c7c83a 	sub	r3,r7,r3
    1d98:	3021883a 	mov	r16,r6
    1d9c:	1023883a 	mov	r17,r2
    1da0:	003f7f06 	br	1ba0 <__alt_data_end+0xf8001ba0>
    1da4:	903f831e 	bne	r18,zero,1bb4 <__alt_data_end+0xf8001bb4>
    1da8:	0005883a 	mov	r2,zero
    1dac:	0021883a 	mov	r16,zero
    1db0:	003f9a06 	br	1c1c <__alt_data_end+0xf8001c1c>
    1db4:	01403fc4 	movi	r5,255
    1db8:	31401926 	beq	r6,r5,1e20 <__subsf3+0x388>
    1dbc:	0109c83a 	sub	r4,zero,r4
    1dc0:	18c10034 	orhi	r3,r3,1024
    1dc4:	003feb06 	br	1d74 <__alt_data_end+0xf8001d74>
    1dc8:	043fffc4 	movi	r16,-1
    1dcc:	000b883a 	mov	r5,zero
    1dd0:	003f5806 	br	1b34 <__alt_data_end+0xf8001b34>
    1dd4:	8000481e 	bne	r16,zero,1ef8 <__subsf3+0x460>
    1dd8:	18006226 	beq	r3,zero,1f64 <__subsf3+0x4cc>
    1ddc:	383f4726 	beq	r7,zero,1afc <__alt_data_end+0xf8001afc>
    1de0:	19c7883a 	add	r3,r3,r7
    1de4:	1881002c 	andhi	r2,r3,1024
    1de8:	103f8326 	beq	r2,zero,1bf8 <__alt_data_end+0xf8001bf8>
    1dec:	00bf0034 	movhi	r2,64512
    1df0:	10bfffc4 	addi	r2,r2,-1
    1df4:	2821883a 	mov	r16,r5
    1df8:	1886703a 	and	r3,r3,r2
    1dfc:	003f3f06 	br	1afc <__alt_data_end+0xf8001afc>
    1e00:	80001c1e 	bne	r16,zero,1e74 <__subsf3+0x3dc>
    1e04:	1800261e 	bne	r3,zero,1ea0 <__subsf3+0x408>
    1e08:	38004c26 	beq	r7,zero,1f3c <__subsf3+0x4a4>
    1e0c:	3807883a 	mov	r3,r7
    1e10:	1023883a 	mov	r17,r2
    1e14:	003f3906 	br	1afc <__alt_data_end+0xf8001afc>
    1e18:	01c00044 	movi	r7,1
    1e1c:	003f9006 	br	1c60 <__alt_data_end+0xf8001c60>
    1e20:	3807883a 	mov	r3,r7
    1e24:	3021883a 	mov	r16,r6
    1e28:	1023883a 	mov	r17,r2
    1e2c:	003f3306 	br	1afc <__alt_data_end+0xf8001afc>
    1e30:	8000161e 	bne	r16,zero,1e8c <__subsf3+0x3f4>
    1e34:	18002d26 	beq	r3,zero,1eec <__subsf3+0x454>
    1e38:	0108303a 	nor	r4,zero,r4
    1e3c:	20000a26 	beq	r4,zero,1e68 <__subsf3+0x3d0>
    1e40:	01403fc4 	movi	r5,255
    1e44:	31402926 	beq	r6,r5,1eec <__subsf3+0x454>
    1e48:	014006c4 	movi	r5,27
    1e4c:	29004716 	blt	r5,r4,1f6c <__subsf3+0x4d4>
    1e50:	01400804 	movi	r5,32
    1e54:	290bc83a 	sub	r5,r5,r4
    1e58:	194a983a 	sll	r5,r3,r5
    1e5c:	1908d83a 	srl	r4,r3,r4
    1e60:	2806c03a 	cmpne	r3,r5,zero
    1e64:	20c6b03a 	or	r3,r4,r3
    1e68:	19c7883a 	add	r3,r3,r7
    1e6c:	3021883a 	mov	r16,r6
    1e70:	003f7c06 	br	1c64 <__alt_data_end+0xf8001c64>
    1e74:	1800111e 	bne	r3,zero,1ebc <__subsf3+0x424>
    1e78:	38003326 	beq	r7,zero,1f48 <__subsf3+0x4b0>
    1e7c:	3807883a 	mov	r3,r7
    1e80:	1023883a 	mov	r17,r2
    1e84:	04003fc4 	movi	r16,255
    1e88:	003f1c06 	br	1afc <__alt_data_end+0xf8001afc>
    1e8c:	01403fc4 	movi	r5,255
    1e90:	31401626 	beq	r6,r5,1eec <__subsf3+0x454>
    1e94:	0109c83a 	sub	r4,zero,r4
    1e98:	18c10034 	orhi	r3,r3,1024
    1e9c:	003fea06 	br	1e48 <__alt_data_end+0xf8001e48>
    1ea0:	383f1626 	beq	r7,zero,1afc <__alt_data_end+0xf8001afc>
    1ea4:	19c9c83a 	sub	r4,r3,r7
    1ea8:	2141002c 	andhi	r5,r4,1024
    1eac:	283f5026 	beq	r5,zero,1bf0 <__alt_data_end+0xf8001bf0>
    1eb0:	38c7c83a 	sub	r3,r7,r3
    1eb4:	1023883a 	mov	r17,r2
    1eb8:	003f1006 	br	1afc <__alt_data_end+0xf8001afc>
    1ebc:	38001b26 	beq	r7,zero,1f2c <__subsf3+0x494>
    1ec0:	1806d0fa 	srli	r3,r3,3
    1ec4:	1900102c 	andhi	r4,r3,64
    1ec8:	20000526 	beq	r4,zero,1ee0 <__subsf3+0x448>
    1ecc:	380ed0fa 	srli	r7,r7,3
    1ed0:	3900102c 	andhi	r4,r7,64
    1ed4:	2000021e 	bne	r4,zero,1ee0 <__subsf3+0x448>
    1ed8:	3807883a 	mov	r3,r7
    1edc:	1023883a 	mov	r17,r2
    1ee0:	180690fa 	slli	r3,r3,3
    1ee4:	04003fc4 	movi	r16,255
    1ee8:	003f0406 	br	1afc <__alt_data_end+0xf8001afc>
    1eec:	3807883a 	mov	r3,r7
    1ef0:	3021883a 	mov	r16,r6
    1ef4:	003f0106 	br	1afc <__alt_data_end+0xf8001afc>
    1ef8:	18001726 	beq	r3,zero,1f58 <__subsf3+0x4c0>
    1efc:	38000b26 	beq	r7,zero,1f2c <__subsf3+0x494>
    1f00:	1806d0fa 	srli	r3,r3,3
    1f04:	1900102c 	andhi	r4,r3,64
    1f08:	20000426 	beq	r4,zero,1f1c <__subsf3+0x484>
    1f0c:	380ed0fa 	srli	r7,r7,3
    1f10:	3900102c 	andhi	r4,r7,64
    1f14:	2000011e 	bne	r4,zero,1f1c <__subsf3+0x484>
    1f18:	3807883a 	mov	r3,r7
    1f1c:	180690fa 	slli	r3,r3,3
    1f20:	1023883a 	mov	r17,r2
    1f24:	04003fc4 	movi	r16,255
    1f28:	003ef406 	br	1afc <__alt_data_end+0xf8001afc>
    1f2c:	04003fc4 	movi	r16,255
    1f30:	003ef206 	br	1afc <__alt_data_end+0xf8001afc>
    1f34:	00c00044 	movi	r3,1
    1f38:	003f9606 	br	1d94 <__alt_data_end+0xf8001d94>
    1f3c:	000b883a 	mov	r5,zero
    1f40:	0005883a 	mov	r2,zero
    1f44:	003f3506 	br	1c1c <__alt_data_end+0xf8001c1c>
    1f48:	01402034 	movhi	r5,128
    1f4c:	297fffc4 	addi	r5,r5,-1
    1f50:	0005883a 	mov	r2,zero
    1f54:	003f2f06 	br	1c14 <__alt_data_end+0xf8001c14>
    1f58:	3807883a 	mov	r3,r7
    1f5c:	04003fc4 	movi	r16,255
    1f60:	003ee606 	br	1afc <__alt_data_end+0xf8001afc>
    1f64:	3807883a 	mov	r3,r7
    1f68:	003ee406 	br	1afc <__alt_data_end+0xf8001afc>
    1f6c:	00c00044 	movi	r3,1
    1f70:	003fbd06 	br	1e68 <__alt_data_end+0xf8001e68>
    1f74:	0005883a 	mov	r2,zero
    1f78:	003f2806 	br	1c1c <__alt_data_end+0xf8001c1c>

00001f7c <__fixsfsi>:
    1f7c:	200ad5fa 	srli	r5,r4,23
    1f80:	00c02034 	movhi	r3,128
    1f84:	18ffffc4 	addi	r3,r3,-1
    1f88:	29403fcc 	andi	r5,r5,255
    1f8c:	00801f84 	movi	r2,126
    1f90:	1906703a 	and	r3,r3,r4
    1f94:	2008d7fa 	srli	r4,r4,31
    1f98:	11400e0e 	bge	r2,r5,1fd4 <__fixsfsi+0x58>
    1f9c:	00802744 	movi	r2,157
    1fa0:	11400816 	blt	r2,r5,1fc4 <__fixsfsi+0x48>
    1fa4:	00802544 	movi	r2,149
    1fa8:	18c02034 	orhi	r3,r3,128
    1fac:	11400b0e 	bge	r2,r5,1fdc <__fixsfsi+0x60>
    1fb0:	28bfda84 	addi	r2,r5,-150
    1fb4:	1884983a 	sll	r2,r3,r2
    1fb8:	20000726 	beq	r4,zero,1fd8 <__fixsfsi+0x5c>
    1fbc:	0085c83a 	sub	r2,zero,r2
    1fc0:	f800283a 	ret
    1fc4:	00a00034 	movhi	r2,32768
    1fc8:	10bfffc4 	addi	r2,r2,-1
    1fcc:	2085883a 	add	r2,r4,r2
    1fd0:	f800283a 	ret
    1fd4:	0005883a 	mov	r2,zero
    1fd8:	f800283a 	ret
    1fdc:	00802584 	movi	r2,150
    1fe0:	1145c83a 	sub	r2,r2,r5
    1fe4:	1884d83a 	srl	r2,r3,r2
    1fe8:	003ff306 	br	1fb8 <__alt_data_end+0xf8001fb8>

00001fec <__floatsisf>:
    1fec:	defffd04 	addi	sp,sp,-12
    1ff0:	dfc00215 	stw	ra,8(sp)
    1ff4:	dc400115 	stw	r17,4(sp)
    1ff8:	dc000015 	stw	r16,0(sp)
    1ffc:	20003526 	beq	r4,zero,20d4 <__floatsisf+0xe8>
    2000:	2021883a 	mov	r16,r4
    2004:	2022d7fa 	srli	r17,r4,31
    2008:	20003616 	blt	r4,zero,20e4 <__floatsisf+0xf8>
    200c:	8009883a 	mov	r4,r16
    2010:	00021100 	call	2110 <__clzsi2>
    2014:	00c02784 	movi	r3,158
    2018:	1887c83a 	sub	r3,r3,r2
    201c:	01002584 	movi	r4,150
    2020:	20c01416 	blt	r4,r3,2074 <__floatsisf+0x88>
    2024:	20c9c83a 	sub	r4,r4,r3
    2028:	8120983a 	sll	r16,r16,r4
    202c:	00802034 	movhi	r2,128
    2030:	10bfffc4 	addi	r2,r2,-1
    2034:	8809883a 	mov	r4,r17
    2038:	80a0703a 	and	r16,r16,r2
    203c:	18803fcc 	andi	r2,r3,255
    2040:	100695fa 	slli	r3,r2,23
    2044:	20803fcc 	andi	r2,r4,255
    2048:	100897fa 	slli	r4,r2,31
    204c:	00802034 	movhi	r2,128
    2050:	10bfffc4 	addi	r2,r2,-1
    2054:	8084703a 	and	r2,r16,r2
    2058:	10c4b03a 	or	r2,r2,r3
    205c:	1104b03a 	or	r2,r2,r4
    2060:	dfc00217 	ldw	ra,8(sp)
    2064:	dc400117 	ldw	r17,4(sp)
    2068:	dc000017 	ldw	r16,0(sp)
    206c:	dec00304 	addi	sp,sp,12
    2070:	f800283a 	ret
    2074:	01002644 	movi	r4,153
    2078:	20c01c16 	blt	r4,r3,20ec <__floatsisf+0x100>
    207c:	20c9c83a 	sub	r4,r4,r3
    2080:	8120983a 	sll	r16,r16,r4
    2084:	013f0034 	movhi	r4,64512
    2088:	213fffc4 	addi	r4,r4,-1
    208c:	814001cc 	andi	r5,r16,7
    2090:	8108703a 	and	r4,r16,r4
    2094:	28000426 	beq	r5,zero,20a8 <__floatsisf+0xbc>
    2098:	840003cc 	andi	r16,r16,15
    209c:	01400104 	movi	r5,4
    20a0:	81400126 	beq	r16,r5,20a8 <__floatsisf+0xbc>
    20a4:	2149883a 	add	r4,r4,r5
    20a8:	2141002c 	andhi	r5,r4,1024
    20ac:	28000526 	beq	r5,zero,20c4 <__floatsisf+0xd8>
    20b0:	00c027c4 	movi	r3,159
    20b4:	1887c83a 	sub	r3,r3,r2
    20b8:	00bf0034 	movhi	r2,64512
    20bc:	10bfffc4 	addi	r2,r2,-1
    20c0:	2088703a 	and	r4,r4,r2
    20c4:	202091ba 	slli	r16,r4,6
    20c8:	8809883a 	mov	r4,r17
    20cc:	8020d27a 	srli	r16,r16,9
    20d0:	003fda06 	br	203c <__alt_data_end+0xf800203c>
    20d4:	0009883a 	mov	r4,zero
    20d8:	0007883a 	mov	r3,zero
    20dc:	0021883a 	mov	r16,zero
    20e0:	003fd606 	br	203c <__alt_data_end+0xf800203c>
    20e4:	0121c83a 	sub	r16,zero,r4
    20e8:	003fc806 	br	200c <__alt_data_end+0xf800200c>
    20ec:	01002e44 	movi	r4,185
    20f0:	20c9c83a 	sub	r4,r4,r3
    20f4:	01400144 	movi	r5,5
    20f8:	8108983a 	sll	r4,r16,r4
    20fc:	288bc83a 	sub	r5,r5,r2
    2100:	8160d83a 	srl	r16,r16,r5
    2104:	2008c03a 	cmpne	r4,r4,zero
    2108:	8120b03a 	or	r16,r16,r4
    210c:	003fdd06 	br	2084 <__alt_data_end+0xf8002084>

00002110 <__clzsi2>:
    2110:	00bfffd4 	movui	r2,65535
    2114:	11000536 	bltu	r2,r4,212c <__clzsi2+0x1c>
    2118:	00803fc4 	movi	r2,255
    211c:	11000f36 	bltu	r2,r4,215c <__clzsi2+0x4c>
    2120:	00800804 	movi	r2,32
    2124:	0007883a 	mov	r3,zero
    2128:	00000506 	br	2140 <__clzsi2+0x30>
    212c:	00804034 	movhi	r2,256
    2130:	10bfffc4 	addi	r2,r2,-1
    2134:	11000c2e 	bgeu	r2,r4,2168 <__clzsi2+0x58>
    2138:	00800204 	movi	r2,8
    213c:	00c00604 	movi	r3,24
    2140:	20c8d83a 	srl	r4,r4,r3
    2144:	00c00034 	movhi	r3,0
    2148:	18d56a84 	addi	r3,r3,21930
    214c:	1909883a 	add	r4,r3,r4
    2150:	20c00003 	ldbu	r3,0(r4)
    2154:	10c5c83a 	sub	r2,r2,r3
    2158:	f800283a 	ret
    215c:	00800604 	movi	r2,24
    2160:	00c00204 	movi	r3,8
    2164:	003ff606 	br	2140 <__alt_data_end+0xf8002140>
    2168:	00800404 	movi	r2,16
    216c:	1007883a 	mov	r3,r2
    2170:	003ff306 	br	2140 <__alt_data_end+0xf8002140>

00002174 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2174:	defff904 	addi	sp,sp,-28
    2178:	dfc00615 	stw	ra,24(sp)
    217c:	df000515 	stw	fp,20(sp)
    2180:	df000504 	addi	fp,sp,20
    2184:	e13ffc15 	stw	r4,-16(fp)
    2188:	e17ffd15 	stw	r5,-12(fp)
    218c:	e1bffe15 	stw	r6,-8(fp)
    2190:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    2194:	e0800217 	ldw	r2,8(fp)
    2198:	d8800015 	stw	r2,0(sp)
    219c:	e1ffff17 	ldw	r7,-4(fp)
    21a0:	e1bffe17 	ldw	r6,-8(fp)
    21a4:	e17ffd17 	ldw	r5,-12(fp)
    21a8:	e13ffc17 	ldw	r4,-16(fp)
    21ac:	00023240 	call	2324 <alt_iic_isr_register>
}  
    21b0:	e037883a 	mov	sp,fp
    21b4:	dfc00117 	ldw	ra,4(sp)
    21b8:	df000017 	ldw	fp,0(sp)
    21bc:	dec00204 	addi	sp,sp,8
    21c0:	f800283a 	ret

000021c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    21c4:	defff904 	addi	sp,sp,-28
    21c8:	df000615 	stw	fp,24(sp)
    21cc:	df000604 	addi	fp,sp,24
    21d0:	e13ffe15 	stw	r4,-8(fp)
    21d4:	e17fff15 	stw	r5,-4(fp)
    21d8:	e0bfff17 	ldw	r2,-4(fp)
    21dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    21e0:	0005303a 	rdctl	r2,status
    21e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    21e8:	e0fffb17 	ldw	r3,-20(fp)
    21ec:	00bfff84 	movi	r2,-2
    21f0:	1884703a 	and	r2,r3,r2
    21f4:	1001703a 	wrctl	status,r2
  
  return context;
    21f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    21fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    2200:	00c00044 	movi	r3,1
    2204:	e0bffa17 	ldw	r2,-24(fp)
    2208:	1884983a 	sll	r2,r3,r2
    220c:	1007883a 	mov	r3,r2
    2210:	d0a5e417 	ldw	r2,-26736(gp)
    2214:	1884b03a 	or	r2,r3,r2
    2218:	d0a5e415 	stw	r2,-26736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    221c:	d0a5e417 	ldw	r2,-26736(gp)
    2220:	100170fa 	wrctl	ienable,r2
    2224:	e0bffc17 	ldw	r2,-16(fp)
    2228:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    222c:	e0bffd17 	ldw	r2,-12(fp)
    2230:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2234:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    2238:	0001883a 	nop
}
    223c:	e037883a 	mov	sp,fp
    2240:	df000017 	ldw	fp,0(sp)
    2244:	dec00104 	addi	sp,sp,4
    2248:	f800283a 	ret

0000224c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    224c:	defff904 	addi	sp,sp,-28
    2250:	df000615 	stw	fp,24(sp)
    2254:	df000604 	addi	fp,sp,24
    2258:	e13ffe15 	stw	r4,-8(fp)
    225c:	e17fff15 	stw	r5,-4(fp)
    2260:	e0bfff17 	ldw	r2,-4(fp)
    2264:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2268:	0005303a 	rdctl	r2,status
    226c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2270:	e0fffb17 	ldw	r3,-20(fp)
    2274:	00bfff84 	movi	r2,-2
    2278:	1884703a 	and	r2,r3,r2
    227c:	1001703a 	wrctl	status,r2
  
  return context;
    2280:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2284:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    2288:	00c00044 	movi	r3,1
    228c:	e0bffa17 	ldw	r2,-24(fp)
    2290:	1884983a 	sll	r2,r3,r2
    2294:	0084303a 	nor	r2,zero,r2
    2298:	1007883a 	mov	r3,r2
    229c:	d0a5e417 	ldw	r2,-26736(gp)
    22a0:	1884703a 	and	r2,r3,r2
    22a4:	d0a5e415 	stw	r2,-26736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    22a8:	d0a5e417 	ldw	r2,-26736(gp)
    22ac:	100170fa 	wrctl	ienable,r2
    22b0:	e0bffc17 	ldw	r2,-16(fp)
    22b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    22b8:	e0bffd17 	ldw	r2,-12(fp)
    22bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    22c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    22c4:	0001883a 	nop
}
    22c8:	e037883a 	mov	sp,fp
    22cc:	df000017 	ldw	fp,0(sp)
    22d0:	dec00104 	addi	sp,sp,4
    22d4:	f800283a 	ret

000022d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    22d8:	defffc04 	addi	sp,sp,-16
    22dc:	df000315 	stw	fp,12(sp)
    22e0:	df000304 	addi	fp,sp,12
    22e4:	e13ffe15 	stw	r4,-8(fp)
    22e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    22ec:	000530fa 	rdctl	r2,ienable
    22f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    22f4:	00c00044 	movi	r3,1
    22f8:	e0bfff17 	ldw	r2,-4(fp)
    22fc:	1884983a 	sll	r2,r3,r2
    2300:	1007883a 	mov	r3,r2
    2304:	e0bffd17 	ldw	r2,-12(fp)
    2308:	1884703a 	and	r2,r3,r2
    230c:	1004c03a 	cmpne	r2,r2,zero
    2310:	10803fcc 	andi	r2,r2,255
}
    2314:	e037883a 	mov	sp,fp
    2318:	df000017 	ldw	fp,0(sp)
    231c:	dec00104 	addi	sp,sp,4
    2320:	f800283a 	ret

00002324 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2324:	defff504 	addi	sp,sp,-44
    2328:	dfc00a15 	stw	ra,40(sp)
    232c:	df000915 	stw	fp,36(sp)
    2330:	df000904 	addi	fp,sp,36
    2334:	e13ffc15 	stw	r4,-16(fp)
    2338:	e17ffd15 	stw	r5,-12(fp)
    233c:	e1bffe15 	stw	r6,-8(fp)
    2340:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    2344:	00bffa84 	movi	r2,-22
    2348:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    234c:	e0bffd17 	ldw	r2,-12(fp)
    2350:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2354:	e0bff817 	ldw	r2,-32(fp)
    2358:	10800808 	cmpgei	r2,r2,32
    235c:	1000271e 	bne	r2,zero,23fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2360:	0005303a 	rdctl	r2,status
    2364:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2368:	e0fffb17 	ldw	r3,-20(fp)
    236c:	00bfff84 	movi	r2,-2
    2370:	1884703a 	and	r2,r3,r2
    2374:	1001703a 	wrctl	status,r2
  
  return context;
    2378:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    237c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    2380:	00800074 	movhi	r2,1
    2384:	10a16004 	addi	r2,r2,-31360
    2388:	e0fff817 	ldw	r3,-32(fp)
    238c:	180690fa 	slli	r3,r3,3
    2390:	10c5883a 	add	r2,r2,r3
    2394:	e0fffe17 	ldw	r3,-8(fp)
    2398:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    239c:	00800074 	movhi	r2,1
    23a0:	10a16004 	addi	r2,r2,-31360
    23a4:	e0fff817 	ldw	r3,-32(fp)
    23a8:	180690fa 	slli	r3,r3,3
    23ac:	10c5883a 	add	r2,r2,r3
    23b0:	10800104 	addi	r2,r2,4
    23b4:	e0ffff17 	ldw	r3,-4(fp)
    23b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    23bc:	e0bffe17 	ldw	r2,-8(fp)
    23c0:	10000526 	beq	r2,zero,23d8 <alt_iic_isr_register+0xb4>
    23c4:	e0bff817 	ldw	r2,-32(fp)
    23c8:	100b883a 	mov	r5,r2
    23cc:	e13ffc17 	ldw	r4,-16(fp)
    23d0:	00021c40 	call	21c4 <alt_ic_irq_enable>
    23d4:	00000406 	br	23e8 <alt_iic_isr_register+0xc4>
    23d8:	e0bff817 	ldw	r2,-32(fp)
    23dc:	100b883a 	mov	r5,r2
    23e0:	e13ffc17 	ldw	r4,-16(fp)
    23e4:	000224c0 	call	224c <alt_ic_irq_disable>
    23e8:	e0bff715 	stw	r2,-36(fp)
    23ec:	e0bffa17 	ldw	r2,-24(fp)
    23f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    23f4:	e0bff917 	ldw	r2,-28(fp)
    23f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    23fc:	e0bff717 	ldw	r2,-36(fp)
}
    2400:	e037883a 	mov	sp,fp
    2404:	dfc00117 	ldw	ra,4(sp)
    2408:	df000017 	ldw	fp,0(sp)
    240c:	dec00204 	addi	sp,sp,8
    2410:	f800283a 	ret

00002414 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    2414:	defffc04 	addi	sp,sp,-16
    2418:	df000315 	stw	fp,12(sp)
    241c:	df000304 	addi	fp,sp,12
    2420:	e13ffd15 	stw	r4,-12(fp)
    2424:	e17ffe15 	stw	r5,-8(fp)
    2428:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    242c:	e0fffe17 	ldw	r3,-8(fp)
    2430:	e0bffd17 	ldw	r2,-12(fp)
    2434:	18800c26 	beq	r3,r2,2468 <alt_load_section+0x54>
  {
    while( to != end )
    2438:	00000806 	br	245c <alt_load_section+0x48>
    {
      *to++ = *from++;
    243c:	e0bffe17 	ldw	r2,-8(fp)
    2440:	10c00104 	addi	r3,r2,4
    2444:	e0fffe15 	stw	r3,-8(fp)
    2448:	e0fffd17 	ldw	r3,-12(fp)
    244c:	19000104 	addi	r4,r3,4
    2450:	e13ffd15 	stw	r4,-12(fp)
    2454:	18c00017 	ldw	r3,0(r3)
    2458:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    245c:	e0fffe17 	ldw	r3,-8(fp)
    2460:	e0bfff17 	ldw	r2,-4(fp)
    2464:	18bff51e 	bne	r3,r2,243c <__alt_data_end+0xf800243c>
    {
      *to++ = *from++;
    }
  }
}
    2468:	0001883a 	nop
    246c:	e037883a 	mov	sp,fp
    2470:	df000017 	ldw	fp,0(sp)
    2474:	dec00104 	addi	sp,sp,4
    2478:	f800283a 	ret

0000247c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    247c:	defffe04 	addi	sp,sp,-8
    2480:	dfc00115 	stw	ra,4(sp)
    2484:	df000015 	stw	fp,0(sp)
    2488:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    248c:	01800034 	movhi	r6,0
    2490:	319b8404 	addi	r6,r6,28176
    2494:	01400034 	movhi	r5,0
    2498:	2955c404 	addi	r5,r5,22288
    249c:	01000034 	movhi	r4,0
    24a0:	211b8404 	addi	r4,r4,28176
    24a4:	00024140 	call	2414 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    24a8:	01800034 	movhi	r6,0
    24ac:	31807004 	addi	r6,r6,448
    24b0:	01400034 	movhi	r5,0
    24b4:	29400804 	addi	r5,r5,32
    24b8:	01000034 	movhi	r4,0
    24bc:	21000804 	addi	r4,r4,32
    24c0:	00024140 	call	2414 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    24c4:	01800034 	movhi	r6,0
    24c8:	3195c404 	addi	r6,r6,22288
    24cc:	01400034 	movhi	r5,0
    24d0:	29556504 	addi	r5,r5,21908
    24d4:	01000034 	movhi	r4,0
    24d8:	21156504 	addi	r4,r4,21908
    24dc:	00024140 	call	2414 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    24e0:	000454c0 	call	454c <alt_dcache_flush_all>
  alt_icache_flush_all();
    24e4:	00047f00 	call	47f0 <alt_icache_flush_all>
}
    24e8:	0001883a 	nop
    24ec:	e037883a 	mov	sp,fp
    24f0:	dfc00117 	ldw	ra,4(sp)
    24f4:	df000017 	ldw	fp,0(sp)
    24f8:	dec00204 	addi	sp,sp,8
    24fc:	f800283a 	ret

00002500 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2500:	defffd04 	addi	sp,sp,-12
    2504:	dfc00215 	stw	ra,8(sp)
    2508:	df000115 	stw	fp,4(sp)
    250c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2510:	0009883a 	mov	r4,zero
    2514:	00025b00 	call	25b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    2518:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    251c:	00025e80 	call	25e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    2520:	01800034 	movhi	r6,0
    2524:	3195ab04 	addi	r6,r6,22188
    2528:	01400034 	movhi	r5,0
    252c:	2955ab04 	addi	r5,r5,22188
    2530:	01000034 	movhi	r4,0
    2534:	2115ab04 	addi	r4,r4,22188
    2538:	00048e80 	call	48e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    253c:	00046a00 	call	46a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    2540:	01000034 	movhi	r4,0
    2544:	2111c004 	addi	r4,r4,18176
    2548:	00050200 	call	5020 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    254c:	d0a5e517 	ldw	r2,-26732(gp)
    2550:	d0e5e617 	ldw	r3,-26728(gp)
    2554:	d125e717 	ldw	r4,-26724(gp)
    2558:	200d883a 	mov	r6,r4
    255c:	180b883a 	mov	r5,r3
    2560:	1009883a 	mov	r4,r2
    2564:	000020c0 	call	20c <main>
    2568:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    256c:	01000044 	movi	r4,1
    2570:	000447c0 	call	447c <close>
  exit (result);
    2574:	e13fff17 	ldw	r4,-4(fp)
    2578:	00050340 	call	5034 <exit>

0000257c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    257c:	defffd04 	addi	sp,sp,-12
    2580:	dfc00215 	stw	ra,8(sp)
    2584:	df000115 	stw	fp,4(sp)
    2588:	df000104 	addi	fp,sp,4
    258c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    2590:	d1600704 	addi	r5,gp,-32740
    2594:	e13fff17 	ldw	r4,-4(fp)
    2598:	00045fc0 	call	45fc <alt_dev_llist_insert>
}
    259c:	e037883a 	mov	sp,fp
    25a0:	dfc00117 	ldw	ra,4(sp)
    25a4:	df000017 	ldw	fp,0(sp)
    25a8:	dec00204 	addi	sp,sp,8
    25ac:	f800283a 	ret

000025b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    25b0:	defffd04 	addi	sp,sp,-12
    25b4:	dfc00215 	stw	ra,8(sp)
    25b8:	df000115 	stw	fp,4(sp)
    25bc:	df000104 	addi	fp,sp,4
    25c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
    25c4:	0004dc00 	call	4dc0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    25c8:	00800044 	movi	r2,1
    25cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    25d0:	0001883a 	nop
    25d4:	e037883a 	mov	sp,fp
    25d8:	dfc00117 	ldw	ra,4(sp)
    25dc:	df000017 	ldw	fp,0(sp)
    25e0:	dec00204 	addi	sp,sp,8
    25e4:	f800283a 	ret

000025e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    25e8:	defffd04 	addi	sp,sp,-12
    25ec:	dfc00215 	stw	ra,8(sp)
    25f0:	df000115 	stw	fp,4(sp)
    25f4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    25f8:	01c0fa04 	movi	r7,1000
    25fc:	018000c4 	movi	r6,3
    2600:	000b883a 	mov	r5,zero
    2604:	01020834 	movhi	r4,2080
    2608:	21041004 	addi	r4,r4,4160
    260c:	00033e40 	call	33e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    2610:	000d883a 	mov	r6,zero
    2614:	000b883a 	mov	r5,zero
    2618:	01000034 	movhi	r4,0
    261c:	2115ce04 	addi	r4,r4,22328
    2620:	0002a680 	call	2a68 <altera_avalon_jtag_uart_init>
    2624:	01000034 	movhi	r4,0
    2628:	2115c404 	addi	r4,r4,22288
    262c:	000257c0 	call	257c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
    2630:	00800034 	movhi	r2,0
    2634:	1099dc04 	addi	r2,r2,26480
    2638:	10800a17 	ldw	r2,40(r2)
    263c:	10800017 	ldw	r2,0(r2)
    2640:	1007883a 	mov	r3,r2
    2644:	00800034 	movhi	r2,0
    2648:	1099dc04 	addi	r2,r2,26480
    264c:	10c00b15 	stw	r3,44(r2)
    2650:	00800034 	movhi	r2,0
    2654:	1099dc04 	addi	r2,r2,26480
    2658:	10800a17 	ldw	r2,40(r2)
    265c:	10800104 	addi	r2,r2,4
    2660:	10800017 	ldw	r2,0(r2)
    2664:	1007883a 	mov	r3,r2
    2668:	00800034 	movhi	r2,0
    266c:	1099dc04 	addi	r2,r2,26480
    2670:	10c00c15 	stw	r3,48(r2)
    2674:	00800034 	movhi	r2,0
    2678:	1099dc04 	addi	r2,r2,26480
    267c:	10800a17 	ldw	r2,40(r2)
    2680:	10800204 	addi	r2,r2,8
    2684:	10800017 	ldw	r2,0(r2)
    2688:	10ffffcc 	andi	r3,r2,65535
    268c:	00800034 	movhi	r2,0
    2690:	1099dc04 	addi	r2,r2,26480
    2694:	10c00f15 	stw	r3,60(r2)
    2698:	00800034 	movhi	r2,0
    269c:	1099dc04 	addi	r2,r2,26480
    26a0:	10800a17 	ldw	r2,40(r2)
    26a4:	10800204 	addi	r2,r2,8
    26a8:	10800017 	ldw	r2,0(r2)
    26ac:	1006d43a 	srli	r3,r2,16
    26b0:	00800034 	movhi	r2,0
    26b4:	1099dc04 	addi	r2,r2,26480
    26b8:	10c01015 	stw	r3,64(r2)
    26bc:	00800034 	movhi	r2,0
    26c0:	1099dc04 	addi	r2,r2,26480
    26c4:	10800a17 	ldw	r2,40(r2)
    26c8:	10800304 	addi	r2,r2,12
    26cc:	10800017 	ldw	r2,0(r2)
    26d0:	1005d07a 	srai	r2,r2,1
    26d4:	10c0004c 	andi	r3,r2,1
    26d8:	00800034 	movhi	r2,0
    26dc:	1099dc04 	addi	r2,r2,26480
    26e0:	10c00d15 	stw	r3,52(r2)
    26e4:	00800034 	movhi	r2,0
    26e8:	1099dc04 	addi	r2,r2,26480
    26ec:	10800a17 	ldw	r2,40(r2)
    26f0:	10800304 	addi	r2,r2,12
    26f4:	10800017 	ldw	r2,0(r2)
    26f8:	1005d13a 	srai	r2,r2,4
    26fc:	10c003cc 	andi	r3,r2,15
    2700:	00800034 	movhi	r2,0
    2704:	1099dc04 	addi	r2,r2,26480
    2708:	10c00e15 	stw	r3,56(r2)
    270c:	00800034 	movhi	r2,0
    2710:	1099dc04 	addi	r2,r2,26480
    2714:	10800a17 	ldw	r2,40(r2)
    2718:	10800304 	addi	r2,r2,12
    271c:	10800017 	ldw	r2,0(r2)
    2720:	1005d43a 	srai	r2,r2,16
    2724:	e0bfff05 	stb	r2,-4(fp)
    2728:	00800034 	movhi	r2,0
    272c:	1099dc04 	addi	r2,r2,26480
    2730:	10800a17 	ldw	r2,40(r2)
    2734:	10800304 	addi	r2,r2,12
    2738:	10800017 	ldw	r2,0(r2)
    273c:	1004d63a 	srli	r2,r2,24
    2740:	e0bfff45 	stb	r2,-3(fp)
    2744:	00800034 	movhi	r2,0
    2748:	1099dc04 	addi	r2,r2,26480
    274c:	10800e17 	ldw	r2,56(r2)
    2750:	10800058 	cmpnei	r2,r2,1
    2754:	1000041e 	bne	r2,zero,2768 <alt_sys_init+0x180>
    2758:	00800034 	movhi	r2,0
    275c:	1099dc04 	addi	r2,r2,26480
    2760:	10001115 	stw	zero,68(r2)
    2764:	00000e06 	br	27a0 <alt_sys_init+0x1b8>
    2768:	00800034 	movhi	r2,0
    276c:	1099dc04 	addi	r2,r2,26480
    2770:	10800e17 	ldw	r2,56(r2)
    2774:	10800098 	cmpnei	r2,r2,2
    2778:	1000051e 	bne	r2,zero,2790 <alt_sys_init+0x1a8>
    277c:	00800034 	movhi	r2,0
    2780:	1099dc04 	addi	r2,r2,26480
    2784:	00c00044 	movi	r3,1
    2788:	10c01115 	stw	r3,68(r2)
    278c:	00000406 	br	27a0 <alt_sys_init+0x1b8>
    2790:	00800034 	movhi	r2,0
    2794:	1099dc04 	addi	r2,r2,26480
    2798:	00c00084 	movi	r3,2
    279c:	10c01115 	stw	r3,68(r2)
    27a0:	e0bfff03 	ldbu	r2,-4(fp)
    27a4:	00c00804 	movi	r3,32
    27a8:	1885c83a 	sub	r2,r3,r2
    27ac:	00ffffc4 	movi	r3,-1
    27b0:	1886d83a 	srl	r3,r3,r2
    27b4:	00800034 	movhi	r2,0
    27b8:	1099dc04 	addi	r2,r2,26480
    27bc:	10c01215 	stw	r3,72(r2)
    27c0:	e0ffff03 	ldbu	r3,-4(fp)
    27c4:	00800034 	movhi	r2,0
    27c8:	1099dc04 	addi	r2,r2,26480
    27cc:	10801117 	ldw	r2,68(r2)
    27d0:	1887883a 	add	r3,r3,r2
    27d4:	00800034 	movhi	r2,0
    27d8:	1099dc04 	addi	r2,r2,26480
    27dc:	10c01315 	stw	r3,76(r2)
    27e0:	e0bfff43 	ldbu	r2,-3(fp)
    27e4:	00c00804 	movi	r3,32
    27e8:	1885c83a 	sub	r2,r3,r2
    27ec:	00ffffc4 	movi	r3,-1
    27f0:	1886d83a 	srl	r3,r3,r2
    27f4:	00800034 	movhi	r2,0
    27f8:	1099dc04 	addi	r2,r2,26480
    27fc:	10c01415 	stw	r3,80(r2)
    2800:	01000034 	movhi	r4,0
    2804:	2119dc04 	addi	r4,r4,26480
    2808:	000257c0 	call	257c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( PIXEL_RGB_RESAMPLER, pixel_rgb_resampler);
    280c:	00800034 	movhi	r2,0
    2810:	1099f104 	addi	r2,r2,26564
    2814:	10800a17 	ldw	r2,40(r2)
    2818:	10800017 	ldw	r2,0(r2)
    281c:	10c003cc 	andi	r3,r2,15
    2820:	00800034 	movhi	r2,0
    2824:	1099f104 	addi	r2,r2,26564
    2828:	10c00b15 	stw	r3,44(r2)
    282c:	00800034 	movhi	r2,0
    2830:	1099f104 	addi	r2,r2,26564
    2834:	10800a17 	ldw	r2,40(r2)
    2838:	10800017 	ldw	r2,0(r2)
    283c:	1005d13a 	srai	r2,r2,4
    2840:	10c0004c 	andi	r3,r2,1
    2844:	00800034 	movhi	r2,0
    2848:	1099f104 	addi	r2,r2,26564
    284c:	10c00c15 	stw	r3,48(r2)
    2850:	00800034 	movhi	r2,0
    2854:	1099f104 	addi	r2,r2,26564
    2858:	10800a17 	ldw	r2,40(r2)
    285c:	10800017 	ldw	r2,0(r2)
    2860:	1005d17a 	srai	r2,r2,5
    2864:	10c0004c 	andi	r3,r2,1
    2868:	00800034 	movhi	r2,0
    286c:	1099f104 	addi	r2,r2,26564
    2870:	10c00d15 	stw	r3,52(r2)
    2874:	00800034 	movhi	r2,0
    2878:	1099f104 	addi	r2,r2,26564
    287c:	10800a17 	ldw	r2,40(r2)
    2880:	10800017 	ldw	r2,0(r2)
    2884:	1005d43a 	srai	r2,r2,16
    2888:	10c003cc 	andi	r3,r2,15
    288c:	00800034 	movhi	r2,0
    2890:	1099f104 	addi	r2,r2,26564
    2894:	10c00e15 	stw	r3,56(r2)
    2898:	00800034 	movhi	r2,0
    289c:	1099f104 	addi	r2,r2,26564
    28a0:	10800a17 	ldw	r2,40(r2)
    28a4:	10800017 	ldw	r2,0(r2)
    28a8:	1005d53a 	srai	r2,r2,20
    28ac:	10c0004c 	andi	r3,r2,1
    28b0:	00800034 	movhi	r2,0
    28b4:	1099f104 	addi	r2,r2,26564
    28b8:	10c00f15 	stw	r3,60(r2)
    28bc:	00800034 	movhi	r2,0
    28c0:	1099f104 	addi	r2,r2,26564
    28c4:	10800a17 	ldw	r2,40(r2)
    28c8:	10800017 	ldw	r2,0(r2)
    28cc:	1005d57a 	srai	r2,r2,21
    28d0:	10c0004c 	andi	r3,r2,1
    28d4:	00800034 	movhi	r2,0
    28d8:	1099f104 	addi	r2,r2,26564
    28dc:	10c01015 	stw	r3,64(r2)
    28e0:	01000034 	movhi	r4,0
    28e4:	2119f104 	addi	r4,r4,26564
    28e8:	000257c0 	call	257c <alt_dev_reg>
}
    28ec:	0001883a 	nop
    28f0:	e037883a 	mov	sp,fp
    28f4:	dfc00117 	ldw	ra,4(sp)
    28f8:	df000017 	ldw	fp,0(sp)
    28fc:	dec00204 	addi	sp,sp,8
    2900:	f800283a 	ret

00002904 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    2904:	defffa04 	addi	sp,sp,-24
    2908:	dfc00515 	stw	ra,20(sp)
    290c:	df000415 	stw	fp,16(sp)
    2910:	df000404 	addi	fp,sp,16
    2914:	e13ffd15 	stw	r4,-12(fp)
    2918:	e17ffe15 	stw	r5,-8(fp)
    291c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2920:	e0bffd17 	ldw	r2,-12(fp)
    2924:	10800017 	ldw	r2,0(r2)
    2928:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    292c:	e0bffc17 	ldw	r2,-16(fp)
    2930:	10c00a04 	addi	r3,r2,40
    2934:	e0bffd17 	ldw	r2,-12(fp)
    2938:	10800217 	ldw	r2,8(r2)
    293c:	100f883a 	mov	r7,r2
    2940:	e1bfff17 	ldw	r6,-4(fp)
    2944:	e17ffe17 	ldw	r5,-8(fp)
    2948:	1809883a 	mov	r4,r3
    294c:	0002f2c0 	call	2f2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    2950:	e037883a 	mov	sp,fp
    2954:	dfc00117 	ldw	ra,4(sp)
    2958:	df000017 	ldw	fp,0(sp)
    295c:	dec00204 	addi	sp,sp,8
    2960:	f800283a 	ret

00002964 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    2964:	defffa04 	addi	sp,sp,-24
    2968:	dfc00515 	stw	ra,20(sp)
    296c:	df000415 	stw	fp,16(sp)
    2970:	df000404 	addi	fp,sp,16
    2974:	e13ffd15 	stw	r4,-12(fp)
    2978:	e17ffe15 	stw	r5,-8(fp)
    297c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    2980:	e0bffd17 	ldw	r2,-12(fp)
    2984:	10800017 	ldw	r2,0(r2)
    2988:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    298c:	e0bffc17 	ldw	r2,-16(fp)
    2990:	10c00a04 	addi	r3,r2,40
    2994:	e0bffd17 	ldw	r2,-12(fp)
    2998:	10800217 	ldw	r2,8(r2)
    299c:	100f883a 	mov	r7,r2
    29a0:	e1bfff17 	ldw	r6,-4(fp)
    29a4:	e17ffe17 	ldw	r5,-8(fp)
    29a8:	1809883a 	mov	r4,r3
    29ac:	00031480 	call	3148 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    29b0:	e037883a 	mov	sp,fp
    29b4:	dfc00117 	ldw	ra,4(sp)
    29b8:	df000017 	ldw	fp,0(sp)
    29bc:	dec00204 	addi	sp,sp,8
    29c0:	f800283a 	ret

000029c4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    29c4:	defffc04 	addi	sp,sp,-16
    29c8:	dfc00315 	stw	ra,12(sp)
    29cc:	df000215 	stw	fp,8(sp)
    29d0:	df000204 	addi	fp,sp,8
    29d4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    29d8:	e0bfff17 	ldw	r2,-4(fp)
    29dc:	10800017 	ldw	r2,0(r2)
    29e0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    29e4:	e0bffe17 	ldw	r2,-8(fp)
    29e8:	10c00a04 	addi	r3,r2,40
    29ec:	e0bfff17 	ldw	r2,-4(fp)
    29f0:	10800217 	ldw	r2,8(r2)
    29f4:	100b883a 	mov	r5,r2
    29f8:	1809883a 	mov	r4,r3
    29fc:	0002dd40 	call	2dd4 <altera_avalon_jtag_uart_close>
}
    2a00:	e037883a 	mov	sp,fp
    2a04:	dfc00117 	ldw	ra,4(sp)
    2a08:	df000017 	ldw	fp,0(sp)
    2a0c:	dec00204 	addi	sp,sp,8
    2a10:	f800283a 	ret

00002a14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    2a14:	defffa04 	addi	sp,sp,-24
    2a18:	dfc00515 	stw	ra,20(sp)
    2a1c:	df000415 	stw	fp,16(sp)
    2a20:	df000404 	addi	fp,sp,16
    2a24:	e13ffd15 	stw	r4,-12(fp)
    2a28:	e17ffe15 	stw	r5,-8(fp)
    2a2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    2a30:	e0bffd17 	ldw	r2,-12(fp)
    2a34:	10800017 	ldw	r2,0(r2)
    2a38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    2a3c:	e0bffc17 	ldw	r2,-16(fp)
    2a40:	10800a04 	addi	r2,r2,40
    2a44:	e1bfff17 	ldw	r6,-4(fp)
    2a48:	e17ffe17 	ldw	r5,-8(fp)
    2a4c:	1009883a 	mov	r4,r2
    2a50:	0002e3c0 	call	2e3c <altera_avalon_jtag_uart_ioctl>
}
    2a54:	e037883a 	mov	sp,fp
    2a58:	dfc00117 	ldw	ra,4(sp)
    2a5c:	df000017 	ldw	fp,0(sp)
    2a60:	dec00204 	addi	sp,sp,8
    2a64:	f800283a 	ret

00002a68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    2a68:	defffa04 	addi	sp,sp,-24
    2a6c:	dfc00515 	stw	ra,20(sp)
    2a70:	df000415 	stw	fp,16(sp)
    2a74:	df000404 	addi	fp,sp,16
    2a78:	e13ffd15 	stw	r4,-12(fp)
    2a7c:	e17ffe15 	stw	r5,-8(fp)
    2a80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2a84:	e0bffd17 	ldw	r2,-12(fp)
    2a88:	00c00044 	movi	r3,1
    2a8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    2a90:	e0bffd17 	ldw	r2,-12(fp)
    2a94:	10800017 	ldw	r2,0(r2)
    2a98:	10800104 	addi	r2,r2,4
    2a9c:	1007883a 	mov	r3,r2
    2aa0:	e0bffd17 	ldw	r2,-12(fp)
    2aa4:	10800817 	ldw	r2,32(r2)
    2aa8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    2aac:	e0bffe17 	ldw	r2,-8(fp)
    2ab0:	e0ffff17 	ldw	r3,-4(fp)
    2ab4:	d8000015 	stw	zero,0(sp)
    2ab8:	e1fffd17 	ldw	r7,-12(fp)
    2abc:	01800034 	movhi	r6,0
    2ac0:	318aca04 	addi	r6,r6,11048
    2ac4:	180b883a 	mov	r5,r3
    2ac8:	1009883a 	mov	r4,r2
    2acc:	00021740 	call	2174 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    2ad0:	e0bffd17 	ldw	r2,-12(fp)
    2ad4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    2ad8:	e0bffd17 	ldw	r2,-12(fp)
    2adc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2ae0:	d0e5e817 	ldw	r3,-26720(gp)
    2ae4:	e1fffd17 	ldw	r7,-12(fp)
    2ae8:	01800034 	movhi	r6,0
    2aec:	318b4d04 	addi	r6,r6,11572
    2af0:	180b883a 	mov	r5,r3
    2af4:	1009883a 	mov	r4,r2
    2af8:	00043140 	call	4314 <alt_alarm_start>
    2afc:	1000040e 	bge	r2,zero,2b10 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    2b00:	e0fffd17 	ldw	r3,-12(fp)
    2b04:	00a00034 	movhi	r2,32768
    2b08:	10bfffc4 	addi	r2,r2,-1
    2b0c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    2b10:	0001883a 	nop
    2b14:	e037883a 	mov	sp,fp
    2b18:	dfc00117 	ldw	ra,4(sp)
    2b1c:	df000017 	ldw	fp,0(sp)
    2b20:	dec00204 	addi	sp,sp,8
    2b24:	f800283a 	ret

00002b28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    2b28:	defff804 	addi	sp,sp,-32
    2b2c:	df000715 	stw	fp,28(sp)
    2b30:	df000704 	addi	fp,sp,28
    2b34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    2b38:	e0bfff17 	ldw	r2,-4(fp)
    2b3c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    2b40:	e0bffb17 	ldw	r2,-20(fp)
    2b44:	10800017 	ldw	r2,0(r2)
    2b48:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2b4c:	e0bffc17 	ldw	r2,-16(fp)
    2b50:	10800104 	addi	r2,r2,4
    2b54:	10800037 	ldwio	r2,0(r2)
    2b58:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    2b5c:	e0bffd17 	ldw	r2,-12(fp)
    2b60:	1080c00c 	andi	r2,r2,768
    2b64:	10006d26 	beq	r2,zero,2d1c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    2b68:	e0bffd17 	ldw	r2,-12(fp)
    2b6c:	1080400c 	andi	r2,r2,256
    2b70:	10003526 	beq	r2,zero,2c48 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    2b74:	00800074 	movhi	r2,1
    2b78:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2b7c:	e0bffb17 	ldw	r2,-20(fp)
    2b80:	10800a17 	ldw	r2,40(r2)
    2b84:	10800044 	addi	r2,r2,1
    2b88:	1081ffcc 	andi	r2,r2,2047
    2b8c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    2b90:	e0bffb17 	ldw	r2,-20(fp)
    2b94:	10c00b17 	ldw	r3,44(r2)
    2b98:	e0bffe17 	ldw	r2,-8(fp)
    2b9c:	18801526 	beq	r3,r2,2bf4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    2ba0:	e0bffc17 	ldw	r2,-16(fp)
    2ba4:	10800037 	ldwio	r2,0(r2)
    2ba8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    2bac:	e0bff917 	ldw	r2,-28(fp)
    2bb0:	10a0000c 	andi	r2,r2,32768
    2bb4:	10001126 	beq	r2,zero,2bfc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    2bb8:	e0bffb17 	ldw	r2,-20(fp)
    2bbc:	10800a17 	ldw	r2,40(r2)
    2bc0:	e0fff917 	ldw	r3,-28(fp)
    2bc4:	1809883a 	mov	r4,r3
    2bc8:	e0fffb17 	ldw	r3,-20(fp)
    2bcc:	1885883a 	add	r2,r3,r2
    2bd0:	10800e04 	addi	r2,r2,56
    2bd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2bd8:	e0bffb17 	ldw	r2,-20(fp)
    2bdc:	10800a17 	ldw	r2,40(r2)
    2be0:	10800044 	addi	r2,r2,1
    2be4:	10c1ffcc 	andi	r3,r2,2047
    2be8:	e0bffb17 	ldw	r2,-20(fp)
    2bec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    2bf0:	003fe206 	br	2b7c <__alt_data_end+0xf8002b7c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    2bf4:	0001883a 	nop
    2bf8:	00000106 	br	2c00 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    2bfc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    2c00:	e0bff917 	ldw	r2,-28(fp)
    2c04:	10bfffec 	andhi	r2,r2,65535
    2c08:	10000f26 	beq	r2,zero,2c48 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    2c0c:	e0bffb17 	ldw	r2,-20(fp)
    2c10:	10c00817 	ldw	r3,32(r2)
    2c14:	00bfff84 	movi	r2,-2
    2c18:	1886703a 	and	r3,r3,r2
    2c1c:	e0bffb17 	ldw	r2,-20(fp)
    2c20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    2c24:	e0bffc17 	ldw	r2,-16(fp)
    2c28:	10800104 	addi	r2,r2,4
    2c2c:	1007883a 	mov	r3,r2
    2c30:	e0bffb17 	ldw	r2,-20(fp)
    2c34:	10800817 	ldw	r2,32(r2)
    2c38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2c3c:	e0bffc17 	ldw	r2,-16(fp)
    2c40:	10800104 	addi	r2,r2,4
    2c44:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    2c48:	e0bffd17 	ldw	r2,-12(fp)
    2c4c:	1080800c 	andi	r2,r2,512
    2c50:	103fbe26 	beq	r2,zero,2b4c <__alt_data_end+0xf8002b4c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    2c54:	e0bffd17 	ldw	r2,-12(fp)
    2c58:	1004d43a 	srli	r2,r2,16
    2c5c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    2c60:	00001406 	br	2cb4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    2c64:	e0bffc17 	ldw	r2,-16(fp)
    2c68:	e0fffb17 	ldw	r3,-20(fp)
    2c6c:	18c00d17 	ldw	r3,52(r3)
    2c70:	e13ffb17 	ldw	r4,-20(fp)
    2c74:	20c7883a 	add	r3,r4,r3
    2c78:	18c20e04 	addi	r3,r3,2104
    2c7c:	18c00003 	ldbu	r3,0(r3)
    2c80:	18c03fcc 	andi	r3,r3,255
    2c84:	18c0201c 	xori	r3,r3,128
    2c88:	18ffe004 	addi	r3,r3,-128
    2c8c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2c90:	e0bffb17 	ldw	r2,-20(fp)
    2c94:	10800d17 	ldw	r2,52(r2)
    2c98:	10800044 	addi	r2,r2,1
    2c9c:	10c1ffcc 	andi	r3,r2,2047
    2ca0:	e0bffb17 	ldw	r2,-20(fp)
    2ca4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    2ca8:	e0bffa17 	ldw	r2,-24(fp)
    2cac:	10bfffc4 	addi	r2,r2,-1
    2cb0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    2cb4:	e0bffa17 	ldw	r2,-24(fp)
    2cb8:	10000526 	beq	r2,zero,2cd0 <altera_avalon_jtag_uart_irq+0x1a8>
    2cbc:	e0bffb17 	ldw	r2,-20(fp)
    2cc0:	10c00d17 	ldw	r3,52(r2)
    2cc4:	e0bffb17 	ldw	r2,-20(fp)
    2cc8:	10800c17 	ldw	r2,48(r2)
    2ccc:	18bfe51e 	bne	r3,r2,2c64 <__alt_data_end+0xf8002c64>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    2cd0:	e0bffa17 	ldw	r2,-24(fp)
    2cd4:	103f9d26 	beq	r2,zero,2b4c <__alt_data_end+0xf8002b4c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    2cd8:	e0bffb17 	ldw	r2,-20(fp)
    2cdc:	10c00817 	ldw	r3,32(r2)
    2ce0:	00bfff44 	movi	r2,-3
    2ce4:	1886703a 	and	r3,r3,r2
    2ce8:	e0bffb17 	ldw	r2,-20(fp)
    2cec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    2cf0:	e0bffb17 	ldw	r2,-20(fp)
    2cf4:	10800017 	ldw	r2,0(r2)
    2cf8:	10800104 	addi	r2,r2,4
    2cfc:	1007883a 	mov	r3,r2
    2d00:	e0bffb17 	ldw	r2,-20(fp)
    2d04:	10800817 	ldw	r2,32(r2)
    2d08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    2d0c:	e0bffc17 	ldw	r2,-16(fp)
    2d10:	10800104 	addi	r2,r2,4
    2d14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    2d18:	003f8c06 	br	2b4c <__alt_data_end+0xf8002b4c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    2d1c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    2d20:	0001883a 	nop
    2d24:	e037883a 	mov	sp,fp
    2d28:	df000017 	ldw	fp,0(sp)
    2d2c:	dec00104 	addi	sp,sp,4
    2d30:	f800283a 	ret

00002d34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    2d34:	defff804 	addi	sp,sp,-32
    2d38:	df000715 	stw	fp,28(sp)
    2d3c:	df000704 	addi	fp,sp,28
    2d40:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    2d44:	e0bffb17 	ldw	r2,-20(fp)
    2d48:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    2d4c:	e0bff917 	ldw	r2,-28(fp)
    2d50:	10800017 	ldw	r2,0(r2)
    2d54:	10800104 	addi	r2,r2,4
    2d58:	10800037 	ldwio	r2,0(r2)
    2d5c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    2d60:	e0bffa17 	ldw	r2,-24(fp)
    2d64:	1081000c 	andi	r2,r2,1024
    2d68:	10000b26 	beq	r2,zero,2d98 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    2d6c:	e0bff917 	ldw	r2,-28(fp)
    2d70:	10800017 	ldw	r2,0(r2)
    2d74:	10800104 	addi	r2,r2,4
    2d78:	1007883a 	mov	r3,r2
    2d7c:	e0bff917 	ldw	r2,-28(fp)
    2d80:	10800817 	ldw	r2,32(r2)
    2d84:	10810014 	ori	r2,r2,1024
    2d88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    2d8c:	e0bff917 	ldw	r2,-28(fp)
    2d90:	10000915 	stw	zero,36(r2)
    2d94:	00000a06 	br	2dc0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    2d98:	e0bff917 	ldw	r2,-28(fp)
    2d9c:	10c00917 	ldw	r3,36(r2)
    2da0:	00a00034 	movhi	r2,32768
    2da4:	10bfff04 	addi	r2,r2,-4
    2da8:	10c00536 	bltu	r2,r3,2dc0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    2dac:	e0bff917 	ldw	r2,-28(fp)
    2db0:	10800917 	ldw	r2,36(r2)
    2db4:	10c00044 	addi	r3,r2,1
    2db8:	e0bff917 	ldw	r2,-28(fp)
    2dbc:	10c00915 	stw	r3,36(r2)
    2dc0:	d0a5e817 	ldw	r2,-26720(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    2dc4:	e037883a 	mov	sp,fp
    2dc8:	df000017 	ldw	fp,0(sp)
    2dcc:	dec00104 	addi	sp,sp,4
    2dd0:	f800283a 	ret

00002dd4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    2dd4:	defffd04 	addi	sp,sp,-12
    2dd8:	df000215 	stw	fp,8(sp)
    2ddc:	df000204 	addi	fp,sp,8
    2de0:	e13ffe15 	stw	r4,-8(fp)
    2de4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    2de8:	00000506 	br	2e00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    2dec:	e0bfff17 	ldw	r2,-4(fp)
    2df0:	1090000c 	andi	r2,r2,16384
    2df4:	10000226 	beq	r2,zero,2e00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    2df8:	00bffd44 	movi	r2,-11
    2dfc:	00000b06 	br	2e2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    2e00:	e0bffe17 	ldw	r2,-8(fp)
    2e04:	10c00d17 	ldw	r3,52(r2)
    2e08:	e0bffe17 	ldw	r2,-8(fp)
    2e0c:	10800c17 	ldw	r2,48(r2)
    2e10:	18800526 	beq	r3,r2,2e28 <altera_avalon_jtag_uart_close+0x54>
    2e14:	e0bffe17 	ldw	r2,-8(fp)
    2e18:	10c00917 	ldw	r3,36(r2)
    2e1c:	e0bffe17 	ldw	r2,-8(fp)
    2e20:	10800117 	ldw	r2,4(r2)
    2e24:	18bff136 	bltu	r3,r2,2dec <__alt_data_end+0xf8002dec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    2e28:	0005883a 	mov	r2,zero
}
    2e2c:	e037883a 	mov	sp,fp
    2e30:	df000017 	ldw	fp,0(sp)
    2e34:	dec00104 	addi	sp,sp,4
    2e38:	f800283a 	ret

00002e3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    2e3c:	defffa04 	addi	sp,sp,-24
    2e40:	df000515 	stw	fp,20(sp)
    2e44:	df000504 	addi	fp,sp,20
    2e48:	e13ffd15 	stw	r4,-12(fp)
    2e4c:	e17ffe15 	stw	r5,-8(fp)
    2e50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    2e54:	00bff9c4 	movi	r2,-25
    2e58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    2e5c:	e0bffe17 	ldw	r2,-8(fp)
    2e60:	10da8060 	cmpeqi	r3,r2,27137
    2e64:	1800031e 	bne	r3,zero,2e74 <altera_avalon_jtag_uart_ioctl+0x38>
    2e68:	109a80a0 	cmpeqi	r2,r2,27138
    2e6c:	1000181e 	bne	r2,zero,2ed0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    2e70:	00002906 	br	2f18 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    2e74:	e0bffd17 	ldw	r2,-12(fp)
    2e78:	10c00117 	ldw	r3,4(r2)
    2e7c:	00a00034 	movhi	r2,32768
    2e80:	10bfffc4 	addi	r2,r2,-1
    2e84:	18802126 	beq	r3,r2,2f0c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    2e88:	e0bfff17 	ldw	r2,-4(fp)
    2e8c:	10800017 	ldw	r2,0(r2)
    2e90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    2e94:	e0bffc17 	ldw	r2,-16(fp)
    2e98:	10800090 	cmplti	r2,r2,2
    2e9c:	1000061e 	bne	r2,zero,2eb8 <altera_avalon_jtag_uart_ioctl+0x7c>
    2ea0:	e0fffc17 	ldw	r3,-16(fp)
    2ea4:	00a00034 	movhi	r2,32768
    2ea8:	10bfffc4 	addi	r2,r2,-1
    2eac:	18800226 	beq	r3,r2,2eb8 <altera_avalon_jtag_uart_ioctl+0x7c>
    2eb0:	e0bffc17 	ldw	r2,-16(fp)
    2eb4:	00000206 	br	2ec0 <altera_avalon_jtag_uart_ioctl+0x84>
    2eb8:	00a00034 	movhi	r2,32768
    2ebc:	10bfff84 	addi	r2,r2,-2
    2ec0:	e0fffd17 	ldw	r3,-12(fp)
    2ec4:	18800115 	stw	r2,4(r3)
      rc = 0;
    2ec8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    2ecc:	00000f06 	br	2f0c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    2ed0:	e0bffd17 	ldw	r2,-12(fp)
    2ed4:	10c00117 	ldw	r3,4(r2)
    2ed8:	00a00034 	movhi	r2,32768
    2edc:	10bfffc4 	addi	r2,r2,-1
    2ee0:	18800c26 	beq	r3,r2,2f14 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    2ee4:	e0bffd17 	ldw	r2,-12(fp)
    2ee8:	10c00917 	ldw	r3,36(r2)
    2eec:	e0bffd17 	ldw	r2,-12(fp)
    2ef0:	10800117 	ldw	r2,4(r2)
    2ef4:	1885803a 	cmpltu	r2,r3,r2
    2ef8:	10c03fcc 	andi	r3,r2,255
    2efc:	e0bfff17 	ldw	r2,-4(fp)
    2f00:	10c00015 	stw	r3,0(r2)
      rc = 0;
    2f04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    2f08:	00000206 	br	2f14 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    2f0c:	0001883a 	nop
    2f10:	00000106 	br	2f18 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    2f14:	0001883a 	nop

  default:
    break;
  }

  return rc;
    2f18:	e0bffb17 	ldw	r2,-20(fp)
}
    2f1c:	e037883a 	mov	sp,fp
    2f20:	df000017 	ldw	fp,0(sp)
    2f24:	dec00104 	addi	sp,sp,4
    2f28:	f800283a 	ret

00002f2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    2f2c:	defff304 	addi	sp,sp,-52
    2f30:	dfc00c15 	stw	ra,48(sp)
    2f34:	df000b15 	stw	fp,44(sp)
    2f38:	df000b04 	addi	fp,sp,44
    2f3c:	e13ffc15 	stw	r4,-16(fp)
    2f40:	e17ffd15 	stw	r5,-12(fp)
    2f44:	e1bffe15 	stw	r6,-8(fp)
    2f48:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    2f4c:	e0bffd17 	ldw	r2,-12(fp)
    2f50:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    2f54:	00004706 	br	3074 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    2f58:	e0bffc17 	ldw	r2,-16(fp)
    2f5c:	10800a17 	ldw	r2,40(r2)
    2f60:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    2f64:	e0bffc17 	ldw	r2,-16(fp)
    2f68:	10800b17 	ldw	r2,44(r2)
    2f6c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    2f70:	e0fff717 	ldw	r3,-36(fp)
    2f74:	e0bff817 	ldw	r2,-32(fp)
    2f78:	18800536 	bltu	r3,r2,2f90 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    2f7c:	e0fff717 	ldw	r3,-36(fp)
    2f80:	e0bff817 	ldw	r2,-32(fp)
    2f84:	1885c83a 	sub	r2,r3,r2
    2f88:	e0bff615 	stw	r2,-40(fp)
    2f8c:	00000406 	br	2fa0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    2f90:	00c20004 	movi	r3,2048
    2f94:	e0bff817 	ldw	r2,-32(fp)
    2f98:	1885c83a 	sub	r2,r3,r2
    2f9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    2fa0:	e0bff617 	ldw	r2,-40(fp)
    2fa4:	10001e26 	beq	r2,zero,3020 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    2fa8:	e0fffe17 	ldw	r3,-8(fp)
    2fac:	e0bff617 	ldw	r2,-40(fp)
    2fb0:	1880022e 	bgeu	r3,r2,2fbc <altera_avalon_jtag_uart_read+0x90>
        n = space;
    2fb4:	e0bffe17 	ldw	r2,-8(fp)
    2fb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    2fbc:	e0bffc17 	ldw	r2,-16(fp)
    2fc0:	10c00e04 	addi	r3,r2,56
    2fc4:	e0bff817 	ldw	r2,-32(fp)
    2fc8:	1885883a 	add	r2,r3,r2
    2fcc:	e1bff617 	ldw	r6,-40(fp)
    2fd0:	100b883a 	mov	r5,r2
    2fd4:	e13ff517 	ldw	r4,-44(fp)
    2fd8:	00050e80 	call	50e8 <memcpy>
      ptr   += n;
    2fdc:	e0fff517 	ldw	r3,-44(fp)
    2fe0:	e0bff617 	ldw	r2,-40(fp)
    2fe4:	1885883a 	add	r2,r3,r2
    2fe8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    2fec:	e0fffe17 	ldw	r3,-8(fp)
    2ff0:	e0bff617 	ldw	r2,-40(fp)
    2ff4:	1885c83a 	sub	r2,r3,r2
    2ff8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    2ffc:	e0fff817 	ldw	r3,-32(fp)
    3000:	e0bff617 	ldw	r2,-40(fp)
    3004:	1885883a 	add	r2,r3,r2
    3008:	10c1ffcc 	andi	r3,r2,2047
    300c:	e0bffc17 	ldw	r2,-16(fp)
    3010:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    3014:	e0bffe17 	ldw	r2,-8(fp)
    3018:	00bfcf16 	blt	zero,r2,2f58 <__alt_data_end+0xf8002f58>
    301c:	00000106 	br	3024 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    3020:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    3024:	e0fff517 	ldw	r3,-44(fp)
    3028:	e0bffd17 	ldw	r2,-12(fp)
    302c:	1880141e 	bne	r3,r2,3080 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    3030:	e0bfff17 	ldw	r2,-4(fp)
    3034:	1090000c 	andi	r2,r2,16384
    3038:	1000131e 	bne	r2,zero,3088 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    303c:	0001883a 	nop
    3040:	e0bffc17 	ldw	r2,-16(fp)
    3044:	10c00a17 	ldw	r3,40(r2)
    3048:	e0bff717 	ldw	r2,-36(fp)
    304c:	1880051e 	bne	r3,r2,3064 <altera_avalon_jtag_uart_read+0x138>
    3050:	e0bffc17 	ldw	r2,-16(fp)
    3054:	10c00917 	ldw	r3,36(r2)
    3058:	e0bffc17 	ldw	r2,-16(fp)
    305c:	10800117 	ldw	r2,4(r2)
    3060:	18bff736 	bltu	r3,r2,3040 <__alt_data_end+0xf8003040>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    3064:	e0bffc17 	ldw	r2,-16(fp)
    3068:	10c00a17 	ldw	r3,40(r2)
    306c:	e0bff717 	ldw	r2,-36(fp)
    3070:	18800726 	beq	r3,r2,3090 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    3074:	e0bffe17 	ldw	r2,-8(fp)
    3078:	00bfb716 	blt	zero,r2,2f58 <__alt_data_end+0xf8002f58>
    307c:	00000506 	br	3094 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    3080:	0001883a 	nop
    3084:	00000306 	br	3094 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    3088:	0001883a 	nop
    308c:	00000106 	br	3094 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    3090:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    3094:	e0fff517 	ldw	r3,-44(fp)
    3098:	e0bffd17 	ldw	r2,-12(fp)
    309c:	18801826 	beq	r3,r2,3100 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    30a0:	0005303a 	rdctl	r2,status
    30a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    30a8:	e0fffb17 	ldw	r3,-20(fp)
    30ac:	00bfff84 	movi	r2,-2
    30b0:	1884703a 	and	r2,r3,r2
    30b4:	1001703a 	wrctl	status,r2
  
  return context;
    30b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    30bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    30c0:	e0bffc17 	ldw	r2,-16(fp)
    30c4:	10800817 	ldw	r2,32(r2)
    30c8:	10c00054 	ori	r3,r2,1
    30cc:	e0bffc17 	ldw	r2,-16(fp)
    30d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    30d4:	e0bffc17 	ldw	r2,-16(fp)
    30d8:	10800017 	ldw	r2,0(r2)
    30dc:	10800104 	addi	r2,r2,4
    30e0:	1007883a 	mov	r3,r2
    30e4:	e0bffc17 	ldw	r2,-16(fp)
    30e8:	10800817 	ldw	r2,32(r2)
    30ec:	18800035 	stwio	r2,0(r3)
    30f0:	e0bffa17 	ldw	r2,-24(fp)
    30f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    30f8:	e0bff917 	ldw	r2,-28(fp)
    30fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    3100:	e0fff517 	ldw	r3,-44(fp)
    3104:	e0bffd17 	ldw	r2,-12(fp)
    3108:	18800426 	beq	r3,r2,311c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    310c:	e0fff517 	ldw	r3,-44(fp)
    3110:	e0bffd17 	ldw	r2,-12(fp)
    3114:	1885c83a 	sub	r2,r3,r2
    3118:	00000606 	br	3134 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    311c:	e0bfff17 	ldw	r2,-4(fp)
    3120:	1090000c 	andi	r2,r2,16384
    3124:	10000226 	beq	r2,zero,3130 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    3128:	00bffd44 	movi	r2,-11
    312c:	00000106 	br	3134 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    3130:	00bffec4 	movi	r2,-5
}
    3134:	e037883a 	mov	sp,fp
    3138:	dfc00117 	ldw	ra,4(sp)
    313c:	df000017 	ldw	fp,0(sp)
    3140:	dec00204 	addi	sp,sp,8
    3144:	f800283a 	ret

00003148 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    3148:	defff304 	addi	sp,sp,-52
    314c:	dfc00c15 	stw	ra,48(sp)
    3150:	df000b15 	stw	fp,44(sp)
    3154:	df000b04 	addi	fp,sp,44
    3158:	e13ffc15 	stw	r4,-16(fp)
    315c:	e17ffd15 	stw	r5,-12(fp)
    3160:	e1bffe15 	stw	r6,-8(fp)
    3164:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    3168:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    316c:	e0bffd17 	ldw	r2,-12(fp)
    3170:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    3174:	00003706 	br	3254 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    3178:	e0bffc17 	ldw	r2,-16(fp)
    317c:	10800c17 	ldw	r2,48(r2)
    3180:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    3184:	e0bffc17 	ldw	r2,-16(fp)
    3188:	10800d17 	ldw	r2,52(r2)
    318c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    3190:	e0fff917 	ldw	r3,-28(fp)
    3194:	e0bff517 	ldw	r2,-44(fp)
    3198:	1880062e 	bgeu	r3,r2,31b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    319c:	e0fff517 	ldw	r3,-44(fp)
    31a0:	e0bff917 	ldw	r2,-28(fp)
    31a4:	1885c83a 	sub	r2,r3,r2
    31a8:	10bfffc4 	addi	r2,r2,-1
    31ac:	e0bff615 	stw	r2,-40(fp)
    31b0:	00000b06 	br	31e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    31b4:	e0bff517 	ldw	r2,-44(fp)
    31b8:	10000526 	beq	r2,zero,31d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    31bc:	00c20004 	movi	r3,2048
    31c0:	e0bff917 	ldw	r2,-28(fp)
    31c4:	1885c83a 	sub	r2,r3,r2
    31c8:	e0bff615 	stw	r2,-40(fp)
    31cc:	00000406 	br	31e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    31d0:	00c1ffc4 	movi	r3,2047
    31d4:	e0bff917 	ldw	r2,-28(fp)
    31d8:	1885c83a 	sub	r2,r3,r2
    31dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    31e0:	e0bff617 	ldw	r2,-40(fp)
    31e4:	10001e26 	beq	r2,zero,3260 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    31e8:	e0fffe17 	ldw	r3,-8(fp)
    31ec:	e0bff617 	ldw	r2,-40(fp)
    31f0:	1880022e 	bgeu	r3,r2,31fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    31f4:	e0bffe17 	ldw	r2,-8(fp)
    31f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    31fc:	e0bffc17 	ldw	r2,-16(fp)
    3200:	10c20e04 	addi	r3,r2,2104
    3204:	e0bff917 	ldw	r2,-28(fp)
    3208:	1885883a 	add	r2,r3,r2
    320c:	e1bff617 	ldw	r6,-40(fp)
    3210:	e17ffd17 	ldw	r5,-12(fp)
    3214:	1009883a 	mov	r4,r2
    3218:	00050e80 	call	50e8 <memcpy>
      ptr   += n;
    321c:	e0fffd17 	ldw	r3,-12(fp)
    3220:	e0bff617 	ldw	r2,-40(fp)
    3224:	1885883a 	add	r2,r3,r2
    3228:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    322c:	e0fffe17 	ldw	r3,-8(fp)
    3230:	e0bff617 	ldw	r2,-40(fp)
    3234:	1885c83a 	sub	r2,r3,r2
    3238:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    323c:	e0fff917 	ldw	r3,-28(fp)
    3240:	e0bff617 	ldw	r2,-40(fp)
    3244:	1885883a 	add	r2,r3,r2
    3248:	10c1ffcc 	andi	r3,r2,2047
    324c:	e0bffc17 	ldw	r2,-16(fp)
    3250:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    3254:	e0bffe17 	ldw	r2,-8(fp)
    3258:	00bfc716 	blt	zero,r2,3178 <__alt_data_end+0xf8003178>
    325c:	00000106 	br	3264 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    3260:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3264:	0005303a 	rdctl	r2,status
    3268:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    326c:	e0fffb17 	ldw	r3,-20(fp)
    3270:	00bfff84 	movi	r2,-2
    3274:	1884703a 	and	r2,r3,r2
    3278:	1001703a 	wrctl	status,r2
  
  return context;
    327c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    3280:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3284:	e0bffc17 	ldw	r2,-16(fp)
    3288:	10800817 	ldw	r2,32(r2)
    328c:	10c00094 	ori	r3,r2,2
    3290:	e0bffc17 	ldw	r2,-16(fp)
    3294:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3298:	e0bffc17 	ldw	r2,-16(fp)
    329c:	10800017 	ldw	r2,0(r2)
    32a0:	10800104 	addi	r2,r2,4
    32a4:	1007883a 	mov	r3,r2
    32a8:	e0bffc17 	ldw	r2,-16(fp)
    32ac:	10800817 	ldw	r2,32(r2)
    32b0:	18800035 	stwio	r2,0(r3)
    32b4:	e0bffa17 	ldw	r2,-24(fp)
    32b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    32bc:	e0bff817 	ldw	r2,-32(fp)
    32c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    32c4:	e0bffe17 	ldw	r2,-8(fp)
    32c8:	0080100e 	bge	zero,r2,330c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    32cc:	e0bfff17 	ldw	r2,-4(fp)
    32d0:	1090000c 	andi	r2,r2,16384
    32d4:	1000101e 	bne	r2,zero,3318 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    32d8:	0001883a 	nop
    32dc:	e0bffc17 	ldw	r2,-16(fp)
    32e0:	10c00d17 	ldw	r3,52(r2)
    32e4:	e0bff517 	ldw	r2,-44(fp)
    32e8:	1880051e 	bne	r3,r2,3300 <altera_avalon_jtag_uart_write+0x1b8>
    32ec:	e0bffc17 	ldw	r2,-16(fp)
    32f0:	10c00917 	ldw	r3,36(r2)
    32f4:	e0bffc17 	ldw	r2,-16(fp)
    32f8:	10800117 	ldw	r2,4(r2)
    32fc:	18bff736 	bltu	r3,r2,32dc <__alt_data_end+0xf80032dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    3300:	e0bffc17 	ldw	r2,-16(fp)
    3304:	10800917 	ldw	r2,36(r2)
    3308:	1000051e 	bne	r2,zero,3320 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    330c:	e0bffe17 	ldw	r2,-8(fp)
    3310:	00bfd016 	blt	zero,r2,3254 <__alt_data_end+0xf8003254>
    3314:	00000306 	br	3324 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    3318:	0001883a 	nop
    331c:	00000106 	br	3324 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    3320:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    3324:	e0fffd17 	ldw	r3,-12(fp)
    3328:	e0bff717 	ldw	r2,-36(fp)
    332c:	18800426 	beq	r3,r2,3340 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    3330:	e0fffd17 	ldw	r3,-12(fp)
    3334:	e0bff717 	ldw	r2,-36(fp)
    3338:	1885c83a 	sub	r2,r3,r2
    333c:	00000606 	br	3358 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    3340:	e0bfff17 	ldw	r2,-4(fp)
    3344:	1090000c 	andi	r2,r2,16384
    3348:	10000226 	beq	r2,zero,3354 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    334c:	00bffd44 	movi	r2,-11
    3350:	00000106 	br	3358 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    3354:	00bffec4 	movi	r2,-5
}
    3358:	e037883a 	mov	sp,fp
    335c:	dfc00117 	ldw	ra,4(sp)
    3360:	df000017 	ldw	fp,0(sp)
    3364:	dec00204 	addi	sp,sp,8
    3368:	f800283a 	ret

0000336c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    336c:	defffa04 	addi	sp,sp,-24
    3370:	dfc00515 	stw	ra,20(sp)
    3374:	df000415 	stw	fp,16(sp)
    3378:	df000404 	addi	fp,sp,16
    337c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    3380:	0007883a 	mov	r3,zero
    3384:	e0bfff17 	ldw	r2,-4(fp)
    3388:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    338c:	e0bfff17 	ldw	r2,-4(fp)
    3390:	10800104 	addi	r2,r2,4
    3394:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3398:	0005303a 	rdctl	r2,status
    339c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    33a0:	e0fffd17 	ldw	r3,-12(fp)
    33a4:	00bfff84 	movi	r2,-2
    33a8:	1884703a 	and	r2,r3,r2
    33ac:	1001703a 	wrctl	status,r2
  
  return context;
    33b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    33b4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    33b8:	0004cb80 	call	4cb8 <alt_tick>
    33bc:	e0bffc17 	ldw	r2,-16(fp)
    33c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    33c4:	e0bffe17 	ldw	r2,-8(fp)
    33c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    33cc:	0001883a 	nop
    33d0:	e037883a 	mov	sp,fp
    33d4:	dfc00117 	ldw	ra,4(sp)
    33d8:	df000017 	ldw	fp,0(sp)
    33dc:	dec00204 	addi	sp,sp,8
    33e0:	f800283a 	ret

000033e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    33e4:	defff804 	addi	sp,sp,-32
    33e8:	dfc00715 	stw	ra,28(sp)
    33ec:	df000615 	stw	fp,24(sp)
    33f0:	df000604 	addi	fp,sp,24
    33f4:	e13ffc15 	stw	r4,-16(fp)
    33f8:	e17ffd15 	stw	r5,-12(fp)
    33fc:	e1bffe15 	stw	r6,-8(fp)
    3400:	e1ffff15 	stw	r7,-4(fp)
    3404:	e0bfff17 	ldw	r2,-4(fp)
    3408:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    340c:	d0a5e817 	ldw	r2,-26720(gp)
    3410:	1000021e 	bne	r2,zero,341c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    3414:	e0bffb17 	ldw	r2,-20(fp)
    3418:	d0a5e815 	stw	r2,-26720(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    341c:	e0bffc17 	ldw	r2,-16(fp)
    3420:	10800104 	addi	r2,r2,4
    3424:	00c001c4 	movi	r3,7
    3428:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    342c:	d8000015 	stw	zero,0(sp)
    3430:	e1fffc17 	ldw	r7,-16(fp)
    3434:	01800034 	movhi	r6,0
    3438:	318cdb04 	addi	r6,r6,13164
    343c:	e17ffe17 	ldw	r5,-8(fp)
    3440:	e13ffd17 	ldw	r4,-12(fp)
    3444:	00021740 	call	2174 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    3448:	0001883a 	nop
    344c:	e037883a 	mov	sp,fp
    3450:	dfc00117 	ldw	ra,4(sp)
    3454:	df000017 	ldw	fp,0(sp)
    3458:	dec00204 	addi	sp,sp,8
    345c:	f800283a 	ret

00003460 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    3460:	defffc04 	addi	sp,sp,-16
    3464:	dfc00315 	stw	ra,12(sp)
    3468:	df000215 	stw	fp,8(sp)
    346c:	df000204 	addi	fp,sp,8
    3470:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    3474:	d1600704 	addi	r5,gp,-32740
    3478:	e13fff17 	ldw	r4,-4(fp)
    347c:	00047600 	call	4760 <alt_find_dev>
    3480:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    3484:	e0bffe17 	ldw	r2,-8(fp)
}
    3488:	e037883a 	mov	sp,fp
    348c:	dfc00117 	ldw	ra,4(sp)
    3490:	df000017 	ldw	fp,0(sp)
    3494:	dec00204 	addi	sp,sp,8
    3498:	f800283a 	ret

0000349c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
    349c:	defffa04 	addi	sp,sp,-24
    34a0:	df000515 	stw	fp,20(sp)
    34a4:	df000504 	addi	fp,sp,20
    34a8:	e13ffc15 	stw	r4,-16(fp)
    34ac:	e17ffd15 	stw	r5,-12(fp)
    34b0:	e1bffe15 	stw	r6,-8(fp)
    34b4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    34b8:	e0bffc17 	ldw	r2,-16(fp)
    34bc:	10800f17 	ldw	r2,60(r2)
    34c0:	e0fffe17 	ldw	r3,-8(fp)
    34c4:	1880042e 	bgeu	r3,r2,34d8 <alt_up_pixel_buffer_dma_draw+0x3c>
    34c8:	e0bffc17 	ldw	r2,-16(fp)
    34cc:	10801017 	ldw	r2,64(r2)
    34d0:	e0ffff17 	ldw	r3,-4(fp)
    34d4:	18800236 	bltu	r3,r2,34e0 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
    34d8:	00bfffc4 	movi	r2,-1
    34dc:	00005006 	br	3620 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
    34e0:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    34e4:	e0bffc17 	ldw	r2,-16(fp)
    34e8:	10800d17 	ldw	r2,52(r2)
    34ec:	1000151e 	bne	r2,zero,3544 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    34f0:	e0bffc17 	ldw	r2,-16(fp)
    34f4:	10c01217 	ldw	r3,72(r2)
    34f8:	e0bffe17 	ldw	r2,-8(fp)
    34fc:	1886703a 	and	r3,r3,r2
    3500:	e0bffc17 	ldw	r2,-16(fp)
    3504:	10801117 	ldw	r2,68(r2)
    3508:	1884983a 	sll	r2,r3,r2
    350c:	e0fffb17 	ldw	r3,-20(fp)
    3510:	1885883a 	add	r2,r3,r2
    3514:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    3518:	e0bffc17 	ldw	r2,-16(fp)
    351c:	10c01417 	ldw	r3,80(r2)
    3520:	e0bfff17 	ldw	r2,-4(fp)
    3524:	1886703a 	and	r3,r3,r2
    3528:	e0bffc17 	ldw	r2,-16(fp)
    352c:	10801317 	ldw	r2,76(r2)
    3530:	1884983a 	sll	r2,r3,r2
    3534:	e0fffb17 	ldw	r3,-20(fp)
    3538:	1885883a 	add	r2,r3,r2
    353c:	e0bffb15 	stw	r2,-20(fp)
    3540:	00001706 	br	35a0 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    3544:	e0bffc17 	ldw	r2,-16(fp)
    3548:	10c01217 	ldw	r3,72(r2)
    354c:	e0bffe17 	ldw	r2,-8(fp)
    3550:	1886703a 	and	r3,r3,r2
    3554:	e0bffc17 	ldw	r2,-16(fp)
    3558:	10801117 	ldw	r2,68(r2)
    355c:	1884983a 	sll	r2,r3,r2
    3560:	e0fffb17 	ldw	r3,-20(fp)
    3564:	1885883a 	add	r2,r3,r2
    3568:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    356c:	e0bffc17 	ldw	r2,-16(fp)
    3570:	10c01417 	ldw	r3,80(r2)
    3574:	e0bfff17 	ldw	r2,-4(fp)
    3578:	1886703a 	and	r3,r3,r2
    357c:	e0bffc17 	ldw	r2,-16(fp)
    3580:	10800f17 	ldw	r2,60(r2)
    3584:	1887383a 	mul	r3,r3,r2
    3588:	e0bffc17 	ldw	r2,-16(fp)
    358c:	10801117 	ldw	r2,68(r2)
    3590:	1884983a 	sll	r2,r3,r2
    3594:	e0fffb17 	ldw	r3,-20(fp)
    3598:	1885883a 	add	r2,r3,r2
    359c:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    35a0:	e0bffc17 	ldw	r2,-16(fp)
    35a4:	10800e17 	ldw	r2,56(r2)
    35a8:	10800058 	cmpnei	r2,r2,1
    35ac:	1000081e 	bne	r2,zero,35d0 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    35b0:	e0bffc17 	ldw	r2,-16(fp)
    35b4:	10c00c17 	ldw	r3,48(r2)
    35b8:	e0bffb17 	ldw	r2,-20(fp)
    35bc:	1885883a 	add	r2,r3,r2
    35c0:	1007883a 	mov	r3,r2
    35c4:	e0bffd17 	ldw	r2,-12(fp)
    35c8:	18800025 	stbio	r2,0(r3)
    35cc:	00001306 	br	361c <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    35d0:	e0bffc17 	ldw	r2,-16(fp)
    35d4:	10800e17 	ldw	r2,56(r2)
    35d8:	10800098 	cmpnei	r2,r2,2
    35dc:	1000081e 	bne	r2,zero,3600 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    35e0:	e0bffc17 	ldw	r2,-16(fp)
    35e4:	10c00c17 	ldw	r3,48(r2)
    35e8:	e0bffb17 	ldw	r2,-20(fp)
    35ec:	1885883a 	add	r2,r3,r2
    35f0:	1007883a 	mov	r3,r2
    35f4:	e0bffd17 	ldw	r2,-12(fp)
    35f8:	1880002d 	sthio	r2,0(r3)
    35fc:	00000706 	br	361c <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    3600:	e0bffc17 	ldw	r2,-16(fp)
    3604:	10c00c17 	ldw	r3,48(r2)
    3608:	e0bffb17 	ldw	r2,-20(fp)
    360c:	1885883a 	add	r2,r3,r2
    3610:	1007883a 	mov	r3,r2
    3614:	e0bffd17 	ldw	r2,-12(fp)
    3618:	18800035 	stwio	r2,0(r3)
	}

	return 0;
    361c:	0005883a 	mov	r2,zero
}
    3620:	e037883a 	mov	sp,fp
    3624:	df000017 	ldw	fp,0(sp)
    3628:	dec00104 	addi	sp,sp,4
    362c:	f800283a 	ret

00003630 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
    3630:	defffd04 	addi	sp,sp,-12
    3634:	df000215 	stw	fp,8(sp)
    3638:	df000204 	addi	fp,sp,8
    363c:	e13ffe15 	stw	r4,-8(fp)
    3640:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    3644:	e0bffe17 	ldw	r2,-8(fp)
    3648:	10800a17 	ldw	r2,40(r2)
    364c:	10800104 	addi	r2,r2,4
    3650:	1007883a 	mov	r3,r2
    3654:	e0bfff17 	ldw	r2,-4(fp)
    3658:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    365c:	e0bffe17 	ldw	r2,-8(fp)
    3660:	10800a17 	ldw	r2,40(r2)
    3664:	10800104 	addi	r2,r2,4
    3668:	10800037 	ldwio	r2,0(r2)
    366c:	1007883a 	mov	r3,r2
    3670:	e0bffe17 	ldw	r2,-8(fp)
    3674:	10c00c15 	stw	r3,48(r2)
	return 0;
    3678:	0005883a 	mov	r2,zero
}
    367c:	e037883a 	mov	sp,fp
    3680:	df000017 	ldw	fp,0(sp)
    3684:	dec00104 	addi	sp,sp,4
    3688:	f800283a 	ret

0000368c <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
    368c:	defffd04 	addi	sp,sp,-12
    3690:	df000215 	stw	fp,8(sp)
    3694:	dc000115 	stw	r16,4(sp)
    3698:	df000204 	addi	fp,sp,8
    369c:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    36a0:	e0bffe17 	ldw	r2,-8(fp)
    36a4:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    36a8:	e0bffe17 	ldw	r2,-8(fp)
    36ac:	10800a17 	ldw	r2,40(r2)
    36b0:	1007883a 	mov	r3,r2
    36b4:	00800044 	movi	r2,1
    36b8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    36bc:	e0bffe17 	ldw	r2,-8(fp)
    36c0:	10c00b17 	ldw	r3,44(r2)
    36c4:	e0bffe17 	ldw	r2,-8(fp)
    36c8:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
    36cc:	e0bffe17 	ldw	r2,-8(fp)
    36d0:	14000b15 	stw	r16,44(r2)
	return 0;
    36d4:	0005883a 	mov	r2,zero
}
    36d8:	e6ffff04 	addi	sp,fp,-4
    36dc:	df000117 	ldw	fp,4(sp)
    36e0:	dc000017 	ldw	r16,0(sp)
    36e4:	dec00204 	addi	sp,sp,8
    36e8:	f800283a 	ret

000036ec <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
    36ec:	defffe04 	addi	sp,sp,-8
    36f0:	df000115 	stw	fp,4(sp)
    36f4:	df000104 	addi	fp,sp,4
    36f8:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    36fc:	e0bfff17 	ldw	r2,-4(fp)
    3700:	10800a17 	ldw	r2,40(r2)
    3704:	10800304 	addi	r2,r2,12
    3708:	10800037 	ldwio	r2,0(r2)
    370c:	1080004c 	andi	r2,r2,1
}
    3710:	e037883a 	mov	sp,fp
    3714:	df000017 	ldw	fp,0(sp)
    3718:	dec00104 	addi	sp,sp,4
    371c:	f800283a 	ret

00003720 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
    3720:	defff704 	addi	sp,sp,-36
    3724:	df000815 	stw	fp,32(sp)
    3728:	dd400715 	stw	r21,28(sp)
    372c:	dd000615 	stw	r20,24(sp)
    3730:	dcc00515 	stw	r19,20(sp)
    3734:	dc800415 	stw	r18,16(sp)
    3738:	dc400315 	stw	r17,12(sp)
    373c:	dc000215 	stw	r16,8(sp)
    3740:	df000804 	addi	fp,sp,32
    3744:	e13ff815 	stw	r4,-32(fp)
    3748:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    374c:	e0bff917 	ldw	r2,-28(fp)
    3750:	10800058 	cmpnei	r2,r2,1
    3754:	1000031e 	bne	r2,zero,3764 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
    3758:	e0bff817 	ldw	r2,-32(fp)
    375c:	14400c17 	ldw	r17,48(r2)
    3760:	00000206 	br	376c <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
    3764:	e0bff817 	ldw	r2,-32(fp)
    3768:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
    376c:	e0bff817 	ldw	r2,-32(fp)
    3770:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    3774:	e0bff817 	ldw	r2,-32(fp)
    3778:	10800e17 	ldw	r2,56(r2)
    377c:	10800098 	cmpnei	r2,r2,2
    3780:	1000031e 	bne	r2,zero,3790 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
    3784:	8405883a 	add	r2,r16,r16
    3788:	1021883a 	mov	r16,r2
    378c:	00000306 	br	379c <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
    3790:	8405883a 	add	r2,r16,r16
    3794:	1085883a 	add	r2,r2,r2
    3798:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
    379c:	e0bff817 	ldw	r2,-32(fp)
    37a0:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    37a4:	e0bff817 	ldw	r2,-32(fp)
    37a8:	10800d17 	ldw	r2,52(r2)
    37ac:	1000111e 	bne	r2,zero,37f4 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    37b0:	e0bff817 	ldw	r2,-32(fp)
    37b4:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
    37b8:	0029883a 	mov	r20,zero
    37bc:	00000b06 	br	37ec <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
    37c0:	0027883a 	mov	r19,zero
    37c4:	00000406 	br	37d8 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
    37c8:	9c45883a 	add	r2,r19,r17
    37cc:	0007883a 	mov	r3,zero
    37d0:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    37d4:	9cc00104 	addi	r19,r19,4
    37d8:	9c3ffb36 	bltu	r19,r16,37c8 <__alt_data_end+0xf80037c8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    37dc:	00800044 	movi	r2,1
    37e0:	1544983a 	sll	r2,r2,r21
    37e4:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    37e8:	a5000044 	addi	r20,r20,1
    37ec:	a4bff436 	bltu	r20,r18,37c0 <__alt_data_end+0xf80037c0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    37f0:	00000a06 	br	381c <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    37f4:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
    37f8:	0021883a 	mov	r16,zero
    37fc:	00000506 	br	3814 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
    3800:	8005883a 	mov	r2,r16
    3804:	1445883a 	add	r2,r2,r17
    3808:	0007883a 	mov	r3,zero
    380c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    3810:	84000104 	addi	r16,r16,4
    3814:	8005883a 	mov	r2,r16
    3818:	14bff936 	bltu	r2,r18,3800 <__alt_data_end+0xf8003800>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
    381c:	0001883a 	nop
    3820:	e6fffa04 	addi	sp,fp,-24
    3824:	df000617 	ldw	fp,24(sp)
    3828:	dd400517 	ldw	r21,20(sp)
    382c:	dd000417 	ldw	r20,16(sp)
    3830:	dcc00317 	ldw	r19,12(sp)
    3834:	dc800217 	ldw	r18,8(sp)
    3838:	dc400117 	ldw	r17,4(sp)
    383c:	dc000017 	ldw	r16,0(sp)
    3840:	dec00704 	addi	sp,sp,28
    3844:	f800283a 	ret

00003848 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    3848:	defff304 	addi	sp,sp,-52
    384c:	df000c15 	stw	fp,48(sp)
    3850:	ddc00b15 	stw	r23,44(sp)
    3854:	dd800a15 	stw	r22,40(sp)
    3858:	dd400915 	stw	r21,36(sp)
    385c:	dd000815 	stw	r20,32(sp)
    3860:	dcc00715 	stw	r19,28(sp)
    3864:	dc800615 	stw	r18,24(sp)
    3868:	dc400515 	stw	r17,20(sp)
    386c:	dc000415 	stw	r16,16(sp)
    3870:	df000c04 	addi	fp,sp,48
    3874:	e13ff415 	stw	r4,-48(fp)
    3878:	e17ff515 	stw	r5,-44(fp)
    387c:	e1bff615 	stw	r6,-40(fp)
    3880:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    3884:	e0bff417 	ldw	r2,-48(fp)
    3888:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    388c:	e0bff417 	ldw	r2,-48(fp)
    3890:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    3894:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
    3898:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
    389c:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
    38a0:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
    38a4:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    38a8:	a580032e 	bgeu	r20,r22,38b8 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
    38ac:	b02b883a 	mov	r21,r22
		l_x = r_x;
    38b0:	a02d883a 	mov	r22,r20
		r_x = temp;
    38b4:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
    38b8:	9c40032e 	bgeu	r19,r17,38c8 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
    38bc:	882b883a 	mov	r21,r17
		t_y = b_y;
    38c0:	9823883a 	mov	r17,r19
		b_y = temp;
    38c4:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    38c8:	b480892e 	bgeu	r22,r18,3af0 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
    38cc:	8c00882e 	bgeu	r17,r16,3af0 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    38d0:	a4800136 	bltu	r20,r18,38d8 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
    38d4:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    38d8:	9c000136 	bltu	r19,r16,38e0 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
    38dc:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    38e0:	e0800317 	ldw	r2,12(fp)
    38e4:	10800058 	cmpnei	r2,r2,1
    38e8:	1000031e 	bne	r2,zero,38f8 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
    38ec:	e0bff417 	ldw	r2,-48(fp)
    38f0:	14000c17 	ldw	r16,48(r2)
    38f4:	00000206 	br	3900 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
    38f8:	e0bff417 	ldw	r2,-48(fp)
    38fc:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    3900:	e0bff417 	ldw	r2,-48(fp)
    3904:	10800d17 	ldw	r2,52(r2)
    3908:	10003c1e 	bne	r2,zero,39fc <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    390c:	e0bff417 	ldw	r2,-48(fp)
    3910:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
    3914:	8d44983a 	sll	r2,r17,r21
    3918:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    391c:	e0bff417 	ldw	r2,-48(fp)
    3920:	10800e17 	ldw	r2,56(r2)
    3924:	10800058 	cmpnei	r2,r2,1
    3928:	10000f1e 	bne	r2,zero,3968 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
    392c:	8825883a 	mov	r18,r17
    3930:	00000b06 	br	3960 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
    3934:	b023883a 	mov	r17,r22
    3938:	00000406 	br	394c <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
    393c:	8c05883a 	add	r2,r17,r16
    3940:	b807883a 	mov	r3,r23
    3944:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    3948:	8c400044 	addi	r17,r17,1
    394c:	a47ffb2e 	bgeu	r20,r17,393c <__alt_data_end+0xf800393c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    3950:	00800044 	movi	r2,1
    3954:	1544983a 	sll	r2,r2,r21
    3958:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    395c:	94800044 	addi	r18,r18,1
    3960:	9cbff42e 	bgeu	r19,r18,3934 <__alt_data_end+0xf8003934>
    3964:	00006306 	br	3af4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    3968:	e0bff417 	ldw	r2,-48(fp)
    396c:	10800e17 	ldw	r2,56(r2)
    3970:	10800098 	cmpnei	r2,r2,2
    3974:	1000101e 	bne	r2,zero,39b8 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
    3978:	8825883a 	mov	r18,r17
    397c:	00000c06 	br	39b0 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
    3980:	b023883a 	mov	r17,r22
    3984:	00000506 	br	399c <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    3988:	8c45883a 	add	r2,r17,r17
    398c:	1405883a 	add	r2,r2,r16
    3990:	b807883a 	mov	r3,r23
    3994:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    3998:	8c400044 	addi	r17,r17,1
    399c:	a47ffa2e 	bgeu	r20,r17,3988 <__alt_data_end+0xf8003988>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    39a0:	00800044 	movi	r2,1
    39a4:	1544983a 	sll	r2,r2,r21
    39a8:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    39ac:	94800044 	addi	r18,r18,1
    39b0:	9cbff32e 	bgeu	r19,r18,3980 <__alt_data_end+0xf8003980>
    39b4:	00004f06 	br	3af4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    39b8:	8825883a 	mov	r18,r17
    39bc:	00000d06 	br	39f4 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
    39c0:	b023883a 	mov	r17,r22
    39c4:	00000606 	br	39e0 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    39c8:	8c45883a 	add	r2,r17,r17
    39cc:	1085883a 	add	r2,r2,r2
    39d0:	1405883a 	add	r2,r2,r16
    39d4:	b807883a 	mov	r3,r23
    39d8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    39dc:	8c400044 	addi	r17,r17,1
    39e0:	a47ff92e 	bgeu	r20,r17,39c8 <__alt_data_end+0xf80039c8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    39e4:	00800044 	movi	r2,1
    39e8:	1544983a 	sll	r2,r2,r21
    39ec:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    39f0:	94800044 	addi	r18,r18,1
    39f4:	9cbff22e 	bgeu	r19,r18,39c0 <__alt_data_end+0xf80039c0>
    39f8:	00003e06 	br	3af4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    39fc:	e0bff417 	ldw	r2,-48(fp)
    3a00:	10800e17 	ldw	r2,56(r2)
    3a04:	10800058 	cmpnei	r2,r2,1
    3a08:	10000f1e 	bne	r2,zero,3a48 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
    3a0c:	8c85383a 	mul	r2,r17,r18
    3a10:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    3a14:	882b883a 	mov	r21,r17
    3a18:	00000906 	br	3a40 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
    3a1c:	b023883a 	mov	r17,r22
    3a20:	00000406 	br	3a34 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
    3a24:	8c05883a 	add	r2,r17,r16
    3a28:	b807883a 	mov	r3,r23
    3a2c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    3a30:	8c400044 	addi	r17,r17,1
    3a34:	a47ffb2e 	bgeu	r20,r17,3a24 <__alt_data_end+0xf8003a24>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    3a38:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    3a3c:	ad400044 	addi	r21,r21,1
    3a40:	9d7ff62e 	bgeu	r19,r21,3a1c <__alt_data_end+0xf8003a1c>
    3a44:	00002b06 	br	3af4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    3a48:	e0bff417 	ldw	r2,-48(fp)
    3a4c:	10800e17 	ldw	r2,56(r2)
    3a50:	10800098 	cmpnei	r2,r2,2
    3a54:	1000121e 	bne	r2,zero,3aa0 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
    3a58:	9485883a 	add	r2,r18,r18
    3a5c:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    3a60:	8c85383a 	mul	r2,r17,r18
    3a64:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    3a68:	882b883a 	mov	r21,r17
    3a6c:	00000a06 	br	3a98 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
    3a70:	b023883a 	mov	r17,r22
    3a74:	00000506 	br	3a8c <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    3a78:	8c45883a 	add	r2,r17,r17
    3a7c:	1405883a 	add	r2,r2,r16
    3a80:	b807883a 	mov	r3,r23
    3a84:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    3a88:	8c400044 	addi	r17,r17,1
    3a8c:	a47ffa2e 	bgeu	r20,r17,3a78 <__alt_data_end+0xf8003a78>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    3a90:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    3a94:	ad400044 	addi	r21,r21,1
    3a98:	9d7ff52e 	bgeu	r19,r21,3a70 <__alt_data_end+0xf8003a70>
    3a9c:	00001506 	br	3af4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    3aa0:	9485883a 	add	r2,r18,r18
    3aa4:	1085883a 	add	r2,r2,r2
    3aa8:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
    3aac:	8c85383a 	mul	r2,r17,r18
    3ab0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    3ab4:	882b883a 	mov	r21,r17
    3ab8:	00000b06 	br	3ae8 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
    3abc:	b023883a 	mov	r17,r22
    3ac0:	00000606 	br	3adc <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    3ac4:	8c45883a 	add	r2,r17,r17
    3ac8:	1085883a 	add	r2,r2,r2
    3acc:	1405883a 	add	r2,r2,r16
    3ad0:	b807883a 	mov	r3,r23
    3ad4:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    3ad8:	8c400044 	addi	r17,r17,1
    3adc:	a47ff92e 	bgeu	r20,r17,3ac4 <__alt_data_end+0xf8003ac4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    3ae0:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    3ae4:	ad400044 	addi	r21,r21,1
    3ae8:	9d7ff42e 	bgeu	r19,r21,3abc <__alt_data_end+0xf8003abc>
    3aec:	00000106 	br	3af4 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    3af0:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
    3af4:	e6fff804 	addi	sp,fp,-32
    3af8:	df000817 	ldw	fp,32(sp)
    3afc:	ddc00717 	ldw	r23,28(sp)
    3b00:	dd800617 	ldw	r22,24(sp)
    3b04:	dd400517 	ldw	r21,20(sp)
    3b08:	dd000417 	ldw	r20,16(sp)
    3b0c:	dcc00317 	ldw	r19,12(sp)
    3b10:	dc800217 	ldw	r18,8(sp)
    3b14:	dc400117 	ldw	r17,4(sp)
    3b18:	dc000017 	ldw	r16,0(sp)
    3b1c:	dec00904 	addi	sp,sp,36
    3b20:	f800283a 	ret

00003b24 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    3b24:	defff404 	addi	sp,sp,-48
    3b28:	df000b15 	stw	fp,44(sp)
    3b2c:	dd800a15 	stw	r22,40(sp)
    3b30:	dd400915 	stw	r21,36(sp)
    3b34:	dd000815 	stw	r20,32(sp)
    3b38:	dcc00715 	stw	r19,28(sp)
    3b3c:	dc800615 	stw	r18,24(sp)
    3b40:	dc400515 	stw	r17,20(sp)
    3b44:	dc000415 	stw	r16,16(sp)
    3b48:	df000b04 	addi	fp,sp,44
    3b4c:	e13ff515 	stw	r4,-44(fp)
    3b50:	e17ff615 	stw	r5,-40(fp)
    3b54:	e1bff715 	stw	r6,-36(fp)
    3b58:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    3b5c:	e0bff517 	ldw	r2,-44(fp)
    3b60:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    3b64:	e0bff517 	ldw	r2,-44(fp)
    3b68:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
    3b6c:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
    3b70:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
    3b74:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
    3b78:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
    3b7c:	9c40032e 	bgeu	r19,r17,3b8c <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
    3b80:	882d883a 	mov	r22,r17
		l_x = r_x;
    3b84:	9823883a 	mov	r17,r19
		r_x = temp;
    3b88:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    3b8c:	8c805d2e 	bgeu	r17,r18,3d04 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
    3b90:	a4005c2e 	bgeu	r20,r16,3d04 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    3b94:	9c800136 	bltu	r19,r18,3b9c <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
    3b98:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    3b9c:	e0800217 	ldw	r2,8(fp)
    3ba0:	10800058 	cmpnei	r2,r2,1
    3ba4:	1000031e 	bne	r2,zero,3bb4 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
    3ba8:	e0bff517 	ldw	r2,-44(fp)
    3bac:	14000c17 	ldw	r16,48(r2)
    3bb0:	00000206 	br	3bbc <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
    3bb4:	e0bff517 	ldw	r2,-44(fp)
    3bb8:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    3bbc:	e0bff517 	ldw	r2,-44(fp)
    3bc0:	10800d17 	ldw	r2,52(r2)
    3bc4:	1000231e 	bne	r2,zero,3c54 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    3bc8:	e0bff517 	ldw	r2,-44(fp)
    3bcc:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
    3bd0:	a484983a 	sll	r2,r20,r18
    3bd4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    3bd8:	e0bff517 	ldw	r2,-44(fp)
    3bdc:	10800e17 	ldw	r2,56(r2)
    3be0:	10800058 	cmpnei	r2,r2,1
    3be4:	1000071e 	bne	r2,zero,3c04 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
    3be8:	00000406 	br	3bfc <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
    3bec:	8c05883a 	add	r2,r17,r16
    3bf0:	a807883a 	mov	r3,r21
    3bf4:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    3bf8:	8c400044 	addi	r17,r17,1
    3bfc:	9c7ffb2e 	bgeu	r19,r17,3bec <__alt_data_end+0xf8003bec>
    3c00:	00004106 	br	3d08 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    3c04:	e0bff517 	ldw	r2,-44(fp)
    3c08:	10800e17 	ldw	r2,56(r2)
    3c0c:	10800098 	cmpnei	r2,r2,2
    3c10:	10000e1e 	bne	r2,zero,3c4c <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
    3c14:	00000506 	br	3c2c <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    3c18:	8c45883a 	add	r2,r17,r17
    3c1c:	1405883a 	add	r2,r2,r16
    3c20:	a807883a 	mov	r3,r21
    3c24:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    3c28:	8c400044 	addi	r17,r17,1
    3c2c:	9c7ffa2e 	bgeu	r19,r17,3c18 <__alt_data_end+0xf8003c18>
    3c30:	00003506 	br	3d08 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    3c34:	8c45883a 	add	r2,r17,r17
    3c38:	1085883a 	add	r2,r2,r2
    3c3c:	1405883a 	add	r2,r2,r16
    3c40:	a807883a 	mov	r3,r21
    3c44:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    3c48:	8c400044 	addi	r17,r17,1
    3c4c:	9c7ff92e 	bgeu	r19,r17,3c34 <__alt_data_end+0xf8003c34>
    3c50:	00002d06 	br	3d08 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    3c54:	e0bff517 	ldw	r2,-44(fp)
    3c58:	10800e17 	ldw	r2,56(r2)
    3c5c:	10800058 	cmpnei	r2,r2,1
    3c60:	1000091e 	bne	r2,zero,3c88 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
    3c64:	a485383a 	mul	r2,r20,r18
    3c68:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    3c6c:	00000406 	br	3c80 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
    3c70:	8c05883a 	add	r2,r17,r16
    3c74:	a807883a 	mov	r3,r21
    3c78:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    3c7c:	8c400044 	addi	r17,r17,1
    3c80:	9c7ffb2e 	bgeu	r19,r17,3c70 <__alt_data_end+0xf8003c70>
    3c84:	00002006 	br	3d08 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    3c88:	e0bff517 	ldw	r2,-44(fp)
    3c8c:	10800e17 	ldw	r2,56(r2)
    3c90:	10800098 	cmpnei	r2,r2,2
    3c94:	10000c1e 	bne	r2,zero,3cc8 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
    3c98:	9485883a 	add	r2,r18,r18
    3c9c:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    3ca0:	a485383a 	mul	r2,r20,r18
    3ca4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    3ca8:	00000506 	br	3cc0 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    3cac:	8c45883a 	add	r2,r17,r17
    3cb0:	1405883a 	add	r2,r2,r16
    3cb4:	a807883a 	mov	r3,r21
    3cb8:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    3cbc:	8c400044 	addi	r17,r17,1
    3cc0:	9c7ffa2e 	bgeu	r19,r17,3cac <__alt_data_end+0xf8003cac>
    3cc4:	00001006 	br	3d08 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    3cc8:	9485883a 	add	r2,r18,r18
    3ccc:	1085883a 	add	r2,r2,r2
    3cd0:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
    3cd4:	a485383a 	mul	r2,r20,r18
    3cd8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
    3cdc:	00000606 	br	3cf8 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    3ce0:	8c45883a 	add	r2,r17,r17
    3ce4:	1085883a 	add	r2,r2,r2
    3ce8:	1405883a 	add	r2,r2,r16
    3cec:	a807883a 	mov	r3,r21
    3cf0:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    3cf4:	8c400044 	addi	r17,r17,1
    3cf8:	9c7ff92e 	bgeu	r19,r17,3ce0 <__alt_data_end+0xf8003ce0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
    3cfc:	84a1883a 	add	r16,r16,r18
    3d00:	00000106 	br	3d08 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    3d04:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
    3d08:	e6fff904 	addi	sp,fp,-28
    3d0c:	df000717 	ldw	fp,28(sp)
    3d10:	dd800617 	ldw	r22,24(sp)
    3d14:	dd400517 	ldw	r21,20(sp)
    3d18:	dd000417 	ldw	r20,16(sp)
    3d1c:	dcc00317 	ldw	r19,12(sp)
    3d20:	dc800217 	ldw	r18,8(sp)
    3d24:	dc400117 	ldw	r17,4(sp)
    3d28:	dc000017 	ldw	r16,0(sp)
    3d2c:	dec00804 	addi	sp,sp,32
    3d30:	f800283a 	ret

00003d34 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    3d34:	defff404 	addi	sp,sp,-48
    3d38:	df000b15 	stw	fp,44(sp)
    3d3c:	dd800a15 	stw	r22,40(sp)
    3d40:	dd400915 	stw	r21,36(sp)
    3d44:	dd000815 	stw	r20,32(sp)
    3d48:	dcc00715 	stw	r19,28(sp)
    3d4c:	dc800615 	stw	r18,24(sp)
    3d50:	dc400515 	stw	r17,20(sp)
    3d54:	dc000415 	stw	r16,16(sp)
    3d58:	df000b04 	addi	fp,sp,44
    3d5c:	e13ff515 	stw	r4,-44(fp)
    3d60:	e17ff615 	stw	r5,-40(fp)
    3d64:	e1bff715 	stw	r6,-36(fp)
    3d68:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    3d6c:	e0bff517 	ldw	r2,-44(fp)
    3d70:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    3d74:	e0bff517 	ldw	r2,-44(fp)
    3d78:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
    3d7c:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
    3d80:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
    3d84:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
    3d88:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
    3d8c:	9d00032e 	bgeu	r19,r20,3d9c <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
    3d90:	a02b883a 	mov	r21,r20
		t_y = b_y;
    3d94:	9829883a 	mov	r20,r19
		b_y = temp;
    3d98:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    3d9c:	94406c2e 	bgeu	r18,r17,3f50 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
    3da0:	a4006b2e 	bgeu	r20,r16,3f50 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    3da4:	9c000136 	bltu	r19,r16,3dac <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
    3da8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    3dac:	e0800217 	ldw	r2,8(fp)
    3db0:	10800058 	cmpnei	r2,r2,1
    3db4:	1000031e 	bne	r2,zero,3dc4 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
    3db8:	e0bff517 	ldw	r2,-44(fp)
    3dbc:	14000c17 	ldw	r16,48(r2)
    3dc0:	00000206 	br	3dcc <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
    3dc4:	e0bff517 	ldw	r2,-44(fp)
    3dc8:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    3dcc:	e0bff517 	ldw	r2,-44(fp)
    3dd0:	10800d17 	ldw	r2,52(r2)
    3dd4:	1000301e 	bne	r2,zero,3e98 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    3dd8:	e0bff517 	ldw	r2,-44(fp)
    3ddc:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
    3de0:	a544983a 	sll	r2,r20,r21
    3de4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    3de8:	e0bff517 	ldw	r2,-44(fp)
    3dec:	10800e17 	ldw	r2,56(r2)
    3df0:	10800058 	cmpnei	r2,r2,1
    3df4:	10000b1e 	bne	r2,zero,3e24 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
    3df8:	a023883a 	mov	r17,r20
    3dfc:	00000706 	br	3e1c <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    3e00:	9405883a 	add	r2,r18,r16
    3e04:	b007883a 	mov	r3,r22
    3e08:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
    3e0c:	00800044 	movi	r2,1
    3e10:	1544983a 	sll	r2,r2,r21
    3e14:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    3e18:	8c400044 	addi	r17,r17,1
    3e1c:	9c7ff82e 	bgeu	r19,r17,3e00 <__alt_data_end+0xf8003e00>
    3e20:	00004c06 	br	3f54 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    3e24:	e0bff517 	ldw	r2,-44(fp)
    3e28:	10800e17 	ldw	r2,56(r2)
    3e2c:	10800098 	cmpnei	r2,r2,2
    3e30:	10000c1e 	bne	r2,zero,3e64 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
    3e34:	a023883a 	mov	r17,r20
    3e38:	00000806 	br	3e5c <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    3e3c:	9485883a 	add	r2,r18,r18
    3e40:	1405883a 	add	r2,r2,r16
    3e44:	b007883a 	mov	r3,r22
    3e48:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
    3e4c:	00800044 	movi	r2,1
    3e50:	1544983a 	sll	r2,r2,r21
    3e54:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    3e58:	8c400044 	addi	r17,r17,1
    3e5c:	9c7ff72e 	bgeu	r19,r17,3e3c <__alt_data_end+0xf8003e3c>
    3e60:	00003c06 	br	3f54 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    3e64:	a023883a 	mov	r17,r20
    3e68:	00000906 	br	3e90 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    3e6c:	9485883a 	add	r2,r18,r18
    3e70:	1085883a 	add	r2,r2,r2
    3e74:	1405883a 	add	r2,r2,r16
    3e78:	b007883a 	mov	r3,r22
    3e7c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
    3e80:	00800044 	movi	r2,1
    3e84:	1544983a 	sll	r2,r2,r21
    3e88:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    3e8c:	8c400044 	addi	r17,r17,1
    3e90:	9c7ff62e 	bgeu	r19,r17,3e6c <__alt_data_end+0xf8003e6c>
    3e94:	00002f06 	br	3f54 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    3e98:	e0bff517 	ldw	r2,-44(fp)
    3e9c:	10800e17 	ldw	r2,56(r2)
    3ea0:	10800058 	cmpnei	r2,r2,1
    3ea4:	10000a1e 	bne	r2,zero,3ed0 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
    3ea8:	a445383a 	mul	r2,r20,r17
    3eac:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    3eb0:	00000506 	br	3ec8 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    3eb4:	9405883a 	add	r2,r18,r16
    3eb8:	b007883a 	mov	r3,r22
    3ebc:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
    3ec0:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    3ec4:	a5000044 	addi	r20,r20,1
    3ec8:	9d3ffa2e 	bgeu	r19,r20,3eb4 <__alt_data_end+0xf8003eb4>
    3ecc:	00002106 	br	3f54 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    3ed0:	e0bff517 	ldw	r2,-44(fp)
    3ed4:	10800e17 	ldw	r2,56(r2)
    3ed8:	10800098 	cmpnei	r2,r2,2
    3edc:	10000d1e 	bne	r2,zero,3f14 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
    3ee0:	8c45883a 	add	r2,r17,r17
    3ee4:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    3ee8:	a445383a 	mul	r2,r20,r17
    3eec:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    3ef0:	00000606 	br	3f0c <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    3ef4:	9485883a 	add	r2,r18,r18
    3ef8:	1405883a 	add	r2,r2,r16
    3efc:	b007883a 	mov	r3,r22
    3f00:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
    3f04:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    3f08:	a5000044 	addi	r20,r20,1
    3f0c:	9d3ff92e 	bgeu	r19,r20,3ef4 <__alt_data_end+0xf8003ef4>
    3f10:	00001006 	br	3f54 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    3f14:	8c45883a 	add	r2,r17,r17
    3f18:	1085883a 	add	r2,r2,r2
    3f1c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
    3f20:	a445383a 	mul	r2,r20,r17
    3f24:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
    3f28:	00000706 	br	3f48 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    3f2c:	9485883a 	add	r2,r18,r18
    3f30:	1085883a 	add	r2,r2,r2
    3f34:	1405883a 	add	r2,r2,r16
    3f38:	b007883a 	mov	r3,r22
    3f3c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
    3f40:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    3f44:	a5000044 	addi	r20,r20,1
    3f48:	9d3ff82e 	bgeu	r19,r20,3f2c <__alt_data_end+0xf8003f2c>
    3f4c:	00000106 	br	3f54 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
    3f50:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
    3f54:	e6fff904 	addi	sp,fp,-28
    3f58:	df000717 	ldw	fp,28(sp)
    3f5c:	dd800617 	ldw	r22,24(sp)
    3f60:	dd400517 	ldw	r21,20(sp)
    3f64:	dd000417 	ldw	r20,16(sp)
    3f68:	dcc00317 	ldw	r19,12(sp)
    3f6c:	dc800217 	ldw	r18,8(sp)
    3f70:	dc400117 	ldw	r17,4(sp)
    3f74:	dc000017 	ldw	r16,0(sp)
    3f78:	dec00804 	addi	sp,sp,32
    3f7c:	f800283a 	ret

00003f80 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    3f80:	defff804 	addi	sp,sp,-32
    3f84:	dfc00715 	stw	ra,28(sp)
    3f88:	df000615 	stw	fp,24(sp)
    3f8c:	df000604 	addi	fp,sp,24
    3f90:	e13ffc15 	stw	r4,-16(fp)
    3f94:	e17ffd15 	stw	r5,-12(fp)
    3f98:	e1bffe15 	stw	r6,-8(fp)
    3f9c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    3fa0:	e0800417 	ldw	r2,16(fp)
    3fa4:	d8800115 	stw	r2,4(sp)
    3fa8:	e0800317 	ldw	r2,12(fp)
    3fac:	d8800015 	stw	r2,0(sp)
    3fb0:	e1fffe17 	ldw	r7,-8(fp)
    3fb4:	e1bfff17 	ldw	r6,-4(fp)
    3fb8:	e17ffd17 	ldw	r5,-12(fp)
    3fbc:	e13ffc17 	ldw	r4,-16(fp)
    3fc0:	0003b240 	call	3b24 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    3fc4:	e0800417 	ldw	r2,16(fp)
    3fc8:	d8800115 	stw	r2,4(sp)
    3fcc:	e0800317 	ldw	r2,12(fp)
    3fd0:	d8800015 	stw	r2,0(sp)
    3fd4:	e1c00217 	ldw	r7,8(fp)
    3fd8:	e1bfff17 	ldw	r6,-4(fp)
    3fdc:	e17ffd17 	ldw	r5,-12(fp)
    3fe0:	e13ffc17 	ldw	r4,-16(fp)
    3fe4:	0003b240 	call	3b24 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    3fe8:	e0800417 	ldw	r2,16(fp)
    3fec:	d8800115 	stw	r2,4(sp)
    3ff0:	e0800317 	ldw	r2,12(fp)
    3ff4:	d8800015 	stw	r2,0(sp)
    3ff8:	e1c00217 	ldw	r7,8(fp)
    3ffc:	e1bffe17 	ldw	r6,-8(fp)
    4000:	e17ffd17 	ldw	r5,-12(fp)
    4004:	e13ffc17 	ldw	r4,-16(fp)
    4008:	0003d340 	call	3d34 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    400c:	e0800417 	ldw	r2,16(fp)
    4010:	d8800115 	stw	r2,4(sp)
    4014:	e0800317 	ldw	r2,12(fp)
    4018:	d8800015 	stw	r2,0(sp)
    401c:	e1c00217 	ldw	r7,8(fp)
    4020:	e1bffe17 	ldw	r6,-8(fp)
    4024:	e17fff17 	ldw	r5,-4(fp)
    4028:	e13ffc17 	ldw	r4,-16(fp)
    402c:	0003d340 	call	3d34 <alt_up_pixel_buffer_dma_draw_vline>
}
    4030:	0001883a 	nop
    4034:	e037883a 	mov	sp,fp
    4038:	dfc00117 	ldw	ra,4(sp)
    403c:	df000017 	ldw	fp,0(sp)
    4040:	dec00204 	addi	sp,sp,8
    4044:	f800283a 	ret

00004048 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    4048:	deffff04 	addi	sp,sp,-4
    404c:	df000015 	stw	fp,0(sp)
    4050:	d839883a 	mov	fp,sp
    4054:	2005883a 	mov	r2,r4
    4058:	3007883a 	mov	r3,r6
    405c:	3809883a 	mov	r4,r7
    4060:	e1800117 	ldw	r6,4(fp)
    4064:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
    4068:	3800051e 	bne	r7,zero,4080 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    406c:	2909383a 	mul	r4,r5,r4
    4070:	20c7883a 	add	r3,r4,r3
    4074:	1885883a 	add	r2,r3,r2
    4078:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
    407c:	00000e06 	br	40b8 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
    4080:	39c00058 	cmpnei	r7,r7,1
    4084:	3800061e 	bne	r7,zero,40a0 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    4088:	2909383a 	mul	r4,r5,r4
    408c:	20c7883a 	add	r3,r4,r3
    4090:	18c7883a 	add	r3,r3,r3
    4094:	1885883a 	add	r2,r3,r2
    4098:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
    409c:	00000606 	br	40b8 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    40a0:	2909383a 	mul	r4,r5,r4
    40a4:	20c7883a 	add	r3,r4,r3
    40a8:	18c7883a 	add	r3,r3,r3
    40ac:	18c7883a 	add	r3,r3,r3
    40b0:	1885883a 	add	r2,r3,r2
    40b4:	11800035 	stwio	r6,0(r2)
}
    40b8:	0001883a 	nop
    40bc:	e037883a 	mov	sp,fp
    40c0:	df000017 	ldw	fp,0(sp)
    40c4:	dec00104 	addi	sp,sp,4
    40c8:	f800283a 	ret

000040cc <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    40cc:	deffeb04 	addi	sp,sp,-84
    40d0:	dfc01415 	stw	ra,80(sp)
    40d4:	df001315 	stw	fp,76(sp)
    40d8:	ddc01215 	stw	r23,72(sp)
    40dc:	dd801115 	stw	r22,68(sp)
    40e0:	dd401015 	stw	r21,64(sp)
    40e4:	dd000f15 	stw	r20,60(sp)
    40e8:	dcc00e15 	stw	r19,56(sp)
    40ec:	dc800d15 	stw	r18,52(sp)
    40f0:	dc400c15 	stw	r17,48(sp)
    40f4:	dc000b15 	stw	r16,44(sp)
    40f8:	df001304 	addi	fp,sp,76
    40fc:	e13fef15 	stw	r4,-68(fp)
    4100:	e17ff015 	stw	r5,-64(fp)
    4104:	e1bff115 	stw	r6,-60(fp)
    4108:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
    410c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
    4110:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
    4114:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
    4118:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    411c:	a4c5c83a 	sub	r2,r20,r19
    4120:	1000010e 	bge	r2,zero,4128 <alt_up_pixel_buffer_dma_draw_line+0x5c>
    4124:	0085c83a 	sub	r2,zero,r2
    4128:	1007883a 	mov	r3,r2
    412c:	9445c83a 	sub	r2,r18,r17
    4130:	1000010e 	bge	r2,zero,4138 <alt_up_pixel_buffer_dma_draw_line+0x6c>
    4134:	0085c83a 	sub	r2,zero,r2
    4138:	10c4803a 	cmplt	r2,r2,r3
    413c:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    4140:	e0bfef17 	ldw	r2,-68(fp)
    4144:	10800e17 	ldw	r2,56(r2)
    4148:	10800060 	cmpeqi	r2,r2,1
    414c:	1000081e 	bne	r2,zero,4170 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    4150:	e0bfef17 	ldw	r2,-68(fp)
    4154:	10800e17 	ldw	r2,56(r2)
    4158:	10800098 	cmpnei	r2,r2,2
    415c:	1000021e 	bne	r2,zero,4168 <alt_up_pixel_buffer_dma_draw_line+0x9c>
    4160:	00800044 	movi	r2,1
    4164:	00000306 	br	4174 <alt_up_pixel_buffer_dma_draw_line+0xa8>
    4168:	00800084 	movi	r2,2
    416c:	00000106 	br	4174 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    4170:	0005883a 	mov	r2,zero
    4174:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
    4178:	e0800317 	ldw	r2,12(fp)
    417c:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    4180:	e0bfef17 	ldw	r2,-68(fp)
    4184:	10800d17 	ldw	r2,52(r2)
    4188:	1000071e 	bne	r2,zero,41a8 <alt_up_pixel_buffer_dma_draw_line+0xdc>
    418c:	e0bfef17 	ldw	r2,-68(fp)
    4190:	10801317 	ldw	r2,76(r2)
    4194:	e0fff417 	ldw	r3,-48(fp)
    4198:	10c5c83a 	sub	r2,r2,r3
    419c:	00c00044 	movi	r3,1
    41a0:	1884983a 	sll	r2,r3,r2
    41a4:	00000206 	br	41b0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
    41a8:	e0bfef17 	ldw	r2,-68(fp)
    41ac:	10800f17 	ldw	r2,60(r2)
    41b0:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
    41b4:	e0800417 	ldw	r2,16(fp)
    41b8:	10800058 	cmpnei	r2,r2,1
    41bc:	1000031e 	bne	r2,zero,41cc <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
    41c0:	e0bfef17 	ldw	r2,-68(fp)
    41c4:	15c00c17 	ldw	r23,48(r2)
    41c8:	00000206 	br	41d4 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    41cc:	e0bfef17 	ldw	r2,-68(fp)
    41d0:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
    41d4:	e0bff307 	ldb	r2,-52(fp)
    41d8:	0080060e 	bge	zero,r2,41f4 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
    41dc:	8821883a 	mov	r16,r17
		x_0 = y_0;
    41e0:	9823883a 	mov	r17,r19
		y_0 = error;
    41e4:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
    41e8:	9021883a 	mov	r16,r18
		x_1 = y_1;
    41ec:	a025883a 	mov	r18,r20
		y_1 = error;
    41f0:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
    41f4:	9440060e 	bge	r18,r17,4210 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
    41f8:	8821883a 	mov	r16,r17
		x_0 = x_1;
    41fc:	9023883a 	mov	r17,r18
		x_1 = error;
    4200:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
    4204:	9821883a 	mov	r16,r19
		y_0 = y_1;
    4208:	a027883a 	mov	r19,r20
		y_1 = error;
    420c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    4210:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
    4214:	a4c5c83a 	sub	r2,r20,r19
    4218:	1000010e 	bge	r2,zero,4220 <alt_up_pixel_buffer_dma_draw_line+0x154>
    421c:	0085c83a 	sub	r2,zero,r2
    4220:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
    4224:	a804d7fa 	srli	r2,r21,31
    4228:	1545883a 	add	r2,r2,r21
    422c:	1005d07a 	srai	r2,r2,1
    4230:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
    4234:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
    4238:	9d00020e 	bge	r19,r20,4244 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
    423c:	04c00044 	movi	r19,1
    4240:	00000106 	br	4248 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
    4244:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    4248:	e0bff307 	ldb	r2,-52(fp)
    424c:	10800058 	cmpnei	r2,r2,1
    4250:	1000211e 	bne	r2,zero,42d8 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
    4254:	00000f06 	br	4294 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    4258:	e0bff417 	ldw	r2,-48(fp)
    425c:	d8800115 	stw	r2,4(sp)
    4260:	e0bff517 	ldw	r2,-44(fp)
    4264:	d8800015 	stw	r2,0(sp)
    4268:	880f883a 	mov	r7,r17
    426c:	b00d883a 	mov	r6,r22
    4270:	e17ff617 	ldw	r5,-40(fp)
    4274:	b809883a 	mov	r4,r23
    4278:	00040480 	call	4048 <helper_plot_pixel>
			error = error + deltay;
    427c:	e0bff717 	ldw	r2,-36(fp)
    4280:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    4284:	0400020e 	bge	zero,r16,4290 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
    4288:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    428c:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    4290:	8c400044 	addi	r17,r17,1
    4294:	947ff00e 	bge	r18,r17,4258 <__alt_data_end+0xf8004258>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    4298:	00001006 	br	42dc <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    429c:	e0bff417 	ldw	r2,-48(fp)
    42a0:	d8800115 	stw	r2,4(sp)
    42a4:	e0bff517 	ldw	r2,-44(fp)
    42a8:	d8800015 	stw	r2,0(sp)
    42ac:	b00f883a 	mov	r7,r22
    42b0:	880d883a 	mov	r6,r17
    42b4:	e17ff617 	ldw	r5,-40(fp)
    42b8:	b809883a 	mov	r4,r23
    42bc:	00040480 	call	4048 <helper_plot_pixel>
			error = error + deltay;
    42c0:	e0bff717 	ldw	r2,-36(fp)
    42c4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
    42c8:	0400020e 	bge	zero,r16,42d4 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
    42cc:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
    42d0:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    42d4:	8c400044 	addi	r17,r17,1
    42d8:	947ff00e 	bge	r18,r17,429c <__alt_data_end+0xf800429c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    42dc:	0001883a 	nop
    42e0:	e6fff804 	addi	sp,fp,-32
    42e4:	dfc00917 	ldw	ra,36(sp)
    42e8:	df000817 	ldw	fp,32(sp)
    42ec:	ddc00717 	ldw	r23,28(sp)
    42f0:	dd800617 	ldw	r22,24(sp)
    42f4:	dd400517 	ldw	r21,20(sp)
    42f8:	dd000417 	ldw	r20,16(sp)
    42fc:	dcc00317 	ldw	r19,12(sp)
    4300:	dc800217 	ldw	r18,8(sp)
    4304:	dc400117 	ldw	r17,4(sp)
    4308:	dc000017 	ldw	r16,0(sp)
    430c:	dec00a04 	addi	sp,sp,40
    4310:	f800283a 	ret

00004314 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4314:	defff504 	addi	sp,sp,-44
    4318:	df000a15 	stw	fp,40(sp)
    431c:	df000a04 	addi	fp,sp,40
    4320:	e13ffc15 	stw	r4,-16(fp)
    4324:	e17ffd15 	stw	r5,-12(fp)
    4328:	e1bffe15 	stw	r6,-8(fp)
    432c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4330:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4334:	d0a5e817 	ldw	r2,-26720(gp)
  
  if (alt_ticks_per_second ())
    4338:	10003c26 	beq	r2,zero,442c <alt_alarm_start+0x118>
  {
    if (alarm)
    433c:	e0bffc17 	ldw	r2,-16(fp)
    4340:	10003826 	beq	r2,zero,4424 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    4344:	e0bffc17 	ldw	r2,-16(fp)
    4348:	e0fffe17 	ldw	r3,-8(fp)
    434c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    4350:	e0bffc17 	ldw	r2,-16(fp)
    4354:	e0ffff17 	ldw	r3,-4(fp)
    4358:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    435c:	0005303a 	rdctl	r2,status
    4360:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4364:	e0fff917 	ldw	r3,-28(fp)
    4368:	00bfff84 	movi	r2,-2
    436c:	1884703a 	and	r2,r3,r2
    4370:	1001703a 	wrctl	status,r2
  
  return context;
    4374:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    4378:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    437c:	d0a5e917 	ldw	r2,-26716(gp)
      
      current_nticks = alt_nticks();
    4380:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    4384:	e0fffd17 	ldw	r3,-12(fp)
    4388:	e0bff617 	ldw	r2,-40(fp)
    438c:	1885883a 	add	r2,r3,r2
    4390:	10c00044 	addi	r3,r2,1
    4394:	e0bffc17 	ldw	r2,-16(fp)
    4398:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    439c:	e0bffc17 	ldw	r2,-16(fp)
    43a0:	10c00217 	ldw	r3,8(r2)
    43a4:	e0bff617 	ldw	r2,-40(fp)
    43a8:	1880042e 	bgeu	r3,r2,43bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    43ac:	e0bffc17 	ldw	r2,-16(fp)
    43b0:	00c00044 	movi	r3,1
    43b4:	10c00405 	stb	r3,16(r2)
    43b8:	00000206 	br	43c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    43bc:	e0bffc17 	ldw	r2,-16(fp)
    43c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    43c4:	e0bffc17 	ldw	r2,-16(fp)
    43c8:	d0e00b04 	addi	r3,gp,-32724
    43cc:	e0fffa15 	stw	r3,-24(fp)
    43d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    43d4:	e0bffb17 	ldw	r2,-20(fp)
    43d8:	e0fffa17 	ldw	r3,-24(fp)
    43dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    43e0:	e0bffa17 	ldw	r2,-24(fp)
    43e4:	10c00017 	ldw	r3,0(r2)
    43e8:	e0bffb17 	ldw	r2,-20(fp)
    43ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    43f0:	e0bffa17 	ldw	r2,-24(fp)
    43f4:	10800017 	ldw	r2,0(r2)
    43f8:	e0fffb17 	ldw	r3,-20(fp)
    43fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    4400:	e0bffa17 	ldw	r2,-24(fp)
    4404:	e0fffb17 	ldw	r3,-20(fp)
    4408:	10c00015 	stw	r3,0(r2)
    440c:	e0bff817 	ldw	r2,-32(fp)
    4410:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4414:	e0bff717 	ldw	r2,-36(fp)
    4418:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    441c:	0005883a 	mov	r2,zero
    4420:	00000306 	br	4430 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    4424:	00bffa84 	movi	r2,-22
    4428:	00000106 	br	4430 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    442c:	00bfde84 	movi	r2,-134
  }
}
    4430:	e037883a 	mov	sp,fp
    4434:	df000017 	ldw	fp,0(sp)
    4438:	dec00104 	addi	sp,sp,4
    443c:	f800283a 	ret

00004440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4440:	defffe04 	addi	sp,sp,-8
    4444:	dfc00115 	stw	ra,4(sp)
    4448:	df000015 	stw	fp,0(sp)
    444c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4450:	d0a00a17 	ldw	r2,-32728(gp)
    4454:	10000326 	beq	r2,zero,4464 <alt_get_errno+0x24>
    4458:	d0a00a17 	ldw	r2,-32728(gp)
    445c:	103ee83a 	callr	r2
    4460:	00000106 	br	4468 <alt_get_errno+0x28>
    4464:	d0a5ea04 	addi	r2,gp,-26712
}
    4468:	e037883a 	mov	sp,fp
    446c:	dfc00117 	ldw	ra,4(sp)
    4470:	df000017 	ldw	fp,0(sp)
    4474:	dec00204 	addi	sp,sp,8
    4478:	f800283a 	ret

0000447c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    447c:	defffb04 	addi	sp,sp,-20
    4480:	dfc00415 	stw	ra,16(sp)
    4484:	df000315 	stw	fp,12(sp)
    4488:	df000304 	addi	fp,sp,12
    448c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    4490:	e0bfff17 	ldw	r2,-4(fp)
    4494:	10000616 	blt	r2,zero,44b0 <close+0x34>
    4498:	e0bfff17 	ldw	r2,-4(fp)
    449c:	10c00324 	muli	r3,r2,12
    44a0:	00800034 	movhi	r2,0
    44a4:	109a0c04 	addi	r2,r2,26672
    44a8:	1885883a 	add	r2,r3,r2
    44ac:	00000106 	br	44b4 <close+0x38>
    44b0:	0005883a 	mov	r2,zero
    44b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    44b8:	e0bffd17 	ldw	r2,-12(fp)
    44bc:	10001926 	beq	r2,zero,4524 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    44c0:	e0bffd17 	ldw	r2,-12(fp)
    44c4:	10800017 	ldw	r2,0(r2)
    44c8:	10800417 	ldw	r2,16(r2)
    44cc:	10000626 	beq	r2,zero,44e8 <close+0x6c>
    44d0:	e0bffd17 	ldw	r2,-12(fp)
    44d4:	10800017 	ldw	r2,0(r2)
    44d8:	10800417 	ldw	r2,16(r2)
    44dc:	e13ffd17 	ldw	r4,-12(fp)
    44e0:	103ee83a 	callr	r2
    44e4:	00000106 	br	44ec <close+0x70>
    44e8:	0005883a 	mov	r2,zero
    44ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    44f0:	e13fff17 	ldw	r4,-4(fp)
    44f4:	0004bb80 	call	4bb8 <alt_release_fd>
    if (rval < 0)
    44f8:	e0bffe17 	ldw	r2,-8(fp)
    44fc:	1000070e 	bge	r2,zero,451c <close+0xa0>
    {
      ALT_ERRNO = -rval;
    4500:	00044400 	call	4440 <alt_get_errno>
    4504:	1007883a 	mov	r3,r2
    4508:	e0bffe17 	ldw	r2,-8(fp)
    450c:	0085c83a 	sub	r2,zero,r2
    4510:	18800015 	stw	r2,0(r3)
      return -1;
    4514:	00bfffc4 	movi	r2,-1
    4518:	00000706 	br	4538 <close+0xbc>
    }
    return 0;
    451c:	0005883a 	mov	r2,zero
    4520:	00000506 	br	4538 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4524:	00044400 	call	4440 <alt_get_errno>
    4528:	1007883a 	mov	r3,r2
    452c:	00801444 	movi	r2,81
    4530:	18800015 	stw	r2,0(r3)
    return -1;
    4534:	00bfffc4 	movi	r2,-1
  }
}
    4538:	e037883a 	mov	sp,fp
    453c:	dfc00117 	ldw	ra,4(sp)
    4540:	df000017 	ldw	fp,0(sp)
    4544:	dec00204 	addi	sp,sp,8
    4548:	f800283a 	ret

0000454c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    454c:	defffe04 	addi	sp,sp,-8
    4550:	df000115 	stw	fp,4(sp)
    4554:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4558:	e03fff15 	stw	zero,-4(fp)
    455c:	00000506 	br	4574 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    4560:	e0bfff17 	ldw	r2,-4(fp)
    4564:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    4568:	e0bfff17 	ldw	r2,-4(fp)
    456c:	10800804 	addi	r2,r2,32
    4570:	e0bfff15 	stw	r2,-4(fp)
    4574:	e0bfff17 	ldw	r2,-4(fp)
    4578:	10820030 	cmpltui	r2,r2,2048
    457c:	103ff81e 	bne	r2,zero,4560 <__alt_data_end+0xf8004560>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4580:	0001883a 	nop
    4584:	e037883a 	mov	sp,fp
    4588:	df000017 	ldw	fp,0(sp)
    458c:	dec00104 	addi	sp,sp,4
    4590:	f800283a 	ret

00004594 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    4594:	defffc04 	addi	sp,sp,-16
    4598:	df000315 	stw	fp,12(sp)
    459c:	df000304 	addi	fp,sp,12
    45a0:	e13ffd15 	stw	r4,-12(fp)
    45a4:	e17ffe15 	stw	r5,-8(fp)
    45a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    45ac:	e0bfff17 	ldw	r2,-4(fp)
}
    45b0:	e037883a 	mov	sp,fp
    45b4:	df000017 	ldw	fp,0(sp)
    45b8:	dec00104 	addi	sp,sp,4
    45bc:	f800283a 	ret

000045c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    45c0:	defffe04 	addi	sp,sp,-8
    45c4:	dfc00115 	stw	ra,4(sp)
    45c8:	df000015 	stw	fp,0(sp)
    45cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    45d0:	d0a00a17 	ldw	r2,-32728(gp)
    45d4:	10000326 	beq	r2,zero,45e4 <alt_get_errno+0x24>
    45d8:	d0a00a17 	ldw	r2,-32728(gp)
    45dc:	103ee83a 	callr	r2
    45e0:	00000106 	br	45e8 <alt_get_errno+0x28>
    45e4:	d0a5ea04 	addi	r2,gp,-26712
}
    45e8:	e037883a 	mov	sp,fp
    45ec:	dfc00117 	ldw	ra,4(sp)
    45f0:	df000017 	ldw	fp,0(sp)
    45f4:	dec00204 	addi	sp,sp,8
    45f8:	f800283a 	ret

000045fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    45fc:	defffa04 	addi	sp,sp,-24
    4600:	dfc00515 	stw	ra,20(sp)
    4604:	df000415 	stw	fp,16(sp)
    4608:	df000404 	addi	fp,sp,16
    460c:	e13ffe15 	stw	r4,-8(fp)
    4610:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    4614:	e0bffe17 	ldw	r2,-8(fp)
    4618:	10000326 	beq	r2,zero,4628 <alt_dev_llist_insert+0x2c>
    461c:	e0bffe17 	ldw	r2,-8(fp)
    4620:	10800217 	ldw	r2,8(r2)
    4624:	1000061e 	bne	r2,zero,4640 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    4628:	00045c00 	call	45c0 <alt_get_errno>
    462c:	1007883a 	mov	r3,r2
    4630:	00800584 	movi	r2,22
    4634:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    4638:	00bffa84 	movi	r2,-22
    463c:	00001306 	br	468c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    4640:	e0bffe17 	ldw	r2,-8(fp)
    4644:	e0ffff17 	ldw	r3,-4(fp)
    4648:	e0fffc15 	stw	r3,-16(fp)
    464c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4650:	e0bffd17 	ldw	r2,-12(fp)
    4654:	e0fffc17 	ldw	r3,-16(fp)
    4658:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    465c:	e0bffc17 	ldw	r2,-16(fp)
    4660:	10c00017 	ldw	r3,0(r2)
    4664:	e0bffd17 	ldw	r2,-12(fp)
    4668:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    466c:	e0bffc17 	ldw	r2,-16(fp)
    4670:	10800017 	ldw	r2,0(r2)
    4674:	e0fffd17 	ldw	r3,-12(fp)
    4678:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    467c:	e0bffc17 	ldw	r2,-16(fp)
    4680:	e0fffd17 	ldw	r3,-12(fp)
    4684:	10c00015 	stw	r3,0(r2)

  return 0;  
    4688:	0005883a 	mov	r2,zero
}
    468c:	e037883a 	mov	sp,fp
    4690:	dfc00117 	ldw	ra,4(sp)
    4694:	df000017 	ldw	fp,0(sp)
    4698:	dec00204 	addi	sp,sp,8
    469c:	f800283a 	ret

000046a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    46a0:	defffd04 	addi	sp,sp,-12
    46a4:	dfc00215 	stw	ra,8(sp)
    46a8:	df000115 	stw	fp,4(sp)
    46ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    46b0:	00800034 	movhi	r2,0
    46b4:	10956404 	addi	r2,r2,21904
    46b8:	e0bfff15 	stw	r2,-4(fp)
    46bc:	00000606 	br	46d8 <_do_ctors+0x38>
        (*ctor) (); 
    46c0:	e0bfff17 	ldw	r2,-4(fp)
    46c4:	10800017 	ldw	r2,0(r2)
    46c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    46cc:	e0bfff17 	ldw	r2,-4(fp)
    46d0:	10bfff04 	addi	r2,r2,-4
    46d4:	e0bfff15 	stw	r2,-4(fp)
    46d8:	e0ffff17 	ldw	r3,-4(fp)
    46dc:	00800034 	movhi	r2,0
    46e0:	10956504 	addi	r2,r2,21908
    46e4:	18bff62e 	bgeu	r3,r2,46c0 <__alt_data_end+0xf80046c0>
        (*ctor) (); 
}
    46e8:	0001883a 	nop
    46ec:	e037883a 	mov	sp,fp
    46f0:	dfc00117 	ldw	ra,4(sp)
    46f4:	df000017 	ldw	fp,0(sp)
    46f8:	dec00204 	addi	sp,sp,8
    46fc:	f800283a 	ret

00004700 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4700:	defffd04 	addi	sp,sp,-12
    4704:	dfc00215 	stw	ra,8(sp)
    4708:	df000115 	stw	fp,4(sp)
    470c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4710:	00800034 	movhi	r2,0
    4714:	10956404 	addi	r2,r2,21904
    4718:	e0bfff15 	stw	r2,-4(fp)
    471c:	00000606 	br	4738 <_do_dtors+0x38>
        (*dtor) (); 
    4720:	e0bfff17 	ldw	r2,-4(fp)
    4724:	10800017 	ldw	r2,0(r2)
    4728:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    472c:	e0bfff17 	ldw	r2,-4(fp)
    4730:	10bfff04 	addi	r2,r2,-4
    4734:	e0bfff15 	stw	r2,-4(fp)
    4738:	e0ffff17 	ldw	r3,-4(fp)
    473c:	00800034 	movhi	r2,0
    4740:	10956504 	addi	r2,r2,21908
    4744:	18bff62e 	bgeu	r3,r2,4720 <__alt_data_end+0xf8004720>
        (*dtor) (); 
}
    4748:	0001883a 	nop
    474c:	e037883a 	mov	sp,fp
    4750:	dfc00117 	ldw	ra,4(sp)
    4754:	df000017 	ldw	fp,0(sp)
    4758:	dec00204 	addi	sp,sp,8
    475c:	f800283a 	ret

00004760 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4760:	defffa04 	addi	sp,sp,-24
    4764:	dfc00515 	stw	ra,20(sp)
    4768:	df000415 	stw	fp,16(sp)
    476c:	df000404 	addi	fp,sp,16
    4770:	e13ffe15 	stw	r4,-8(fp)
    4774:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4778:	e0bfff17 	ldw	r2,-4(fp)
    477c:	10800017 	ldw	r2,0(r2)
    4780:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4784:	e13ffe17 	ldw	r4,-8(fp)
    4788:	00052300 	call	5230 <strlen>
    478c:	10800044 	addi	r2,r2,1
    4790:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4794:	00000d06 	br	47cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4798:	e0bffc17 	ldw	r2,-16(fp)
    479c:	10800217 	ldw	r2,8(r2)
    47a0:	e0fffd17 	ldw	r3,-12(fp)
    47a4:	180d883a 	mov	r6,r3
    47a8:	e17ffe17 	ldw	r5,-8(fp)
    47ac:	1009883a 	mov	r4,r2
    47b0:	000506c0 	call	506c <memcmp>
    47b4:	1000021e 	bne	r2,zero,47c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    47b8:	e0bffc17 	ldw	r2,-16(fp)
    47bc:	00000706 	br	47dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    47c0:	e0bffc17 	ldw	r2,-16(fp)
    47c4:	10800017 	ldw	r2,0(r2)
    47c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    47cc:	e0fffc17 	ldw	r3,-16(fp)
    47d0:	e0bfff17 	ldw	r2,-4(fp)
    47d4:	18bff01e 	bne	r3,r2,4798 <__alt_data_end+0xf8004798>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    47d8:	0005883a 	mov	r2,zero
}
    47dc:	e037883a 	mov	sp,fp
    47e0:	dfc00117 	ldw	ra,4(sp)
    47e4:	df000017 	ldw	fp,0(sp)
    47e8:	dec00204 	addi	sp,sp,8
    47ec:	f800283a 	ret

000047f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    47f0:	defffe04 	addi	sp,sp,-8
    47f4:	dfc00115 	stw	ra,4(sp)
    47f8:	df000015 	stw	fp,0(sp)
    47fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    4800:	01440004 	movi	r5,4096
    4804:	0009883a 	mov	r4,zero
    4808:	0004f900 	call	4f90 <alt_icache_flush>
#endif
}
    480c:	0001883a 	nop
    4810:	e037883a 	mov	sp,fp
    4814:	dfc00117 	ldw	ra,4(sp)
    4818:	df000017 	ldw	fp,0(sp)
    481c:	dec00204 	addi	sp,sp,8
    4820:	f800283a 	ret

00004824 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4824:	defff904 	addi	sp,sp,-28
    4828:	dfc00615 	stw	ra,24(sp)
    482c:	df000515 	stw	fp,20(sp)
    4830:	df000504 	addi	fp,sp,20
    4834:	e13ffc15 	stw	r4,-16(fp)
    4838:	e17ffd15 	stw	r5,-12(fp)
    483c:	e1bffe15 	stw	r6,-8(fp)
    4840:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    4844:	e1bfff17 	ldw	r6,-4(fp)
    4848:	e17ffe17 	ldw	r5,-8(fp)
    484c:	e13ffd17 	ldw	r4,-12(fp)
    4850:	0004a640 	call	4a64 <open>
    4854:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    4858:	e0bffb17 	ldw	r2,-20(fp)
    485c:	10001c16 	blt	r2,zero,48d0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    4860:	00800034 	movhi	r2,0
    4864:	109a0c04 	addi	r2,r2,26672
    4868:	e0fffb17 	ldw	r3,-20(fp)
    486c:	18c00324 	muli	r3,r3,12
    4870:	10c5883a 	add	r2,r2,r3
    4874:	10c00017 	ldw	r3,0(r2)
    4878:	e0bffc17 	ldw	r2,-16(fp)
    487c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    4880:	00800034 	movhi	r2,0
    4884:	109a0c04 	addi	r2,r2,26672
    4888:	e0fffb17 	ldw	r3,-20(fp)
    488c:	18c00324 	muli	r3,r3,12
    4890:	10c5883a 	add	r2,r2,r3
    4894:	10800104 	addi	r2,r2,4
    4898:	10c00017 	ldw	r3,0(r2)
    489c:	e0bffc17 	ldw	r2,-16(fp)
    48a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    48a4:	00800034 	movhi	r2,0
    48a8:	109a0c04 	addi	r2,r2,26672
    48ac:	e0fffb17 	ldw	r3,-20(fp)
    48b0:	18c00324 	muli	r3,r3,12
    48b4:	10c5883a 	add	r2,r2,r3
    48b8:	10800204 	addi	r2,r2,8
    48bc:	10c00017 	ldw	r3,0(r2)
    48c0:	e0bffc17 	ldw	r2,-16(fp)
    48c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    48c8:	e13ffb17 	ldw	r4,-20(fp)
    48cc:	0004bb80 	call	4bb8 <alt_release_fd>
  }
} 
    48d0:	0001883a 	nop
    48d4:	e037883a 	mov	sp,fp
    48d8:	dfc00117 	ldw	ra,4(sp)
    48dc:	df000017 	ldw	fp,0(sp)
    48e0:	dec00204 	addi	sp,sp,8
    48e4:	f800283a 	ret

000048e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    48e8:	defffb04 	addi	sp,sp,-20
    48ec:	dfc00415 	stw	ra,16(sp)
    48f0:	df000315 	stw	fp,12(sp)
    48f4:	df000304 	addi	fp,sp,12
    48f8:	e13ffd15 	stw	r4,-12(fp)
    48fc:	e17ffe15 	stw	r5,-8(fp)
    4900:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4904:	01c07fc4 	movi	r7,511
    4908:	01800044 	movi	r6,1
    490c:	e17ffd17 	ldw	r5,-12(fp)
    4910:	01000034 	movhi	r4,0
    4914:	211a0f04 	addi	r4,r4,26684
    4918:	00048240 	call	4824 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    491c:	01c07fc4 	movi	r7,511
    4920:	000d883a 	mov	r6,zero
    4924:	e17ffe17 	ldw	r5,-8(fp)
    4928:	01000034 	movhi	r4,0
    492c:	211a0c04 	addi	r4,r4,26672
    4930:	00048240 	call	4824 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4934:	01c07fc4 	movi	r7,511
    4938:	01800044 	movi	r6,1
    493c:	e17fff17 	ldw	r5,-4(fp)
    4940:	01000034 	movhi	r4,0
    4944:	211a1204 	addi	r4,r4,26696
    4948:	00048240 	call	4824 <alt_open_fd>
}  
    494c:	0001883a 	nop
    4950:	e037883a 	mov	sp,fp
    4954:	dfc00117 	ldw	ra,4(sp)
    4958:	df000017 	ldw	fp,0(sp)
    495c:	dec00204 	addi	sp,sp,8
    4960:	f800283a 	ret

00004964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4964:	defffe04 	addi	sp,sp,-8
    4968:	dfc00115 	stw	ra,4(sp)
    496c:	df000015 	stw	fp,0(sp)
    4970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4974:	d0a00a17 	ldw	r2,-32728(gp)
    4978:	10000326 	beq	r2,zero,4988 <alt_get_errno+0x24>
    497c:	d0a00a17 	ldw	r2,-32728(gp)
    4980:	103ee83a 	callr	r2
    4984:	00000106 	br	498c <alt_get_errno+0x28>
    4988:	d0a5ea04 	addi	r2,gp,-26712
}
    498c:	e037883a 	mov	sp,fp
    4990:	dfc00117 	ldw	ra,4(sp)
    4994:	df000017 	ldw	fp,0(sp)
    4998:	dec00204 	addi	sp,sp,8
    499c:	f800283a 	ret

000049a0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    49a0:	defffd04 	addi	sp,sp,-12
    49a4:	df000215 	stw	fp,8(sp)
    49a8:	df000204 	addi	fp,sp,8
    49ac:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    49b0:	e0bfff17 	ldw	r2,-4(fp)
    49b4:	10800217 	ldw	r2,8(r2)
    49b8:	10d00034 	orhi	r3,r2,16384
    49bc:	e0bfff17 	ldw	r2,-4(fp)
    49c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    49c4:	e03ffe15 	stw	zero,-8(fp)
    49c8:	00001d06 	br	4a40 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    49cc:	00800034 	movhi	r2,0
    49d0:	109a0c04 	addi	r2,r2,26672
    49d4:	e0fffe17 	ldw	r3,-8(fp)
    49d8:	18c00324 	muli	r3,r3,12
    49dc:	10c5883a 	add	r2,r2,r3
    49e0:	10c00017 	ldw	r3,0(r2)
    49e4:	e0bfff17 	ldw	r2,-4(fp)
    49e8:	10800017 	ldw	r2,0(r2)
    49ec:	1880111e 	bne	r3,r2,4a34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    49f0:	00800034 	movhi	r2,0
    49f4:	109a0c04 	addi	r2,r2,26672
    49f8:	e0fffe17 	ldw	r3,-8(fp)
    49fc:	18c00324 	muli	r3,r3,12
    4a00:	10c5883a 	add	r2,r2,r3
    4a04:	10800204 	addi	r2,r2,8
    4a08:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4a0c:	1000090e 	bge	r2,zero,4a34 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4a10:	e0bffe17 	ldw	r2,-8(fp)
    4a14:	10c00324 	muli	r3,r2,12
    4a18:	00800034 	movhi	r2,0
    4a1c:	109a0c04 	addi	r2,r2,26672
    4a20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    4a24:	e0bfff17 	ldw	r2,-4(fp)
    4a28:	18800226 	beq	r3,r2,4a34 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4a2c:	00bffcc4 	movi	r2,-13
    4a30:	00000806 	br	4a54 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4a34:	e0bffe17 	ldw	r2,-8(fp)
    4a38:	10800044 	addi	r2,r2,1
    4a3c:	e0bffe15 	stw	r2,-8(fp)
    4a40:	d0a00917 	ldw	r2,-32732(gp)
    4a44:	1007883a 	mov	r3,r2
    4a48:	e0bffe17 	ldw	r2,-8(fp)
    4a4c:	18bfdf2e 	bgeu	r3,r2,49cc <__alt_data_end+0xf80049cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4a50:	0005883a 	mov	r2,zero
}
    4a54:	e037883a 	mov	sp,fp
    4a58:	df000017 	ldw	fp,0(sp)
    4a5c:	dec00104 	addi	sp,sp,4
    4a60:	f800283a 	ret

00004a64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4a64:	defff604 	addi	sp,sp,-40
    4a68:	dfc00915 	stw	ra,36(sp)
    4a6c:	df000815 	stw	fp,32(sp)
    4a70:	df000804 	addi	fp,sp,32
    4a74:	e13ffd15 	stw	r4,-12(fp)
    4a78:	e17ffe15 	stw	r5,-8(fp)
    4a7c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4a80:	00bfffc4 	movi	r2,-1
    4a84:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4a88:	00bffb44 	movi	r2,-19
    4a8c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    4a90:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4a94:	d1600704 	addi	r5,gp,-32740
    4a98:	e13ffd17 	ldw	r4,-12(fp)
    4a9c:	00047600 	call	4760 <alt_find_dev>
    4aa0:	e0bff815 	stw	r2,-32(fp)
    4aa4:	e0bff817 	ldw	r2,-32(fp)
    4aa8:	1000051e 	bne	r2,zero,4ac0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4aac:	e13ffd17 	ldw	r4,-12(fp)
    4ab0:	0004de40 	call	4de4 <alt_find_file>
    4ab4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    4ab8:	00800044 	movi	r2,1
    4abc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4ac0:	e0bff817 	ldw	r2,-32(fp)
    4ac4:	10002926 	beq	r2,zero,4b6c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4ac8:	e13ff817 	ldw	r4,-32(fp)
    4acc:	0004eec0 	call	4eec <alt_get_fd>
    4ad0:	e0bff915 	stw	r2,-28(fp)
    4ad4:	e0bff917 	ldw	r2,-28(fp)
    4ad8:	1000030e 	bge	r2,zero,4ae8 <open+0x84>
    {
      status = index;
    4adc:	e0bff917 	ldw	r2,-28(fp)
    4ae0:	e0bffa15 	stw	r2,-24(fp)
    4ae4:	00002306 	br	4b74 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    4ae8:	e0bff917 	ldw	r2,-28(fp)
    4aec:	10c00324 	muli	r3,r2,12
    4af0:	00800034 	movhi	r2,0
    4af4:	109a0c04 	addi	r2,r2,26672
    4af8:	1885883a 	add	r2,r3,r2
    4afc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4b00:	e0fffe17 	ldw	r3,-8(fp)
    4b04:	00900034 	movhi	r2,16384
    4b08:	10bfffc4 	addi	r2,r2,-1
    4b0c:	1886703a 	and	r3,r3,r2
    4b10:	e0bffc17 	ldw	r2,-16(fp)
    4b14:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4b18:	e0bffb17 	ldw	r2,-20(fp)
    4b1c:	1000051e 	bne	r2,zero,4b34 <open+0xd0>
    4b20:	e13ffc17 	ldw	r4,-16(fp)
    4b24:	00049a00 	call	49a0 <alt_file_locked>
    4b28:	e0bffa15 	stw	r2,-24(fp)
    4b2c:	e0bffa17 	ldw	r2,-24(fp)
    4b30:	10001016 	blt	r2,zero,4b74 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4b34:	e0bff817 	ldw	r2,-32(fp)
    4b38:	10800317 	ldw	r2,12(r2)
    4b3c:	10000826 	beq	r2,zero,4b60 <open+0xfc>
    4b40:	e0bff817 	ldw	r2,-32(fp)
    4b44:	10800317 	ldw	r2,12(r2)
    4b48:	e1ffff17 	ldw	r7,-4(fp)
    4b4c:	e1bffe17 	ldw	r6,-8(fp)
    4b50:	e17ffd17 	ldw	r5,-12(fp)
    4b54:	e13ffc17 	ldw	r4,-16(fp)
    4b58:	103ee83a 	callr	r2
    4b5c:	00000106 	br	4b64 <open+0x100>
    4b60:	0005883a 	mov	r2,zero
    4b64:	e0bffa15 	stw	r2,-24(fp)
    4b68:	00000206 	br	4b74 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4b6c:	00bffb44 	movi	r2,-19
    4b70:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4b74:	e0bffa17 	ldw	r2,-24(fp)
    4b78:	1000090e 	bge	r2,zero,4ba0 <open+0x13c>
  {
    alt_release_fd (index);  
    4b7c:	e13ff917 	ldw	r4,-28(fp)
    4b80:	0004bb80 	call	4bb8 <alt_release_fd>
    ALT_ERRNO = -status;
    4b84:	00049640 	call	4964 <alt_get_errno>
    4b88:	1007883a 	mov	r3,r2
    4b8c:	e0bffa17 	ldw	r2,-24(fp)
    4b90:	0085c83a 	sub	r2,zero,r2
    4b94:	18800015 	stw	r2,0(r3)
    return -1;
    4b98:	00bfffc4 	movi	r2,-1
    4b9c:	00000106 	br	4ba4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    4ba0:	e0bff917 	ldw	r2,-28(fp)
}
    4ba4:	e037883a 	mov	sp,fp
    4ba8:	dfc00117 	ldw	ra,4(sp)
    4bac:	df000017 	ldw	fp,0(sp)
    4bb0:	dec00204 	addi	sp,sp,8
    4bb4:	f800283a 	ret

00004bb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    4bb8:	defffe04 	addi	sp,sp,-8
    4bbc:	df000115 	stw	fp,4(sp)
    4bc0:	df000104 	addi	fp,sp,4
    4bc4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    4bc8:	e0bfff17 	ldw	r2,-4(fp)
    4bcc:	108000d0 	cmplti	r2,r2,3
    4bd0:	10000d1e 	bne	r2,zero,4c08 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    4bd4:	00800034 	movhi	r2,0
    4bd8:	109a0c04 	addi	r2,r2,26672
    4bdc:	e0ffff17 	ldw	r3,-4(fp)
    4be0:	18c00324 	muli	r3,r3,12
    4be4:	10c5883a 	add	r2,r2,r3
    4be8:	10800204 	addi	r2,r2,8
    4bec:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4bf0:	00800034 	movhi	r2,0
    4bf4:	109a0c04 	addi	r2,r2,26672
    4bf8:	e0ffff17 	ldw	r3,-4(fp)
    4bfc:	18c00324 	muli	r3,r3,12
    4c00:	10c5883a 	add	r2,r2,r3
    4c04:	10000015 	stw	zero,0(r2)
  }
}
    4c08:	0001883a 	nop
    4c0c:	e037883a 	mov	sp,fp
    4c10:	df000017 	ldw	fp,0(sp)
    4c14:	dec00104 	addi	sp,sp,4
    4c18:	f800283a 	ret

00004c1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4c1c:	defffa04 	addi	sp,sp,-24
    4c20:	df000515 	stw	fp,20(sp)
    4c24:	df000504 	addi	fp,sp,20
    4c28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c2c:	0005303a 	rdctl	r2,status
    4c30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c34:	e0fffc17 	ldw	r3,-16(fp)
    4c38:	00bfff84 	movi	r2,-2
    4c3c:	1884703a 	and	r2,r3,r2
    4c40:	1001703a 	wrctl	status,r2
  
  return context;
    4c44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4c48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    4c4c:	e0bfff17 	ldw	r2,-4(fp)
    4c50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4c54:	e0bffd17 	ldw	r2,-12(fp)
    4c58:	10800017 	ldw	r2,0(r2)
    4c5c:	e0fffd17 	ldw	r3,-12(fp)
    4c60:	18c00117 	ldw	r3,4(r3)
    4c64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    4c68:	e0bffd17 	ldw	r2,-12(fp)
    4c6c:	10800117 	ldw	r2,4(r2)
    4c70:	e0fffd17 	ldw	r3,-12(fp)
    4c74:	18c00017 	ldw	r3,0(r3)
    4c78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4c7c:	e0bffd17 	ldw	r2,-12(fp)
    4c80:	e0fffd17 	ldw	r3,-12(fp)
    4c84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    4c88:	e0bffd17 	ldw	r2,-12(fp)
    4c8c:	e0fffd17 	ldw	r3,-12(fp)
    4c90:	10c00015 	stw	r3,0(r2)
    4c94:	e0bffb17 	ldw	r2,-20(fp)
    4c98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c9c:	e0bffe17 	ldw	r2,-8(fp)
    4ca0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    4ca4:	0001883a 	nop
    4ca8:	e037883a 	mov	sp,fp
    4cac:	df000017 	ldw	fp,0(sp)
    4cb0:	dec00104 	addi	sp,sp,4
    4cb4:	f800283a 	ret

00004cb8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    4cb8:	defffb04 	addi	sp,sp,-20
    4cbc:	dfc00415 	stw	ra,16(sp)
    4cc0:	df000315 	stw	fp,12(sp)
    4cc4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    4cc8:	d0a00b17 	ldw	r2,-32724(gp)
    4ccc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    4cd0:	d0a5e917 	ldw	r2,-26716(gp)
    4cd4:	10800044 	addi	r2,r2,1
    4cd8:	d0a5e915 	stw	r2,-26716(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4cdc:	00002e06 	br	4d98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    4ce0:	e0bffd17 	ldw	r2,-12(fp)
    4ce4:	10800017 	ldw	r2,0(r2)
    4ce8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    4cec:	e0bffd17 	ldw	r2,-12(fp)
    4cf0:	10800403 	ldbu	r2,16(r2)
    4cf4:	10803fcc 	andi	r2,r2,255
    4cf8:	10000426 	beq	r2,zero,4d0c <alt_tick+0x54>
    4cfc:	d0a5e917 	ldw	r2,-26716(gp)
    4d00:	1000021e 	bne	r2,zero,4d0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    4d04:	e0bffd17 	ldw	r2,-12(fp)
    4d08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4d0c:	e0bffd17 	ldw	r2,-12(fp)
    4d10:	10800217 	ldw	r2,8(r2)
    4d14:	d0e5e917 	ldw	r3,-26716(gp)
    4d18:	18801d36 	bltu	r3,r2,4d90 <alt_tick+0xd8>
    4d1c:	e0bffd17 	ldw	r2,-12(fp)
    4d20:	10800403 	ldbu	r2,16(r2)
    4d24:	10803fcc 	andi	r2,r2,255
    4d28:	1000191e 	bne	r2,zero,4d90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    4d2c:	e0bffd17 	ldw	r2,-12(fp)
    4d30:	10800317 	ldw	r2,12(r2)
    4d34:	e0fffd17 	ldw	r3,-12(fp)
    4d38:	18c00517 	ldw	r3,20(r3)
    4d3c:	1809883a 	mov	r4,r3
    4d40:	103ee83a 	callr	r2
    4d44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4d48:	e0bfff17 	ldw	r2,-4(fp)
    4d4c:	1000031e 	bne	r2,zero,4d5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    4d50:	e13ffd17 	ldw	r4,-12(fp)
    4d54:	0004c1c0 	call	4c1c <alt_alarm_stop>
    4d58:	00000d06 	br	4d90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    4d5c:	e0bffd17 	ldw	r2,-12(fp)
    4d60:	10c00217 	ldw	r3,8(r2)
    4d64:	e0bfff17 	ldw	r2,-4(fp)
    4d68:	1887883a 	add	r3,r3,r2
    4d6c:	e0bffd17 	ldw	r2,-12(fp)
    4d70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4d74:	e0bffd17 	ldw	r2,-12(fp)
    4d78:	10c00217 	ldw	r3,8(r2)
    4d7c:	d0a5e917 	ldw	r2,-26716(gp)
    4d80:	1880032e 	bgeu	r3,r2,4d90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    4d84:	e0bffd17 	ldw	r2,-12(fp)
    4d88:	00c00044 	movi	r3,1
    4d8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    4d90:	e0bffe17 	ldw	r2,-8(fp)
    4d94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4d98:	e0fffd17 	ldw	r3,-12(fp)
    4d9c:	d0a00b04 	addi	r2,gp,-32724
    4da0:	18bfcf1e 	bne	r3,r2,4ce0 <__alt_data_end+0xf8004ce0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    4da4:	0001883a 	nop
}
    4da8:	0001883a 	nop
    4dac:	e037883a 	mov	sp,fp
    4db0:	dfc00117 	ldw	ra,4(sp)
    4db4:	df000017 	ldw	fp,0(sp)
    4db8:	dec00204 	addi	sp,sp,8
    4dbc:	f800283a 	ret

00004dc0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    4dc0:	deffff04 	addi	sp,sp,-4
    4dc4:	df000015 	stw	fp,0(sp)
    4dc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4dcc:	000170fa 	wrctl	ienable,zero
}
    4dd0:	0001883a 	nop
    4dd4:	e037883a 	mov	sp,fp
    4dd8:	df000017 	ldw	fp,0(sp)
    4ddc:	dec00104 	addi	sp,sp,4
    4de0:	f800283a 	ret

00004de4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4de4:	defffb04 	addi	sp,sp,-20
    4de8:	dfc00415 	stw	ra,16(sp)
    4dec:	df000315 	stw	fp,12(sp)
    4df0:	df000304 	addi	fp,sp,12
    4df4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4df8:	d0a00517 	ldw	r2,-32748(gp)
    4dfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4e00:	00003106 	br	4ec8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    4e04:	e0bffd17 	ldw	r2,-12(fp)
    4e08:	10800217 	ldw	r2,8(r2)
    4e0c:	1009883a 	mov	r4,r2
    4e10:	00052300 	call	5230 <strlen>
    4e14:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    4e18:	e0bffd17 	ldw	r2,-12(fp)
    4e1c:	10c00217 	ldw	r3,8(r2)
    4e20:	e0bffe17 	ldw	r2,-8(fp)
    4e24:	10bfffc4 	addi	r2,r2,-1
    4e28:	1885883a 	add	r2,r3,r2
    4e2c:	10800003 	ldbu	r2,0(r2)
    4e30:	10803fcc 	andi	r2,r2,255
    4e34:	1080201c 	xori	r2,r2,128
    4e38:	10bfe004 	addi	r2,r2,-128
    4e3c:	10800bd8 	cmpnei	r2,r2,47
    4e40:	1000031e 	bne	r2,zero,4e50 <alt_find_file+0x6c>
    {
      len -= 1;
    4e44:	e0bffe17 	ldw	r2,-8(fp)
    4e48:	10bfffc4 	addi	r2,r2,-1
    4e4c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4e50:	e0bffe17 	ldw	r2,-8(fp)
    4e54:	e0ffff17 	ldw	r3,-4(fp)
    4e58:	1885883a 	add	r2,r3,r2
    4e5c:	10800003 	ldbu	r2,0(r2)
    4e60:	10803fcc 	andi	r2,r2,255
    4e64:	1080201c 	xori	r2,r2,128
    4e68:	10bfe004 	addi	r2,r2,-128
    4e6c:	10800be0 	cmpeqi	r2,r2,47
    4e70:	1000081e 	bne	r2,zero,4e94 <alt_find_file+0xb0>
    4e74:	e0bffe17 	ldw	r2,-8(fp)
    4e78:	e0ffff17 	ldw	r3,-4(fp)
    4e7c:	1885883a 	add	r2,r3,r2
    4e80:	10800003 	ldbu	r2,0(r2)
    4e84:	10803fcc 	andi	r2,r2,255
    4e88:	1080201c 	xori	r2,r2,128
    4e8c:	10bfe004 	addi	r2,r2,-128
    4e90:	10000a1e 	bne	r2,zero,4ebc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    4e94:	e0bffd17 	ldw	r2,-12(fp)
    4e98:	10800217 	ldw	r2,8(r2)
    4e9c:	e0fffe17 	ldw	r3,-8(fp)
    4ea0:	180d883a 	mov	r6,r3
    4ea4:	e17fff17 	ldw	r5,-4(fp)
    4ea8:	1009883a 	mov	r4,r2
    4eac:	000506c0 	call	506c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4eb0:	1000021e 	bne	r2,zero,4ebc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4eb4:	e0bffd17 	ldw	r2,-12(fp)
    4eb8:	00000706 	br	4ed8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    4ebc:	e0bffd17 	ldw	r2,-12(fp)
    4ec0:	10800017 	ldw	r2,0(r2)
    4ec4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4ec8:	e0fffd17 	ldw	r3,-12(fp)
    4ecc:	d0a00504 	addi	r2,gp,-32748
    4ed0:	18bfcc1e 	bne	r3,r2,4e04 <__alt_data_end+0xf8004e04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    4ed4:	0005883a 	mov	r2,zero
}
    4ed8:	e037883a 	mov	sp,fp
    4edc:	dfc00117 	ldw	ra,4(sp)
    4ee0:	df000017 	ldw	fp,0(sp)
    4ee4:	dec00204 	addi	sp,sp,8
    4ee8:	f800283a 	ret

00004eec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    4eec:	defffc04 	addi	sp,sp,-16
    4ef0:	df000315 	stw	fp,12(sp)
    4ef4:	df000304 	addi	fp,sp,12
    4ef8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    4efc:	00bffa04 	movi	r2,-24
    4f00:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4f04:	e03ffd15 	stw	zero,-12(fp)
    4f08:	00001906 	br	4f70 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    4f0c:	00800034 	movhi	r2,0
    4f10:	109a0c04 	addi	r2,r2,26672
    4f14:	e0fffd17 	ldw	r3,-12(fp)
    4f18:	18c00324 	muli	r3,r3,12
    4f1c:	10c5883a 	add	r2,r2,r3
    4f20:	10800017 	ldw	r2,0(r2)
    4f24:	10000f1e 	bne	r2,zero,4f64 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    4f28:	00800034 	movhi	r2,0
    4f2c:	109a0c04 	addi	r2,r2,26672
    4f30:	e0fffd17 	ldw	r3,-12(fp)
    4f34:	18c00324 	muli	r3,r3,12
    4f38:	10c5883a 	add	r2,r2,r3
    4f3c:	e0ffff17 	ldw	r3,-4(fp)
    4f40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    4f44:	d0e00917 	ldw	r3,-32732(gp)
    4f48:	e0bffd17 	ldw	r2,-12(fp)
    4f4c:	1880020e 	bge	r3,r2,4f58 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    4f50:	e0bffd17 	ldw	r2,-12(fp)
    4f54:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
    4f58:	e0bffd17 	ldw	r2,-12(fp)
    4f5c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    4f60:	00000606 	br	4f7c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    4f64:	e0bffd17 	ldw	r2,-12(fp)
    4f68:	10800044 	addi	r2,r2,1
    4f6c:	e0bffd15 	stw	r2,-12(fp)
    4f70:	e0bffd17 	ldw	r2,-12(fp)
    4f74:	10800810 	cmplti	r2,r2,32
    4f78:	103fe41e 	bne	r2,zero,4f0c <__alt_data_end+0xf8004f0c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4f7c:	e0bffe17 	ldw	r2,-8(fp)
}
    4f80:	e037883a 	mov	sp,fp
    4f84:	df000017 	ldw	fp,0(sp)
    4f88:	dec00104 	addi	sp,sp,4
    4f8c:	f800283a 	ret

00004f90 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    4f90:	defffb04 	addi	sp,sp,-20
    4f94:	df000415 	stw	fp,16(sp)
    4f98:	df000404 	addi	fp,sp,16
    4f9c:	e13ffe15 	stw	r4,-8(fp)
    4fa0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    4fa4:	e0bfff17 	ldw	r2,-4(fp)
    4fa8:	10840070 	cmpltui	r2,r2,4097
    4fac:	1000021e 	bne	r2,zero,4fb8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    4fb0:	00840004 	movi	r2,4096
    4fb4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    4fb8:	e0fffe17 	ldw	r3,-8(fp)
    4fbc:	e0bfff17 	ldw	r2,-4(fp)
    4fc0:	1885883a 	add	r2,r3,r2
    4fc4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4fc8:	e0bffe17 	ldw	r2,-8(fp)
    4fcc:	e0bffc15 	stw	r2,-16(fp)
    4fd0:	00000506 	br	4fe8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    4fd4:	e0bffc17 	ldw	r2,-16(fp)
    4fd8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    4fdc:	e0bffc17 	ldw	r2,-16(fp)
    4fe0:	10800804 	addi	r2,r2,32
    4fe4:	e0bffc15 	stw	r2,-16(fp)
    4fe8:	e0fffc17 	ldw	r3,-16(fp)
    4fec:	e0bffd17 	ldw	r2,-12(fp)
    4ff0:	18bff836 	bltu	r3,r2,4fd4 <__alt_data_end+0xf8004fd4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    4ff4:	e0bffe17 	ldw	r2,-8(fp)
    4ff8:	108007cc 	andi	r2,r2,31
    4ffc:	10000226 	beq	r2,zero,5008 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    5000:	e0bffc17 	ldw	r2,-16(fp)
    5004:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    5008:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    500c:	0001883a 	nop
    5010:	e037883a 	mov	sp,fp
    5014:	df000017 	ldw	fp,0(sp)
    5018:	dec00104 	addi	sp,sp,4
    501c:	f800283a 	ret

00005020 <atexit>:
    5020:	200b883a 	mov	r5,r4
    5024:	000f883a 	mov	r7,zero
    5028:	000d883a 	mov	r6,zero
    502c:	0009883a 	mov	r4,zero
    5030:	00052c81 	jmpi	52c8 <__register_exitproc>

00005034 <exit>:
    5034:	defffe04 	addi	sp,sp,-8
    5038:	000b883a 	mov	r5,zero
    503c:	dc000015 	stw	r16,0(sp)
    5040:	dfc00115 	stw	ra,4(sp)
    5044:	2021883a 	mov	r16,r4
    5048:	00053e00 	call	53e0 <__call_exitprocs>
    504c:	00800034 	movhi	r2,0
    5050:	109b8204 	addi	r2,r2,28168
    5054:	11000017 	ldw	r4,0(r2)
    5058:	20800f17 	ldw	r2,60(r4)
    505c:	10000126 	beq	r2,zero,5064 <exit+0x30>
    5060:	103ee83a 	callr	r2
    5064:	8009883a 	mov	r4,r16
    5068:	00055600 	call	5560 <_exit>

0000506c <memcmp>:
    506c:	01c000c4 	movi	r7,3
    5070:	3980192e 	bgeu	r7,r6,50d8 <memcmp+0x6c>
    5074:	2144b03a 	or	r2,r4,r5
    5078:	11c4703a 	and	r2,r2,r7
    507c:	10000f26 	beq	r2,zero,50bc <memcmp+0x50>
    5080:	20800003 	ldbu	r2,0(r4)
    5084:	28c00003 	ldbu	r3,0(r5)
    5088:	10c0151e 	bne	r2,r3,50e0 <memcmp+0x74>
    508c:	31bfff84 	addi	r6,r6,-2
    5090:	01ffffc4 	movi	r7,-1
    5094:	00000406 	br	50a8 <memcmp+0x3c>
    5098:	20800003 	ldbu	r2,0(r4)
    509c:	28c00003 	ldbu	r3,0(r5)
    50a0:	31bfffc4 	addi	r6,r6,-1
    50a4:	10c00e1e 	bne	r2,r3,50e0 <memcmp+0x74>
    50a8:	21000044 	addi	r4,r4,1
    50ac:	29400044 	addi	r5,r5,1
    50b0:	31fff91e 	bne	r6,r7,5098 <__alt_data_end+0xf8005098>
    50b4:	0005883a 	mov	r2,zero
    50b8:	f800283a 	ret
    50bc:	20c00017 	ldw	r3,0(r4)
    50c0:	28800017 	ldw	r2,0(r5)
    50c4:	18bfee1e 	bne	r3,r2,5080 <__alt_data_end+0xf8005080>
    50c8:	31bfff04 	addi	r6,r6,-4
    50cc:	21000104 	addi	r4,r4,4
    50d0:	29400104 	addi	r5,r5,4
    50d4:	39bff936 	bltu	r7,r6,50bc <__alt_data_end+0xf80050bc>
    50d8:	303fe91e 	bne	r6,zero,5080 <__alt_data_end+0xf8005080>
    50dc:	003ff506 	br	50b4 <__alt_data_end+0xf80050b4>
    50e0:	10c5c83a 	sub	r2,r2,r3
    50e4:	f800283a 	ret

000050e8 <memcpy>:
    50e8:	defffd04 	addi	sp,sp,-12
    50ec:	dfc00215 	stw	ra,8(sp)
    50f0:	dc400115 	stw	r17,4(sp)
    50f4:	dc000015 	stw	r16,0(sp)
    50f8:	00c003c4 	movi	r3,15
    50fc:	2005883a 	mov	r2,r4
    5100:	1980452e 	bgeu	r3,r6,5218 <memcpy+0x130>
    5104:	2906b03a 	or	r3,r5,r4
    5108:	18c000cc 	andi	r3,r3,3
    510c:	1800441e 	bne	r3,zero,5220 <memcpy+0x138>
    5110:	347ffc04 	addi	r17,r6,-16
    5114:	8822d13a 	srli	r17,r17,4
    5118:	28c00104 	addi	r3,r5,4
    511c:	23400104 	addi	r13,r4,4
    5120:	8820913a 	slli	r16,r17,4
    5124:	2b000204 	addi	r12,r5,8
    5128:	22c00204 	addi	r11,r4,8
    512c:	84000504 	addi	r16,r16,20
    5130:	2a800304 	addi	r10,r5,12
    5134:	22400304 	addi	r9,r4,12
    5138:	2c21883a 	add	r16,r5,r16
    513c:	2811883a 	mov	r8,r5
    5140:	200f883a 	mov	r7,r4
    5144:	41000017 	ldw	r4,0(r8)
    5148:	1fc00017 	ldw	ra,0(r3)
    514c:	63c00017 	ldw	r15,0(r12)
    5150:	39000015 	stw	r4,0(r7)
    5154:	53800017 	ldw	r14,0(r10)
    5158:	6fc00015 	stw	ra,0(r13)
    515c:	5bc00015 	stw	r15,0(r11)
    5160:	4b800015 	stw	r14,0(r9)
    5164:	18c00404 	addi	r3,r3,16
    5168:	39c00404 	addi	r7,r7,16
    516c:	42000404 	addi	r8,r8,16
    5170:	6b400404 	addi	r13,r13,16
    5174:	63000404 	addi	r12,r12,16
    5178:	5ac00404 	addi	r11,r11,16
    517c:	52800404 	addi	r10,r10,16
    5180:	4a400404 	addi	r9,r9,16
    5184:	1c3fef1e 	bne	r3,r16,5144 <__alt_data_end+0xf8005144>
    5188:	89c00044 	addi	r7,r17,1
    518c:	380e913a 	slli	r7,r7,4
    5190:	310003cc 	andi	r4,r6,15
    5194:	02c000c4 	movi	r11,3
    5198:	11c7883a 	add	r3,r2,r7
    519c:	29cb883a 	add	r5,r5,r7
    51a0:	5900212e 	bgeu	r11,r4,5228 <memcpy+0x140>
    51a4:	1813883a 	mov	r9,r3
    51a8:	2811883a 	mov	r8,r5
    51ac:	200f883a 	mov	r7,r4
    51b0:	42800017 	ldw	r10,0(r8)
    51b4:	4a400104 	addi	r9,r9,4
    51b8:	39ffff04 	addi	r7,r7,-4
    51bc:	4abfff15 	stw	r10,-4(r9)
    51c0:	42000104 	addi	r8,r8,4
    51c4:	59fffa36 	bltu	r11,r7,51b0 <__alt_data_end+0xf80051b0>
    51c8:	213fff04 	addi	r4,r4,-4
    51cc:	2008d0ba 	srli	r4,r4,2
    51d0:	318000cc 	andi	r6,r6,3
    51d4:	21000044 	addi	r4,r4,1
    51d8:	2109883a 	add	r4,r4,r4
    51dc:	2109883a 	add	r4,r4,r4
    51e0:	1907883a 	add	r3,r3,r4
    51e4:	290b883a 	add	r5,r5,r4
    51e8:	30000626 	beq	r6,zero,5204 <memcpy+0x11c>
    51ec:	198d883a 	add	r6,r3,r6
    51f0:	29c00003 	ldbu	r7,0(r5)
    51f4:	18c00044 	addi	r3,r3,1
    51f8:	29400044 	addi	r5,r5,1
    51fc:	19ffffc5 	stb	r7,-1(r3)
    5200:	19bffb1e 	bne	r3,r6,51f0 <__alt_data_end+0xf80051f0>
    5204:	dfc00217 	ldw	ra,8(sp)
    5208:	dc400117 	ldw	r17,4(sp)
    520c:	dc000017 	ldw	r16,0(sp)
    5210:	dec00304 	addi	sp,sp,12
    5214:	f800283a 	ret
    5218:	2007883a 	mov	r3,r4
    521c:	003ff206 	br	51e8 <__alt_data_end+0xf80051e8>
    5220:	2007883a 	mov	r3,r4
    5224:	003ff106 	br	51ec <__alt_data_end+0xf80051ec>
    5228:	200d883a 	mov	r6,r4
    522c:	003fee06 	br	51e8 <__alt_data_end+0xf80051e8>

00005230 <strlen>:
    5230:	208000cc 	andi	r2,r4,3
    5234:	10002026 	beq	r2,zero,52b8 <strlen+0x88>
    5238:	20800007 	ldb	r2,0(r4)
    523c:	10002026 	beq	r2,zero,52c0 <strlen+0x90>
    5240:	2005883a 	mov	r2,r4
    5244:	00000206 	br	5250 <strlen+0x20>
    5248:	10c00007 	ldb	r3,0(r2)
    524c:	18001826 	beq	r3,zero,52b0 <strlen+0x80>
    5250:	10800044 	addi	r2,r2,1
    5254:	10c000cc 	andi	r3,r2,3
    5258:	183ffb1e 	bne	r3,zero,5248 <__alt_data_end+0xf8005248>
    525c:	10c00017 	ldw	r3,0(r2)
    5260:	01ffbff4 	movhi	r7,65279
    5264:	39ffbfc4 	addi	r7,r7,-257
    5268:	00ca303a 	nor	r5,zero,r3
    526c:	01a02074 	movhi	r6,32897
    5270:	19c7883a 	add	r3,r3,r7
    5274:	31a02004 	addi	r6,r6,-32640
    5278:	1946703a 	and	r3,r3,r5
    527c:	1986703a 	and	r3,r3,r6
    5280:	1800091e 	bne	r3,zero,52a8 <strlen+0x78>
    5284:	10800104 	addi	r2,r2,4
    5288:	10c00017 	ldw	r3,0(r2)
    528c:	19cb883a 	add	r5,r3,r7
    5290:	00c6303a 	nor	r3,zero,r3
    5294:	28c6703a 	and	r3,r5,r3
    5298:	1986703a 	and	r3,r3,r6
    529c:	183ff926 	beq	r3,zero,5284 <__alt_data_end+0xf8005284>
    52a0:	00000106 	br	52a8 <strlen+0x78>
    52a4:	10800044 	addi	r2,r2,1
    52a8:	10c00007 	ldb	r3,0(r2)
    52ac:	183ffd1e 	bne	r3,zero,52a4 <__alt_data_end+0xf80052a4>
    52b0:	1105c83a 	sub	r2,r2,r4
    52b4:	f800283a 	ret
    52b8:	2005883a 	mov	r2,r4
    52bc:	003fe706 	br	525c <__alt_data_end+0xf800525c>
    52c0:	0005883a 	mov	r2,zero
    52c4:	f800283a 	ret

000052c8 <__register_exitproc>:
    52c8:	defffa04 	addi	sp,sp,-24
    52cc:	dc000315 	stw	r16,12(sp)
    52d0:	04000034 	movhi	r16,0
    52d4:	841b8204 	addi	r16,r16,28168
    52d8:	80c00017 	ldw	r3,0(r16)
    52dc:	dc400415 	stw	r17,16(sp)
    52e0:	dfc00515 	stw	ra,20(sp)
    52e4:	18805217 	ldw	r2,328(r3)
    52e8:	2023883a 	mov	r17,r4
    52ec:	10003726 	beq	r2,zero,53cc <__register_exitproc+0x104>
    52f0:	10c00117 	ldw	r3,4(r2)
    52f4:	010007c4 	movi	r4,31
    52f8:	20c00e16 	blt	r4,r3,5334 <__register_exitproc+0x6c>
    52fc:	1a000044 	addi	r8,r3,1
    5300:	8800221e 	bne	r17,zero,538c <__register_exitproc+0xc4>
    5304:	18c00084 	addi	r3,r3,2
    5308:	18c7883a 	add	r3,r3,r3
    530c:	18c7883a 	add	r3,r3,r3
    5310:	12000115 	stw	r8,4(r2)
    5314:	10c7883a 	add	r3,r2,r3
    5318:	19400015 	stw	r5,0(r3)
    531c:	0005883a 	mov	r2,zero
    5320:	dfc00517 	ldw	ra,20(sp)
    5324:	dc400417 	ldw	r17,16(sp)
    5328:	dc000317 	ldw	r16,12(sp)
    532c:	dec00604 	addi	sp,sp,24
    5330:	f800283a 	ret
    5334:	00800034 	movhi	r2,0
    5338:	10800004 	addi	r2,r2,0
    533c:	10002626 	beq	r2,zero,53d8 <__register_exitproc+0x110>
    5340:	01006404 	movi	r4,400
    5344:	d9400015 	stw	r5,0(sp)
    5348:	d9800115 	stw	r6,4(sp)
    534c:	d9c00215 	stw	r7,8(sp)
    5350:	00000000 	call	0 <__alt_mem_sdram_controller>
    5354:	d9400017 	ldw	r5,0(sp)
    5358:	d9800117 	ldw	r6,4(sp)
    535c:	d9c00217 	ldw	r7,8(sp)
    5360:	10001d26 	beq	r2,zero,53d8 <__register_exitproc+0x110>
    5364:	81000017 	ldw	r4,0(r16)
    5368:	10000115 	stw	zero,4(r2)
    536c:	02000044 	movi	r8,1
    5370:	22405217 	ldw	r9,328(r4)
    5374:	0007883a 	mov	r3,zero
    5378:	12400015 	stw	r9,0(r2)
    537c:	20805215 	stw	r2,328(r4)
    5380:	10006215 	stw	zero,392(r2)
    5384:	10006315 	stw	zero,396(r2)
    5388:	883fde26 	beq	r17,zero,5304 <__alt_data_end+0xf8005304>
    538c:	18c9883a 	add	r4,r3,r3
    5390:	2109883a 	add	r4,r4,r4
    5394:	1109883a 	add	r4,r2,r4
    5398:	21802215 	stw	r6,136(r4)
    539c:	01800044 	movi	r6,1
    53a0:	12406217 	ldw	r9,392(r2)
    53a4:	30cc983a 	sll	r6,r6,r3
    53a8:	4992b03a 	or	r9,r9,r6
    53ac:	12406215 	stw	r9,392(r2)
    53b0:	21c04215 	stw	r7,264(r4)
    53b4:	01000084 	movi	r4,2
    53b8:	893fd21e 	bne	r17,r4,5304 <__alt_data_end+0xf8005304>
    53bc:	11006317 	ldw	r4,396(r2)
    53c0:	218cb03a 	or	r6,r4,r6
    53c4:	11806315 	stw	r6,396(r2)
    53c8:	003fce06 	br	5304 <__alt_data_end+0xf8005304>
    53cc:	18805304 	addi	r2,r3,332
    53d0:	18805215 	stw	r2,328(r3)
    53d4:	003fc606 	br	52f0 <__alt_data_end+0xf80052f0>
    53d8:	00bfffc4 	movi	r2,-1
    53dc:	003fd006 	br	5320 <__alt_data_end+0xf8005320>

000053e0 <__call_exitprocs>:
    53e0:	defff504 	addi	sp,sp,-44
    53e4:	df000915 	stw	fp,36(sp)
    53e8:	dd400615 	stw	r21,24(sp)
    53ec:	dc800315 	stw	r18,12(sp)
    53f0:	dfc00a15 	stw	ra,40(sp)
    53f4:	ddc00815 	stw	r23,32(sp)
    53f8:	dd800715 	stw	r22,28(sp)
    53fc:	dd000515 	stw	r20,20(sp)
    5400:	dcc00415 	stw	r19,16(sp)
    5404:	dc400215 	stw	r17,8(sp)
    5408:	dc000115 	stw	r16,4(sp)
    540c:	d9000015 	stw	r4,0(sp)
    5410:	2839883a 	mov	fp,r5
    5414:	04800044 	movi	r18,1
    5418:	057fffc4 	movi	r21,-1
    541c:	00800034 	movhi	r2,0
    5420:	109b8204 	addi	r2,r2,28168
    5424:	12000017 	ldw	r8,0(r2)
    5428:	45005217 	ldw	r20,328(r8)
    542c:	44c05204 	addi	r19,r8,328
    5430:	a0001c26 	beq	r20,zero,54a4 <__call_exitprocs+0xc4>
    5434:	a0800117 	ldw	r2,4(r20)
    5438:	15ffffc4 	addi	r23,r2,-1
    543c:	b8000d16 	blt	r23,zero,5474 <__call_exitprocs+0x94>
    5440:	14000044 	addi	r16,r2,1
    5444:	8421883a 	add	r16,r16,r16
    5448:	8421883a 	add	r16,r16,r16
    544c:	84402004 	addi	r17,r16,128
    5450:	a463883a 	add	r17,r20,r17
    5454:	a421883a 	add	r16,r20,r16
    5458:	e0001e26 	beq	fp,zero,54d4 <__call_exitprocs+0xf4>
    545c:	80804017 	ldw	r2,256(r16)
    5460:	e0801c26 	beq	fp,r2,54d4 <__call_exitprocs+0xf4>
    5464:	bdffffc4 	addi	r23,r23,-1
    5468:	843fff04 	addi	r16,r16,-4
    546c:	8c7fff04 	addi	r17,r17,-4
    5470:	bd7ff91e 	bne	r23,r21,5458 <__alt_data_end+0xf8005458>
    5474:	00800034 	movhi	r2,0
    5478:	10800004 	addi	r2,r2,0
    547c:	10000926 	beq	r2,zero,54a4 <__call_exitprocs+0xc4>
    5480:	a0800117 	ldw	r2,4(r20)
    5484:	1000301e 	bne	r2,zero,5548 <__call_exitprocs+0x168>
    5488:	a0800017 	ldw	r2,0(r20)
    548c:	10003226 	beq	r2,zero,5558 <__call_exitprocs+0x178>
    5490:	a009883a 	mov	r4,r20
    5494:	98800015 	stw	r2,0(r19)
    5498:	00000000 	call	0 <__alt_mem_sdram_controller>
    549c:	9d000017 	ldw	r20,0(r19)
    54a0:	a03fe41e 	bne	r20,zero,5434 <__alt_data_end+0xf8005434>
    54a4:	dfc00a17 	ldw	ra,40(sp)
    54a8:	df000917 	ldw	fp,36(sp)
    54ac:	ddc00817 	ldw	r23,32(sp)
    54b0:	dd800717 	ldw	r22,28(sp)
    54b4:	dd400617 	ldw	r21,24(sp)
    54b8:	dd000517 	ldw	r20,20(sp)
    54bc:	dcc00417 	ldw	r19,16(sp)
    54c0:	dc800317 	ldw	r18,12(sp)
    54c4:	dc400217 	ldw	r17,8(sp)
    54c8:	dc000117 	ldw	r16,4(sp)
    54cc:	dec00b04 	addi	sp,sp,44
    54d0:	f800283a 	ret
    54d4:	a0800117 	ldw	r2,4(r20)
    54d8:	80c00017 	ldw	r3,0(r16)
    54dc:	10bfffc4 	addi	r2,r2,-1
    54e0:	15c01426 	beq	r2,r23,5534 <__call_exitprocs+0x154>
    54e4:	80000015 	stw	zero,0(r16)
    54e8:	183fde26 	beq	r3,zero,5464 <__alt_data_end+0xf8005464>
    54ec:	95c8983a 	sll	r4,r18,r23
    54f0:	a0806217 	ldw	r2,392(r20)
    54f4:	a5800117 	ldw	r22,4(r20)
    54f8:	2084703a 	and	r2,r4,r2
    54fc:	10000b26 	beq	r2,zero,552c <__call_exitprocs+0x14c>
    5500:	a0806317 	ldw	r2,396(r20)
    5504:	2088703a 	and	r4,r4,r2
    5508:	20000c1e 	bne	r4,zero,553c <__call_exitprocs+0x15c>
    550c:	89400017 	ldw	r5,0(r17)
    5510:	d9000017 	ldw	r4,0(sp)
    5514:	183ee83a 	callr	r3
    5518:	a0800117 	ldw	r2,4(r20)
    551c:	15bfbf1e 	bne	r2,r22,541c <__alt_data_end+0xf800541c>
    5520:	98800017 	ldw	r2,0(r19)
    5524:	153fcf26 	beq	r2,r20,5464 <__alt_data_end+0xf8005464>
    5528:	003fbc06 	br	541c <__alt_data_end+0xf800541c>
    552c:	183ee83a 	callr	r3
    5530:	003ff906 	br	5518 <__alt_data_end+0xf8005518>
    5534:	a5c00115 	stw	r23,4(r20)
    5538:	003feb06 	br	54e8 <__alt_data_end+0xf80054e8>
    553c:	89000017 	ldw	r4,0(r17)
    5540:	183ee83a 	callr	r3
    5544:	003ff406 	br	5518 <__alt_data_end+0xf8005518>
    5548:	a0800017 	ldw	r2,0(r20)
    554c:	a027883a 	mov	r19,r20
    5550:	1029883a 	mov	r20,r2
    5554:	003fb606 	br	5430 <__alt_data_end+0xf8005430>
    5558:	0005883a 	mov	r2,zero
    555c:	003ffb06 	br	554c <__alt_data_end+0xf800554c>

00005560 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    5560:	defffd04 	addi	sp,sp,-12
    5564:	df000215 	stw	fp,8(sp)
    5568:	df000204 	addi	fp,sp,8
    556c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    5570:	0001883a 	nop
    5574:	e0bfff17 	ldw	r2,-4(fp)
    5578:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    557c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5580:	10000226 	beq	r2,zero,558c <_exit+0x2c>
    ALT_SIM_FAIL();
    5584:	002af070 	cmpltui	zero,zero,43969
    5588:	00000106 	br	5590 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    558c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5590:	003fff06 	br	5590 <__alt_data_end+0xf8005590>
